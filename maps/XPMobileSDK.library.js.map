{"version":3,"sources":["logger.js","BigInt.js","polyfills.js","webStorage.js","Base64.js","ConnectionResponse.js","AES.js","SHA256.js","SHA512.js","NetworkConfig.js","SecureString.js","CHAP.js","Challenge.js","DiffieHellman.js","ISO10126.js","PKCECode.js","Ajax.js","Bytes.js","CommunicationStability.js","Connection.js","ConnectionRequest.js","PullConnection.js","PushConnection.js","VideoConnection.js","VideoStream.js","ItemHeaderParser.js","VideoHeaderParser.js","AudioHeaderParser.js","VideoConnectionPool.js","VideoPushConnection.js","AudioPushConnection.js","AudioAvailability.js"],"names":["logger","info","console","arguments","error","warn","log","init","XPMobileSDKSettings","EnableConsoleLog","Object","assign","target","varArgs","TypeError","result","index","length","nextSource","nextKey","prototype","hasOwnProperty","call","window","localStorage","sessionStorage","i","storages","XPMobileSDK","storage","setItem","key","value","expiration","obj","Date","getTime","this","JSON","stringify","getItem","indexOf","parse","substr","removeItem","parseFloat","clear","bpe","mask","radix","digitsStr","findPrimes","n","p","ans","s","Array","millerRabinInt","x","b","mr_x1","dup","mr_r","mr_a","copyInt_","millerRabin","j","k","copy_","addInt_","rightShift_","powMod_","equalsInt","equals","squareMod_","bitSize","z","w","expand","int2bigInt","randTruePrime","randTruePrime_","trim","randProbPrime","randProbPrimeRounds","divisible","primes","rpprb","randBigInt_","modInt","greater","mod","mod_","addInt","mult","y","mult_","powMod","sub","sub_","add","add_","inverseMod","inverseMod_","multMod","multMod_","pm","dd","r","B","zz","recSize","pows","Math","pow","recLimit","s_i2","s_R","s_n1","s_r2","s_d","s_x1","s_x2","s_b","s_n","s_i","s_rm","s_q","s_a","s_aa","floor","random","carry_","divide_","multInt_","isZero","GCD_","randBigInt","a","GCD","xc","xp","yp","A","C","D","q","sing","T","qp","t","linComb_","max","eg_u","eg_v","eg_A","eg_B","eg_C","eg_D","halve_","negative","inverseModInt","inverseModInt_","eGCD_","v","g","leftShift_","greaterShift","shift","kx","ky","y1","y2","c","subShift_","linCombShift_","addShift_","bits","minSize","ceil","buff","str2bigInt","base","d","kk","parseInt","substring","bigInt2str","s6","divInt_","ys","ss","s4","s5","s0","k1","k2","kn","np","s7","s3","mont_","one","ui","ks","sa","s2","s1","md_tt","md_r2","md_r1","md_r","md_q3","md_q2","md_q1","parseXML","XMLNodeTextContent","Base64","_keyStr","encode","input","chr2","chr3","enc1","enc2","enc3","enc4","output","chr1","charCodeAt","isNaN","charAt","encodeArray","decode","replace","String","fromCharCode","_utf8_decode","decodeBinary","arrayBuffer","Uint8Array","e","subarray","start","end","slice","set_","array","offset","TypedArray","arg1","buffer","byteLength","set","Uint32Array","Int32Array","lkey1","lkey2","bytes","uarray","_utf8_encode","string","utftext","c1","c2","c3","CryptoJS","u","l","lib","Base","extend","mixIn","$super","apply","create","toString","clone","WordArray","words","sigBytes","concat","clamp","push","enc","Hex","join","Latin1","Utf8","decodeURIComponent","escape","Error","unescape","encodeURIComponent","BufferedBlockAlgorithm","reset","_data","_nDataBytes","_append","_process","blockSize","_minBufferSize","min","_doProcessBlock","splice","Hasher","cfg","_doReset","update","finalize","_doFinalize","_createHelper","_createHmacHelper","HMAC","algo","_map","abs","sin","MD5","_hash","E","f","m","h","HmacMD5","EvpKDF","keySize","hasher","iterations","compute","Cipher","_iv","_prevBlock","createEncryptor","_ENC_XFORM_MODE","createDecryptor","_DEC_XFORM_MODE","_xformMode","_key","process","ivSize","encrypt","decrypt","StreamCipher","mode","BlockCipherMode","Encryptor","Decryptor","_cipher","processBlock","encryptBlock","decryptBlock","CBC","pad","Pkcs7","unpad","BlockCipher","padding","iv","_mode","CipherParams","formatter","format","OpenSSL","ciphertext","salt","SerializableCipher","algorithm","_parse","kdf","execute","PasswordBasedCipher","F","G","H","AES","_nRounds","_keySchedule","_invKeySchedule","_doCryptBlock","sqrt","SHA256","HmacSHA256","fa","ga","NETWORK","x64","Word","high","low","toX32","SHA512","N","Z","O","$","P","aa","Q","ba","R","ca","S","da","I","W","J","U","K","V","L","X","M","Y","ia","ea","HmacSHA512","library","SecureString","sharedKey","generateKey","params","cip","Settings","DefaultEncryptionPadding","data","split","Connection","dh","getSharedKey","toUpperCase","CHAP","challenges","minChallenges","haltThreshold","halt","waitingForData","initialize","addObserver","cleanUp","connectionId","isValid","destroy","NumChallenges","Reset","requestChallenges","challenge","Challenge","takeValidChallenge","getValue","haltSystem","unHaltSystem","ttl","exportAll","forEach","sort","first","second","calculate","ChalAnswer","timeout","undefined","connectionLostConnection","connectionDidDisconnect","document","getElementById","setAttribute","removeAttribute","connectionRequestSucceeded","request","response","CHAPSupported","parameters","date","now","DiffieHellman","str2byteArray","str","reverse","primeKeyBigInt","1024","2048","primeLength","generator","randKey","serverKey","createPublicKey","byteArrayKey","setServerPublicKey","publicKey","decodedServerKey","reversedServerKey","secretKey","encodeString","secretString","_sharedKey","defaultEncryptionPadding","Iso10126","PKCECode","codeVerifier","getCodeVerifier","getCodeChallenge","Ajax","Request","connectionUrl","realTimeout","ajaxRequest","method","contentType","responseType","encoding","postBody","asynchronous","onLoading","onComplete","onSuccess","onFailure","onTimeout","XMLHttpRequest","onreadystatechange","readyState","status","responseText","open","ontimeout","setRequestHeader","send","Bytes","fromHex","hex","numbers","match","item","fromInt","integer","fromGuid","guid","fromBase64","base64","atob","MIN_REQUEST_TIME_LOWER_BOUND","MIN_REQUEST_TIME_UPPER_BOUND","MAX_REQUEST_TIME","MAX_REQUEST_TIME_ON_FAILURE","REQUEST_TIME_GROW_PER_EMPTY_FRAME","REQUEST_TIME_GROW_PER_HTTP_ERROR","MIN_REQUEST_TIME_GROW","MIN_REQUEST_TIME_DECREASE","MIN_REQUEST_TIME_INCREASE","VIDEO_PROTOCOL_RECOVER_PACE","VIDEO_FAILS_MONITOR","minRequestTime","requestTime","requestTimeOnFailure","websocketSendMessage","CommunicationStability","connectionProtocolFails","videoProtocolFails","videoProtocolFailDate","noRecentVideoFails","interval","setInterval","addBreakDown","object","brokenDown","removeBreakDown","addVideoBreakDown","isBrokenDown","ConnectionStates","idle","connecting","loggingIn","working","lostConnection","ConnectionObserverInterface","connectionStateChanged","connectionDidConnect","connectionFailedToConnect","connectionFailedToConnectWithId","connectionRequiresCode","provider","connectionCodeError","connectionDidLogIn","connectionFailedToLogIn","connectionProcessingDisconnect","connectionVersionChanged","connectionReloadConfiguration","connectionReloadCameraConfiguration","closeStreamFinished","disconnectOnFail","cancelLiveMessage","setState","VideoConnectionPool","callMethodOnObservers","self","liveMessageFailCallback","scheduledDisconnectOnFail","setTimeout","serverTimeout","requests","serverId","currentUserName","currentUserEmail","state","DSServerStatus","NotAvailable","DoNotEnforce","EnforceWheneverPossible","Enforce","observers","sequenceID","liveMessagesWaiting","connectCallback","features","resizeAvailable","webSocketServer","webSocketBrowser","directStreamingClient","directStreamingServer","exportToAvi","exportToDb","exportToMkv","analytics","server","MobileServerURL","location","origin","removeObserver","cancelRequest","connectionRequest","cancel","requestFinished","Connect","successCallback","failCallback","ProcessingMessage","sendCommand","successResponseParameter","connectionResponse","isError","failedResponseParameter","options","outputParameters","ConnectionId","Timeout","ServerId","WebSocketSupport","WebSocket","DirectStreaming","SecurityEnabled","PublicKey","ServerProductCode","scheduleLiveMessage","loginCallback","connectWithId","sendLiveMessage","connectingViaExternalConnectionID","Login","LoginType","Username","Password","code","ConnectionError","SecondStepAuthenticationRequired","ssarParameter","SecondStepAuthenticationProvider","proceedWithLogin","DirectStreamingLive","ExportToAvi","ExportToDb","ExportToMkv","Email","getFeatures","requestCodeCallback","requestCode","callbackAfterRequest","verifyCodeCallback","verifyCode","SecondStepAuthenticationPin","SecondStepAuthenticationCodeError","logOutCallback","Disconnect","getViewsCallback","getViews","viewId","ViewId","subViews","subViewsNodes","subItems","getElementsByTagName","res","attributes","name","view","id","getAllViewsCallback","getAllViews","items","getAllCamerasCallback","getAllCameras","ItemKind","Hierarchy","IncludeRelatedDevices","requestStreamCallback","requestPushStream","RequestStream","SignalType","ByteOrder","requestStream","cameraId","size","CameraId","DestWidth","round","width","DestHeight","height","signal","interfaces","VideoConnectionSignal","playback","MethodType","Fps","ComprLevel","jpegCompressionLevel","KeyFramesOnly","keyFramesOnly","RequestSize","StreamType","streamType","VideoConnectionStream","FragmentedMP4","fragmentDurationMs","FragmentDurationMs","time","SeekType","Time","motionOverlay","MotionOverlay","MultiCameraPlayback","playbackControllerId","PlaybackControllerId","reuseConnection","let","messageString","errorCode","InsufficientUserRights","videoId","VideoId","videoConnection","VideoStream","addCamera","requestAudioStreamInCallback","RequestAudioStreamIn","requestAudioStreamIn","itemId","ItemId","AudioEncoding","AudioSamplingRate","AudioBitsPerSample","AudioChannelsNumber","StreamDataType","StreamHeaders","requestAudioStreamCallback","RequestAudioStream","requestAudioStream","microphoneId","CloseConnectionOnError","AudioCompressionLevel","streamId","StreamId","changeStreamCallback","toggleDirectStreaming","enabled","VideoConnection","instances","getState","VideoConnectionState","running","close","toggleAnalytics","dispatchEvent","CustomEvent","changeStream","cropping","top","SrcTop","left","SrcLeft","right","SrcRight","bottom","SrcBottom","ChangeStream","getPtzPresetsCallback","motionDetection","motion","MotionAmount","sensitivity","SensitivityAmount","cpu","CPUImpactAmount","grid","RegionGrid","test","getPtzPresets","closeStreamCallback","closeStream","CloseStream","closeAudioStream","closeAudioStreamCallback","closeStreamGeneralCallback","connectionRequestResponseIsTerminal","fps","decreasing","increasing","current","stable","queueEmptyCount","change","manage","queueLength","decrease","increase","bind","camera","cameras","ptzTapAndHoldCallback","ptzPreset","presetName","PtzPreset","controlPTZCallback","ptzMove","direction","PtzMove","ptzTapAndHold","ptzSwipe","gestureDuration","getThumbnailCallback","playbackSpeed","speed","Speed","playbackSeek","seekType","playbackGoTo","millisecondsSinceUnixEpoch","getThumbnail","thumbnailBase64","getThumbnailByTimeCallback","getThumbnailByTime","commandParams","Thumbnail","Timestamp","getDBStartTimeCallback","getDBStartTime","getNextSequenceCallback","getNextSequence","timestamp","afterTime","SeqType","AfterTime","AfterCount","sequences","getPrevSequenceCallback","getPrevSequence","BeforeTime","daysToSeconds","BeforeCount","getSequencesInIntervalCallback","getSequencesInInterval","startTime","endTime","investigationId","InvestigationId","getSequencesForViewCallback","getSequencesForView","minTimeBetweenSequences","seqType","itemKind","MinTimeBetweenSequences","getUserExportsCallback","getUserExports","ExportId","exports","getAllExportsCallback","getAllExports","createExportDownloadLinkCallback","createExportDownloadLink","exportId","exportType","Type","ExportLink","getExportCallback","getExport","getOutputsAndEventsCallback","getOutputsAndEvents","actions","getServerStatusCallback","getServerStatus","ServerStatus","triggerOutputOrEventCallback","triggerOutputOrEvent","objectId","triggerType","ObjectId","TriggerType","getCameraCapabilitiesCallback","getCameraCapabilities","requestChallengesCallback","createPlaybackControllerCallback","createPlaybackController","CloseOldControllers","onClose","onRestart","onPushFailed","changeMultipleStreamsCallback","changeMultipleStreams","getInvestigationsCallback","getAllInvestigations","getUserInvestigations","getInvestigationCallback","getInvestigation","createInvestigationCallback","createInvestigation","updateInvestigationCallback","updateInvestigation","updateInvestigationData","deleteInvestigationCallback","deleteInvestigation","cancelInvestigationCallback","cancelInvestigation","startInvestigationExportCallback","startInvestigationExport","includeAudio","password","ExportType","IncludeAudio","deleteInvestigationExportCallback","deleteInvestigationExport","getAlarmsCallback","getAlarmList","MyAlarms","Operator","Count","Priority","State","getAlarmCallback","getAlarm","alarmId","AlarmId","updateAlarmCallback","updateAlarm","getAlarmDataSettingsCallback","getAlarmDataSettings","getAlarmUsersCallback","getAlarmUsers","SourceId","acknowledgeAlarmCallback","acknowledgeAlarm","Id","getBookmarksCallback","GetBookmarks","getBookmarks","MyBookmarks","BookmarkId","StartTime","EndTime","Keyword","SearchCameraIds","deleteBookmarkCallback","deleteBookmark","prevCarouselCameraCallback","prevCarouselCamera","CarouselCommand","nextCarouselCameraCallback","nextCarouselCamera","pauseCarouselCallback","pauseCarousel","resumeCarouselCallback","resumeCarousel","registerForNotificationsCallback","registerForNotifications","setting","browser","getBrowser","deviceName","version","os","DeviceName","DeviceId","RegisterForNotifications","createBookmarkCallback","CreateBookmark","requestBookmarkCreationCallback","RequestBookmarkCreation","updateBookmarkCallback","UpdateBookmark","errorMessage","callback","commandName","requestParams","supportsCHAP","ConnectionRequest","getNextSequenceID","methodName","args","filter","observer","stack","liveMessageTimer","updateLiveMessageTimer","minInterval","clearTimeout","liveMessageCallback","LiveMessage","FolderDefinitionsChanged","ViewDefinitionsChanged","CameraDefinitionsChanged","ServerType","ServerDescription","Number","addDirectStreamingStatus","NativeStreamingAvailable","TranscodedStreamingAvailable","NativeStreamingSuggested","WrongID","ChallengesLimitReached","errorString","NotImplemented","NotFullyImplemented","BadCommandType","BadCommandKind","MissingInputParameter","WrongInputParameter","InvalidCredentials","IncorrectPublicKey","SurveillanceServerDown","InvalidLicense","SecurityError","UnknownCameraID","UnknownItemID","NoPresetsAvailable","NotAllowedInThisState","FeatureIsDisabled","TooManySessions","NewConfigurationNotAvailable","AddressesNotReachable","PlaybackStreamsLimitReached","Redirection","MovingInvestigations","NoRecordingsFound","NoRecordingsInInterval","SecondStepAuthenticationEnabledUsersOnly","SecondStepAuthenticationCodeExpired","InputParameterTooLong","UknownIdOrInsufficientRightForSomeItems","UknownIdOrInsufficientRightForAllItems","ItemNotPlayable","ChangePassword","AccountLockedOut","Unknown","IncorrectServerResponse","SdkNotConnected","HttpResponseError","HttpRequestError","CommandProcessingError","CommandTimedOut","InternalError","lastLiveMessageRequestTimestamp","command","ajaxRequestTimeout","finished","responseOffset","requestXML","paramsXML","createProperty","replaceAll","connectionURL","url","protocol","hostname","port","communicationChanel","stopRestaringCommands","initializeAjaxRequest","parseResponse","liveMessageMinimumInterval","xml","ConnectionResponse","isProcessing","abort","activeRequestCount","xmlString","isResponse","EMPTY_CAMERA_NAME","CommandNode","thumbnail","TypeNode","tmp","paramsNodes","paramValue","attr","CPU","DiskUsage","HDD","recording","recorded","exp","user","other","free","thumbnailJSON","parseExports","exportsNodes","exportNodes","attributesToObject","dates","parseSequences","rootNode","sequencesNodes","sequence","headerGroups","headerGroup","action","getAttribute","Name","parseItems","processItem","node","subNodes","childNodes","nodeName","itemData","safe","Items","ItemsNode","ResultNode","message","commandNameNode","logError","keys","attribute","symbols","RegExp","DOMParser","xmlStr","parseFromString","textContent","ActiveXObject","xmlDoc","async","loadXML","text","PullConnectionObserverInterface","onError","onHTTPError","notifyChannel","notifyObservers","videoConnectionTemporaryDown","restart","PullConnection","videoURL","frameRequestParams","notSarted","clearRequestTimeout","videoConnectionTimeout","notClosed","delay","currentData","VideoHeaderParser","duration","videoConnectionState","stream","timeBetweenFrames","frameInterval","requestNextFrameInterval","dataSize","signalType","live","number","requestNextFrame","lastFrame","ArrayBuffer","notWaiting","nextFrameTimeout","clearNextFrameTimeout","closed","arg","restartConnection","cleanupCommunication","startCommunication","videoConnectionChangedState","PushConnectionObserverInterface","PushConnection","socket","notOpened","socketFailedTimestamp","createSocket","videoStreamRestartMinimumInterval","socketRestartMinimumInterval","exception","binaryType","onerror","onopen","onOpen","onclose","socketReadyState","onmessage","messageInterval","clearInterval","event","onMessage","addEventListener","closing","native","transcoded","VideoConnectionObserverInterface","videoConnectionReceivedFrame","frame","videoConnectionFailed","videoConnectionRecovered","videoConnectionStreamingError","callbacks","lastData","isReusable","isPush","isDirectStreaming","supportsPTZ","PTZ","supportsPTZPresets","Preset","supportsPlayback","Playback","supportsExport","ExportAvi","channel","connected","channels","parseURL","videoChanel","getNext","hasNext","noVideoTimeout","resetNoVideoTimeout","Worker","supportsMultiThreaded","worker","postMessage","communication","stopNoVideoTimeout","NoVideoTimeout","ItemHeaderParser","NonFatal","Fatal","wasConnectionDown","cleanup","terminate","newState","CLOSED","resetCommunication","onAjaxComplete","onAjaxFailure","onAjaxLoading","VideoStreamState","new","constructor","videoConnectionElement","createElement","onReceivedFrame","onConnectionError","isClosed","detail","refresh","parser","bytesOffset","readBytesProcessor","readBytesReversedProcessor","arr","skipBytes","bytesToSkip","readBytes","bytesCount","readToStringBase","count","processor","map","processed","readToString","readAndReverseToString","getGUID","parseSizeInformation","sizeInfo","sourceSize","sourceCrop","destinationSize","resampling","parseLiveInformation","currentLiveEvents","changedLiveEvents","parsePlaybackInformation","currentPlaybackEvents","changedPlaybackEvents","parsePlaybackInfo","requestedTimeStampUtcMs","parseStreamInfo","headerSize","headerVesion","reserved","validFields","dataType","flipEndians","flags","profile","level","compatibility","constrains","frameCount","hasKeyFrame","StreamInfoFlags","HasKeyFrame","retrieveData","parseDynamicInformation","dataCount","DynamicInfoDataType","HeaderTypeDeviceStateInfo","parseDeviceStateInfo","tempErrorCode","tempGUID","errorCodes","Frame","Fragment","MainHeaderLength","SizeInfoHeaderLength","LiveInfoHeaderLength","PlaybackInfoHeaderLength","HeaderExtensionSize","HeaderExtensionLiveEvents","HeaderExtensionPlaybackEvents","HeaderExtensionNative","HeaderExtensionMotionEvents","HeaderExtensionLocationInfo","HeaderExtensionStreamInfo","HeaderExtensionCarouselInfo","HeaderExtensionDynamicInfo","HeaderExtensionPlaybackInfo","LiveFlags","LiveFeed","Motion","Recording","Notification","CameraConnectionLost","DatabaseFail","DiskFull","ClientLiveStopped","PlaybackFlags","Stopped","Forward","Backward","DatabaseStart","DatabaseEnd","DatabaseError","RangeNoData","OutOfRange","parseMotionInformation","motionHeaderSize","motionAmount","convertToImage","type","blob","Blob","parseCarouselInfo","carousel","uuid","frameNumber","MainHeader","hasSizeInformation","hasLiveInformation","hasPlaybackInformation","hasNativeData","hasMotionInformation","hasLocationData","hasStreamInfo","hasCarouselInfo","hasPlaybackInfo","AudioHeaderParser","mainHeader","Camera","videoConn","pendingCallbacks","containsCameraByVideoId","some","removeCamera","findIndex","getCameraByVideoId","find","VideoPushConnection","errorCallback","skipUserMedia","onStreamSuccess","onStreamError","isOpen","streamRequest","streamRequestCallback","base64EncodedImage","bytesArray","bufferView","counter","onAjaxSuccess","mediaStream","getTracks","track","stop","getMediaStream","videoPushConnection","userMediaStream","navigator","mediaDevices","getUserMedia","video","audio","then","catch","webkitGetUserMedia","mozGetUserMedia","AudioPushConnection","itemIds","sampleRate","streamRequestErrorCallback","pcmData","Int8Array","audioChannel","Transfer-Encoding","AudioAvailability","isOutgoingAudioNotSupported","SupportsAudioIn","SupportsOutgoingAudio","isOutgoingPTTAudioNotSupported","SupportsOutgoingPTTAudio","isLiveFeatureNotSupported","isPlaybackFeatureNotSupported","noAvailableMics","microphones","noAvailableSpeakers","speakers","_defineProperty"],"mappings":"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","file":"../tools/XPMobileSDK.library.js","sourcesContent":["var logger = {\r\n  info: function (...infoMessage) {\r\n    console && console.info(...infoMessage)\r\n  },\r\n  error: function (...errorMessage) {\r\n    console && console.error(...errorMessage)\r\n  },\r\n  warn: function (...warnMessage) {\r\n    console && console.warn(...warnMessage)\r\n  },\r\n  log: function (...logMessage) {\r\n    console && console.log(...logMessage)\r\n  },\r\n  init: function () {\r\n    if (!XPMobileSDKSettings.EnableConsoleLog) {\r\n      logger.log = function () { };\r\n      logger.info = function () { };\r\n      logger.error = function () { };\r\n      logger.warn = function () { };\r\n    } else if (XPMobileSDKSettings.EnableConsoleLog === \"error\") {\r\n      logger.log = function () { };\r\n      logger.info = function () { };\r\n      logger.warn = function () { };\r\n    } else if (XPMobileSDKSettings.EnableConsoleLog === \"warn\") {\r\n      logger.log = function () { };\r\n      logger.info = function () { };\r\n    }\r\n  }\r\n};\r\n\r\nlogger.init();\r\n","////////////////////////////////////////////////////////////////////////////////////////\n// Big Integer Library v. 5.4\n// Created 2000, last modified 2009\n// Leemon Baird\n// www.leemon.com\n//\n// Version history:\n// v 5.4  3 Oct 2009\n//   - added \"var i\" to greaterShift() so i is not global. (Thanks to P�ter Szab� for finding that bug)\n//\n// v 5.3  21 Sep 2009\n//   - added randProbPrime(k) for probable primes\n//   - unrolled loop in mont_ (slightly faster)\n//   - millerRabin now takes a bigInt parameter rather than an int\n//\n// v 5.2  15 Sep 2009\n//   - fixed capitalization in call to int2bigInt in randBigInt\n//     (thanks to Emili Evripidou, Reinhold Behringer, and Samuel Macaleese for finding that bug)\n//\n// v 5.1  8 Oct 2007 \n//   - renamed inverseModInt_ to inverseModInt since it doesn't change its parameters\n//   - added functions GCD and randBigInt, which call GCD_ and randBigInt_\n//   - fixed a bug found by Rob Visser (see comment with his name below)\n//   - improved comments\n//\n// This file is public domain.   You can use it for any purpose without restriction.\n// I do not guarantee that it is correct, so use it at your own risk.  If you use \n// it for something interesting, I'd appreciate hearing about it.  If you find \n// any bugs or make any improvements, I'd appreciate hearing about those too.\n// It would also be nice if my name and URL were left in the comments.  But none \n// of that is required.\n//\n// This code defines a bigInt library for arbitrary-precision integers.\n// A bigInt is an array of integers storing the value in chunks of bpe bits, \n// little endian (buff[0] is the least significant word).\n// Negative bigInts are stored two's complement.  Almost all the functions treat\n// bigInts as nonnegative.  The few that view them as two's complement say so\n// in their comments.  Some functions assume their parameters have at least one \n// leading zero element. Functions with an underscore at the end of the name put\n// their answer into one of the arrays passed in, and have unpredictable behavior \n// in case of overflow, so the caller must make sure the arrays are big enough to \n// hold the answer.  But the average user should never have to call any of the \n// underscored functions.  Each important underscored function has a wrapper function \n// of the same name without the underscore that takes care of the details for you.  \n// For each underscored function where a parameter is modified, that same variable \n// must not be used as another argument too.  So, you cannot square x by doing \n// multMod_(x,x,n).  You must use squareMod_(x,n) instead, or do y=dup(x); multMod_(x,y,n).\n// Or simply use the multMod(x,x,n) function without the underscore, where\n// such issues never arise, because non-underscored functions never change\n// their parameters; they always allocate new memory for the answer that is returned.\n//\n// These functions are designed to avoid frequent dynamic memory allocation in the inner loop.\n// For most functions, if it needs a BigInt as a local variable it will actually use\n// a global, and will only allocate to it only when it's not the right size.  This ensures\n// that when a function is called repeatedly with same-sized parameters, it only allocates\n// memory on the first call.\n//\n// Note that for cryptographic purposes, the calls to Math.random() must \n// be replaced with calls to a better pseudorandom number generator.\n//\n// In the following, \"bigInt\" means a bigInt with at least one leading zero element,\n// and \"integer\" means a nonnegative integer less than radix.  In some cases, integer \n// can be negative.  Negative bigInts are 2s complement.\n// \n// The following functions do not modify their inputs.\n// Those returning a bigInt, string, or Array will dynamically allocate memory for that value.\n// Those returning a boolean will return the integer 0 (false) or 1 (true).\n// Those returning boolean or int will not allocate memory except possibly on the first \n// time they're called with a given parameter size.\n// \n// bigInt  add(x,y)               //return (x+y) for bigInts x and y.  \n// bigInt  addInt(x,n)            //return (x+n) where x is a bigInt and n is an integer.\n// string  bigInt2str(x,base)     //return a string form of bigInt x in a given base, with 2 <= base <= 95\n// int     bitSize(x)             //return how many bits long the bigInt x is, not counting leading zeros\n// bigInt  dup(x)                 //return a copy of bigInt x\n// boolean equals(x,y)            //is the bigInt x equal to the bigint y?\n// boolean equalsInt(x,y)         //is bigint x equal to integer y?\n// bigInt  expand(x,n)            //return a copy of x with at least n elements, adding leading zeros if needed\n// Array   findPrimes(n)          //return array of all primes less than integer n\n// bigInt  GCD(x,y)               //return greatest common divisor of bigInts x and y (each with same number of elements).\n// boolean greater(x,y)           //is x>y?  (x and y are nonnegative bigInts)\n// boolean greaterShift(x,y,shift)//is (x <<(shift*bpe)) > y?\n// bigInt  int2bigInt(t,n,m)      //return a bigInt equal to integer t, with at least n bits and m array elements\n// bigInt  inverseMod(x,n)        //return (x**(-1) mod n) for bigInts x and n.  If no inverse exists, it returns null\n// int     inverseModInt(x,n)     //return x**(-1) mod n, for integers x and n.  Return 0 if there is no inverse\n// boolean isZero(x)              //is the bigInt x equal to zero?\n// boolean millerRabin(x,b)       //does one round of Miller-Rabin base integer b say that bigInt x is possibly prime? (b is bigInt, 1<b<x)\n// boolean millerRabinInt(x,b)    //does one round of Miller-Rabin base integer b say that bigInt x is possibly prime? (b is int,    1<b<x)\n// bigInt  mod(x,n)               //return a new bigInt equal to (x mod n) for bigInts x and n.\n// int     modInt(x,n)            //return x mod n for bigInt x and integer n.\n// bigInt  mult(x,y)              //return x*y for bigInts x and y. This is faster when y<x.\n// bigInt  multMod(x,y,n)         //return (x*y mod n) for bigInts x,y,n.  For greater speed, let y<x.\n// boolean negative(x)            //is bigInt x negative?\n// bigInt  powMod(x,y,n)          //return (x**y mod n) where x,y,n are bigInts and ** is exponentiation.  0**0=1. Faster for odd n.\n// bigInt  randBigInt(n,s)        //return an n-bit random BigInt (n>=1).  If s=1, then the most significant of those n bits is set to 1.\n// bigInt  randTruePrime(k)       //return a new, random, k-bit, true prime bigInt using Maurer's algorithm.\n// bigInt  randProbPrime(k)       //return a new, random, k-bit, probable prime bigInt (probability it's composite less than 2^-80).\n// bigInt  str2bigInt(s,b,n,m)    //return a bigInt for number represented in string s in base b with at least n bits and m array elements\n// bigInt  sub(x,y)               //return (x-y) for bigInts x and y.  Negative answers will be 2s complement\n// bigInt  trim(x,k)              //return a copy of x with exactly k leading zero elements\n//\n//\n// The following functions each have a non-underscored version, which most users should call instead.\n// These functions each write to a single parameter, and the caller is responsible for ensuring the array \n// passed in is large enough to hold the result. \n//\n// void    addInt_(x,n)          //do x=x+n where x is a bigInt and n is an integer\n// void    add_(x,y)             //do x=x+y for bigInts x and y\n// void    copy_(x,y)            //do x=y on bigInts x and y\n// void    copyInt_(x,n)         //do x=n on bigInt x and integer n\n// void    GCD_(x,y)             //set x to the greatest common divisor of bigInts x and y, (y is destroyed).  (This never overflows its array).\n// boolean inverseMod_(x,n)      //do x=x**(-1) mod n, for bigInts x and n. Returns 1 (0) if inverse does (doesn't) exist\n// void    mod_(x,n)             //do x=x mod n for bigInts x and n. (This never overflows its array).\n// void    mult_(x,y)            //do x=x*y for bigInts x and y.\n// void    multMod_(x,y,n)       //do x=x*y  mod n for bigInts x,y,n.\n// void    powMod_(x,y,n)        //do x=x**y mod n, where x,y,n are bigInts (n is odd) and ** is exponentiation.  0**0=1.\n// void    randBigInt_(b,n,s)    //do b = an n-bit random BigInt. if s=1, then nth bit (most significant bit) is set to 1. n>=1.\n// void    randTruePrime_(ans,k) //do ans = a random k-bit true random prime (not just probable prime) with 1 in the msb.\n// void    sub_(x,y)             //do x=x-y for bigInts x and y. Negative answers will be 2s complement.\n//\n// The following functions do NOT have a non-underscored version. \n// They each write a bigInt result to one or more parameters.  The caller is responsible for\n// ensuring the arrays passed in are large enough to hold the results. \n//\n// void addShift_(x,y,ys)       //do x=x+(y<<(ys*bpe))\n// void carry_(x)               //do carries and borrows so each element of the bigInt x fits in bpe bits.\n// void divide_(x,y,q,r)        //divide x by y giving quotient q and remainder r\n// int  divInt_(x,n)            //do x=floor(x/n) for bigInt x and integer n, and return the remainder. (This never overflows its array).\n// int  eGCD_(x,y,d,a,b)        //sets a,b,d to positive bigInts such that d = GCD_(x,y) = a*x-b*y\n// void halve_(x)               //do x=floor(|x|/2)*sgn(x) for bigInt x in 2's complement.  (This never overflows its array).\n// void leftShift_(x,n)         //left shift bigInt x by n bits.  n<bpe.\n// void linComb_(x,y,a,b)       //do x=a*x+b*y for bigInts x and y and integers a and b\n// void linCombShift_(x,y,b,ys) //do x=x+b*(y<<(ys*bpe)) for bigInts x and y, and integers b and ys\n// void mont_(x,y,n,np)         //Montgomery multiplication (see comments where the function is defined)\n// void multInt_(x,n)           //do x=x*n where x is a bigInt and n is an integer.\n// void rightShift_(x,n)        //right shift bigInt x by n bits.  0 <= n < bpe. (This never overflows its array).\n// void squareMod_(x,n)         //do x=x*x  mod n for bigInts x,n\n// void subShift_(x,y,ys)       //do x=x-(y<<(ys*bpe)). Negative answers will be 2s complement.\n//\n// The following functions are based on algorithms from the _Handbook of Applied Cryptography_\n//    powMod_()           = algorithm 14.94, Montgomery exponentiation\n//    eGCD_,inverseMod_() = algorithm 14.61, Binary extended GCD_\n//    GCD_()              = algorothm 14.57, Lehmer's algorithm\n//    mont_()             = algorithm 14.36, Montgomery multiplication\n//    divide_()           = algorithm 14.20  Multiple-precision division\n//    squareMod_()        = algorithm 14.16  Multiple-precision squaring\n//    randTruePrime_()    = algorithm  4.62, Maurer's algorithm\n//    millerRabin()       = algorithm  4.24, Miller-Rabin algorithm\n//\n// Profiling shows:\n//     randTruePrime_() spends:\n//         10% of its time in calls to powMod_()\n//         85% of its time in calls to millerRabin()\n//     millerRabin() spends:\n//         99% of its time in calls to powMod_()   (always with a base of 2)\n//     powMod_() spends:\n//         94% of its time in calls to mont_()  (almost always with x==y)\n//\n// This suggests there are several ways to speed up this library slightly:\n//     - convert powMod_ to use a Montgomery form of k-ary window (or maybe a Montgomery form of sliding window)\n//         -- this should especially focus on being fast when raising 2 to a power mod n\n//     - convert randTruePrime_() to use a minimum r of 1/3 instead of 1/2 with the appropriate change to the test\n//     - tune the parameters in randTruePrime_(), including c, m, and recLimit\n//     - speed up the single loop in mont_() that takes 95% of the runtime, perhaps by reducing checking\n//       within the loop when all the parameters are the same length.\n//\n// There are several ideas that look like they wouldn't help much at all:\n//     - replacing trial division in randTruePrime_() with a sieve (that speeds up something taking almost no time anyway)\n//     - increase bpe from 15 to 30 (that would help if we had a 32*32->64 multiplier, but not with JavaScript's 32*32->32)\n//     - speeding up mont_(x,y,n,np) when x==y by doing a non-modular, non-Montgomery square\n//       followed by a Montgomery reduction.  The intermediate answer will be twice as long as x, so that\n//       method would be slower.  This is unfortunate because the code currently spends almost all of its time\n//       doing mont_(x,x,...), both for randTruePrime_() and powMod_().  A faster method for Montgomery squaring\n//       would have a large impact on the speed of randTruePrime_() and powMod_().  HAC has a couple of poorly-worded\n//       sentences that seem to imply it's faster to do a non-modular square followed by a single\n//       Montgomery reduction, but that's obviously wrong.\n////////////////////////////////////////////////////////////////////////////////////////\n\n//globals\nbpe=0;         //bits stored per array element\nmask=0;        //AND this with an array element to chop it down to bpe bits\nradix=mask+1;  //equals 2^bpe.  A single 1 bit to the left of the last bit of mask.\n\n//the digits for converting to different bases\ndigitsStr='0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz_=!@#$%^&*()[]{}|;:,.<>/?`~ \\\\\\'\\\"+-';\n\n//initialize the global variables\nfor (bpe=0; (1<<(bpe+1)) > (1<<bpe); bpe++);  //bpe=number of bits in the mantissa on this platform\nbpe>>=1;                   //bpe=number of bits in one element of the array representing the bigInt\nmask=(1<<bpe)-1;           //AND the mask with an integer to get its bpe least significant bits\nradix=mask+1;              //2^bpe.  a single 1 bit to the left of the first bit of mask\none=int2bigInt(1,1,1);     //constant used in powMod_()\n\n//the following global variables are scratchpad memory to \n//reduce dynamic memory allocation in the inner loop\nt=new Array(0);\nss=t;       //used in mult_()\ns0=t;       //used in multMod_(), squareMod_() \ns1=t;       //used in powMod_(), multMod_(), squareMod_() \ns2=t;       //used in powMod_(), multMod_()\ns3=t;       //used in powMod_()\ns4=t; s5=t; //used in mod_()\ns6=t;       //used in bigInt2str()\ns7=t;       //used in powMod_()\nT=t;        //used in GCD_()\nsa=t;       //used in mont_()\nmr_x1=t; mr_r=t; mr_a=t;                                      //used in millerRabin()\neg_v=t; eg_u=t; eg_A=t; eg_B=t; eg_C=t; eg_D=t;               //used in eGCD_(), inverseMod_()\nmd_q1=t; md_q2=t; md_q3=t; md_r=t; md_r1=t; md_r2=t; md_tt=t; //used in mod_()\n\nprimes=t; pows=t; s_i=t; s_i2=t; s_R=t; s_rm=t; s_q=t; s_n1=t; \n  s_a=t; s_r2=t; s_n=t; s_b=t; s_d=t; s_x1=t; s_x2=t, s_aa=t; //used in randTruePrime_()\n  \nrpprb=t; //used in randProbPrimeRounds() (which also uses \"primes\")\n\n////////////////////////////////////////////////////////////////////////////////////////\n\n\n//return array of all primes less than integer n\nfunction findPrimes(n) {\n  var i,s,p,ans;\n  s=new Array(n);\n  for (i=0;i<n;i++)\n    s[i]=0;\n  s[0]=2;\n  p=0;    //first p elements of s are primes, the rest are a sieve\n  for(;s[p]<n;) {                  //s[p] is the pth prime\n    for(i=s[p]*s[p]; i<n; i+=s[p]) //mark multiples of s[p]\n      s[i]=1;\n    p++;\n    s[p]=s[p-1]+1;\n    for(; s[p]<n && s[s[p]]; s[p]++); //find next prime (where s[p]==0)\n  }\n  ans=new Array(p);\n  for(i=0;i<p;i++)\n    ans[i]=s[i];\n  return ans;\n}\n\n\n//does a single round of Miller-Rabin base b consider x to be a possible prime?\n//x is a bigInt, and b is an integer, with b<x\nfunction millerRabinInt(x,b) {\n  if (mr_x1.length!=x.length) {\n    mr_x1=dup(x);\n    mr_r=dup(x);\n    mr_a=dup(x);\n  }\n\n  copyInt_(mr_a,b);\n  return millerRabin(x,mr_a);\n}\n\n//does a single round of Miller-Rabin base b consider x to be a possible prime?\n//x and b are bigInts with b<x\nfunction millerRabin(x,b) {\n  var i,j,k,s;\n\n  if (mr_x1.length!=x.length) {\n    mr_x1=dup(x);\n    mr_r=dup(x);\n    mr_a=dup(x);\n  }\n\n  copy_(mr_a,b);\n  copy_(mr_r,x);\n  copy_(mr_x1,x);\n\n  addInt_(mr_r,-1);\n  addInt_(mr_x1,-1);\n\n  //s=the highest power of two that divides mr_r\n  k=0;\n  for (i=0;i<mr_r.length;i++)\n    for (j=1;j<mask;j<<=1)\n      if (x[i] & j) {\n        s=(k<mr_r.length+bpe ? k : 0); \n         i=mr_r.length;\n         j=mask;\n      } else\n        k++;\n\n  if (s)                \n    rightShift_(mr_r,s);\n\n  powMod_(mr_a,mr_r,x);\n\n  if (!equalsInt(mr_a,1) && !equals(mr_a,mr_x1)) {\n    j=1;\n    while (j<=s-1 && !equals(mr_a,mr_x1)) {\n      squareMod_(mr_a,x);\n      if (equalsInt(mr_a,1)) {\n        return 0;\n      }\n      j++;\n    }\n    if (!equals(mr_a,mr_x1)) {\n      return 0;\n    }\n  }\n  return 1;  \n}\n\n//returns how many bits long the bigInt is, not counting leading zeros.\nfunction bitSize(x) {\n  var j,z,w;\n  for (j=x.length-1; (x[j]==0) && (j>0); j--);\n  for (z=0,w=x[j]; w; (w>>=1),z++);\n  z+=bpe*j;\n  return z;\n}\n\n//return a copy of x with at least n elements, adding leading zeros if needed\nfunction expand(x,n) {\n  var ans=int2bigInt(0,(x.length>n ? x.length : n)*bpe,0);\n  copy_(ans,x);\n  return ans;\n}\n\n//return a k-bit true random prime using Maurer's algorithm.\nfunction randTruePrime(k) {\n  var ans=int2bigInt(0,k,0);\n  randTruePrime_(ans,k);\n  return trim(ans,1);\n}\n\n//return a k-bit random probable prime with probability of error < 2^-80\nfunction randProbPrime(k) {\n  if (k>=600) return randProbPrimeRounds(k,2); //numbers from HAC table 4.3\n  if (k>=550) return randProbPrimeRounds(k,4);\n  if (k>=500) return randProbPrimeRounds(k,5);\n  if (k>=400) return randProbPrimeRounds(k,6);\n  if (k>=350) return randProbPrimeRounds(k,7);\n  if (k>=300) return randProbPrimeRounds(k,9);\n  if (k>=250) return randProbPrimeRounds(k,12); //numbers from HAC table 4.4\n  if (k>=200) return randProbPrimeRounds(k,15);\n  if (k>=150) return randProbPrimeRounds(k,18);\n  if (k>=100) return randProbPrimeRounds(k,27);\n              return randProbPrimeRounds(k,40); //number from HAC remark 4.26 (only an estimate)\n}\n\n//return a k-bit probable random prime using n rounds of Miller Rabin (after trial division with small primes)\t\nfunction randProbPrimeRounds(k,n) {\n  var ans, i, divisible, B; \n  B=30000;  //B is largest prime to use in trial division\n  ans=int2bigInt(0,k,0);\n  \n  //optimization: try larger and smaller B to find the best limit.\n  \n  if (primes.length==0)\n    primes=findPrimes(30000);  //check for divisibility by primes <=30000\n\n  if (rpprb.length!=ans.length)\n    rpprb=dup(ans);\n\n  for (;;) { //keep trying random values for ans until one appears to be prime\n    //optimization: pick a random number times L=2*3*5*...*p, plus a \n    //   random element of the list of all numbers in [0,L) not divisible by any prime up to p.\n    //   This can reduce the amount of random number generation.\n    \n    randBigInt_(ans,k,0); //ans = a random odd number to check\n    ans[0] |= 1; \n    divisible=0;\n  \n    //check ans for divisibility by small primes up to B\n    for (i=0; (i<primes.length) && (primes[i]<=B); i++)\n      if (modInt(ans,primes[i])==0 && !equalsInt(ans,primes[i])) {\n        divisible=1;\n        break;\n      }      \n    \n    //optimization: change millerRabin so the base can be bigger than the number being checked, then eliminate the while here.\n    \n    //do n rounds of Miller Rabin, with random bases less than ans\n    for (i=0; i<n && !divisible; i++) {\n      randBigInt_(rpprb,k,0);\n      while(!greater(ans,rpprb)) //pick a random rpprb that's < ans\n        randBigInt_(rpprb,k,0);\n      if (!millerRabin(ans,rpprb))\n        divisible=1;\n    }\n    \n    if(!divisible)\n      return ans;\n  }  \n}\n\n//return a new bigInt equal to (x mod n) for bigInts x and n.\nfunction mod(x,n) {\n  var ans=dup(x);\n  mod_(ans,n);\n  return trim(ans,1);\n}\n\n//return (x+n) where x is a bigInt and n is an integer.\nfunction addInt(x,n) {\n  var ans=expand(x,x.length+1);\n  addInt_(ans,n);\n  return trim(ans,1);\n}\n\n//return x*y for bigInts x and y. This is faster when y<x.\nfunction mult(x,y) {\n  var ans=expand(x,x.length+y.length);\n  mult_(ans,y);\n  return trim(ans,1);\n}\n\n//return (x**y mod n) where x,y,n are bigInts and ** is exponentiation.  0**0=1. Faster for odd n.\nfunction powMod(x,y,n) {\n  var ans=expand(x,n.length);  \n  powMod_(ans,trim(y,2),trim(n,2),0);  //this should work without the trim, but doesn't\n  return trim(ans,1);\n}\n\n//return (x-y) for bigInts x and y.  Negative answers will be 2s complement\nfunction sub(x,y) {\n  var ans=expand(x,(x.length>y.length ? x.length+1 : y.length+1)); \n  sub_(ans,y);\n  return trim(ans,1);\n}\n\n//return (x+y) for bigInts x and y.  \nfunction add(x,y) {\n  var ans=expand(x,(x.length>y.length ? x.length+1 : y.length+1)); \n  add_(ans,y);\n  return trim(ans,1);\n}\n\n//return (x**(-1) mod n) for bigInts x and n.  If no inverse exists, it returns null\nfunction inverseMod(x,n) {\n  var ans=expand(x,n.length); \n  var s;\n  s=inverseMod_(ans,n);\n  return s ? trim(ans,1) : null;\n}\n\n//return (x*y mod n) for bigInts x,y,n.  For greater speed, let y<x.\nfunction multMod(x,y,n) {\n  var ans=expand(x,n.length);\n  multMod_(ans,y,n);\n  return trim(ans,1);\n}\n\n//generate a k-bit true random prime using Maurer's algorithm,\n//and put it into ans.  The bigInt ans must be large enough to hold it.\nfunction randTruePrime_(ans,k) {\n  var c,m,pm,dd,j,r,B,divisible,z,zz,recSize;\n\n  if (primes.length==0)\n    primes=findPrimes(30000);  //check for divisibility by primes <=30000\n\n  if (pows.length==0) {\n    pows=new Array(512);\n    for (j=0;j<512;j++) {\n      pows[j]=Math.pow(2,j/511.-1.);\n    }\n  }\n\n  //c and m should be tuned for a particular machine and value of k, to maximize speed\n  c=0.1;  //c=0.1 in HAC\n  m=20;   //generate this k-bit number by first recursively generating a number that has between k/2 and k-m bits\n  recLimit=20; //stop recursion when k <=recLimit.  Must have recLimit >= 2\n\n  if (s_i2.length!=ans.length) {\n    s_i2=dup(ans);\n    s_R =dup(ans);\n    s_n1=dup(ans);\n    s_r2=dup(ans);\n    s_d =dup(ans);\n    s_x1=dup(ans);\n    s_x2=dup(ans);\n    s_b =dup(ans);\n    s_n =dup(ans);\n    s_i =dup(ans);\n    s_rm=dup(ans);\n    s_q =dup(ans);\n    s_a =dup(ans);\n    s_aa=dup(ans);\n  }\n\n  if (k <= recLimit) {  //generate small random primes by trial division up to its square root\n    pm=(1<<((k+2)>>1))-1; //pm is binary number with all ones, just over sqrt(2^k)\n    copyInt_(ans,0);\n    for (dd=1;dd;) {\n      dd=0;\n      ans[0]= 1 | (1<<(k-1)) | Math.floor(Math.random()*(1<<k));  //random, k-bit, odd integer, with msb 1\n      for (j=1;(j<primes.length) && ((primes[j]&pm)==primes[j]);j++) { //trial division by all primes 3...sqrt(2^k)\n        if (0==(ans[0]%primes[j])) {\n          dd=1;\n          break;\n        }\n      }\n    }\n    carry_(ans);\n    return;\n  }\n\n  B=c*k*k;    //try small primes up to B (or all the primes[] array if the largest is less than B).\n  if (k>2*m)  //generate this k-bit number by first recursively generating a number that has between k/2 and k-m bits\n    for (r=1; k-k*r<=m; )\n      r=pows[Math.floor(Math.random()*512)];   //r=Math.pow(2,Math.random()-1);\n  else\n    r=.5;\n\n  //simulation suggests the more complex algorithm using r=.333 is only slightly faster.\n\n  recSize=Math.floor(r*k)+1;\n\n  randTruePrime_(s_q,recSize);\n  copyInt_(s_i2,0);\n  s_i2[Math.floor((k-2)/bpe)] |= (1<<((k-2)%bpe));   //s_i2=2^(k-2)\n  divide_(s_i2,s_q,s_i,s_rm);                        //s_i=floor((2^(k-1))/(2q))\n\n  z=bitSize(s_i);\n\n  for (;;) {\n    for (;;) {  //generate z-bit numbers until one falls in the range [0,s_i-1]\n      randBigInt_(s_R,z,0);\n      if (greater(s_i,s_R))\n        break;\n    }                //now s_R is in the range [0,s_i-1]\n    addInt_(s_R,1);  //now s_R is in the range [1,s_i]\n    add_(s_R,s_i);   //now s_R is in the range [s_i+1,2*s_i]\n\n    copy_(s_n,s_q);\n    mult_(s_n,s_R); \n    multInt_(s_n,2);\n    addInt_(s_n,1);    //s_n=2*s_R*s_q+1\n    \n    copy_(s_r2,s_R);\n    multInt_(s_r2,2);  //s_r2=2*s_R\n\n    //check s_n for divisibility by small primes up to B\n    for (divisible=0,j=0; (j<primes.length) && (primes[j]<B); j++)\n      if (modInt(s_n,primes[j])==0 && !equalsInt(s_n,primes[j])) {\n        divisible=1;\n        break;\n      }      \n\n    if (!divisible)    //if it passes small primes check, then try a single Miller-Rabin base 2\n      if (!millerRabinInt(s_n,2)) //this line represents 75% of the total runtime for randTruePrime_ \n        divisible=1;\n\n    if (!divisible) {  //if it passes that test, continue checking s_n\n      addInt_(s_n,-3);\n      for (j=s_n.length-1;(s_n[j]==0) && (j>0); j--);  //strip leading zeros\n      for (zz=0,w=s_n[j]; w; (w>>=1),zz++);\n      zz+=bpe*j;                             //zz=number of bits in s_n, ignoring leading zeros\n      for (;;) {  //generate z-bit numbers until one falls in the range [0,s_n-1]\n        randBigInt_(s_a,zz,0);\n        if (greater(s_n,s_a))\n          break;\n      }                //now s_a is in the range [0,s_n-1]\n      addInt_(s_n,3);  //now s_a is in the range [0,s_n-4]\n      addInt_(s_a,2);  //now s_a is in the range [2,s_n-2]\n      copy_(s_b,s_a);\n      copy_(s_n1,s_n);\n      addInt_(s_n1,-1);\n      powMod_(s_b,s_n1,s_n);   //s_b=s_a^(s_n-1) modulo s_n\n      addInt_(s_b,-1);\n      if (isZero(s_b)) {\n        copy_(s_b,s_a);\n        powMod_(s_b,s_r2,s_n);\n        addInt_(s_b,-1);\n        copy_(s_aa,s_n);\n        copy_(s_d,s_b);\n        GCD_(s_d,s_n);  //if s_b and s_n are relatively prime, then s_n is a prime\n        if (equalsInt(s_d,1)) {\n          copy_(ans,s_aa);\n          return;     //if we've made it this far, then s_n is absolutely guaranteed to be prime\n        }\n      }\n    }\n  }\n}\n\n//Return an n-bit random BigInt (n>=1).  If s=1, then the most significant of those n bits is set to 1.\nfunction randBigInt(n,s) {\n  var a,b;\n  a=Math.floor((n-1)/bpe)+2; //# array elements to hold the BigInt with a leading 0 element\n  b=int2bigInt(0,0,a);\n  randBigInt_(b,n,s);\n  return b;\n}\n\n//Set b to an n-bit random BigInt.  If s=1, then the most significant of those n bits is set to 1.\n//Array b must be big enough to hold the result. Must have n>=1\nfunction randBigInt_(b,n,s) {\n  var i,a;\n  for (i=0;i<b.length;i++)\n    b[i]=0;\n  a=Math.floor((n-1)/bpe)+1; //# array elements to hold the BigInt\n  for (i=0;i<a;i++) {\n    b[i]=Math.floor(Math.random()*(1<<(bpe-1)));\n  }\n  b[a-1] &= (2<<((n-1)%bpe))-1;\n  if (s==1)\n    b[a-1] |= (1<<((n-1)%bpe));\n}\n\n//Return the greatest common divisor of bigInts x and y (each with same number of elements).\nfunction GCD(x,y) {\n  var xc,yc;\n  xc=dup(x);\n  yc=dup(y);\n  GCD_(xc,yc);\n  return xc;\n}\n\n//set x to the greatest common divisor of bigInts x and y (each with same number of elements).\n//y is destroyed.\nfunction GCD_(x,y) {\n  var i,xp,yp,A,B,C,D,q,sing;\n  if (T.length!=x.length)\n    T=dup(x);\n\n  sing=1;\n  while (sing) { //while y has nonzero elements other than y[0]\n    sing=0;\n    for (i=1;i<y.length;i++) //check if y has nonzero elements other than 0\n      if (y[i]) {\n        sing=1;\n        break;\n      }\n    if (!sing) break; //quit when y all zero elements except possibly y[0]\n\n    for (i=x.length;!x[i] && i>=0;i--);  //find most significant element of x\n    xp=x[i];\n    yp=y[i];\n    A=1; B=0; C=0; D=1;\n    while ((yp+C) && (yp+D)) {\n      q =Math.floor((xp+A)/(yp+C));\n      qp=Math.floor((xp+B)/(yp+D));\n      if (q!=qp)\n        break;\n      t= A-q*C;   A=C;   C=t;    //  do (A,B,xp, C,D,yp) = (C,D,yp, A,B,xp) - q*(0,0,0, C,D,yp)      \n      t= B-q*D;   B=D;   D=t;\n      t=xp-q*yp; xp=yp; yp=t;\n    }\n    if (B) {\n      copy_(T,x);\n      linComb_(x,y,A,B); //x=A*x+B*y\n      linComb_(y,T,D,C); //y=D*y+C*T\n    } else {\n      mod_(x,y);\n      copy_(T,x);\n      copy_(x,y);\n      copy_(y,T);\n    } \n  }\n  if (y[0]==0)\n    return;\n  t=modInt(x,y[0]);\n  copyInt_(x,y[0]);\n  y[0]=t;\n  while (y[0]) {\n    x[0]%=y[0];\n    t=x[0]; x[0]=y[0]; y[0]=t;\n  }\n}\n\n//do x=x**(-1) mod n, for bigInts x and n.\n//If no inverse exists, it sets x to zero and returns 0, else it returns 1.\n//The x array must be at least as large as the n array.\nfunction inverseMod_(x,n) {\n  var k=1+2*Math.max(x.length,n.length);\n\n  if(!(x[0]&1)  && !(n[0]&1)) {  //if both inputs are even, then inverse doesn't exist\n    copyInt_(x,0);\n    return 0;\n  }\n\n  if (eg_u.length!=k) {\n    eg_u=new Array(k);\n    eg_v=new Array(k);\n    eg_A=new Array(k);\n    eg_B=new Array(k);\n    eg_C=new Array(k);\n    eg_D=new Array(k);\n  }\n\n  copy_(eg_u,x);\n  copy_(eg_v,n);\n  copyInt_(eg_A,1);\n  copyInt_(eg_B,0);\n  copyInt_(eg_C,0);\n  copyInt_(eg_D,1);\n  for (;;) {\n    while(!(eg_u[0]&1)) {  //while eg_u is even\n      halve_(eg_u);\n      if (!(eg_A[0]&1) && !(eg_B[0]&1)) { //if eg_A==eg_B==0 mod 2\n        halve_(eg_A);\n        halve_(eg_B);      \n      } else {\n        add_(eg_A,n);  halve_(eg_A);\n        sub_(eg_B,x);  halve_(eg_B);\n      }\n    }\n\n    while (!(eg_v[0]&1)) {  //while eg_v is even\n      halve_(eg_v);\n      if (!(eg_C[0]&1) && !(eg_D[0]&1)) { //if eg_C==eg_D==0 mod 2\n        halve_(eg_C);\n        halve_(eg_D);      \n      } else {\n        add_(eg_C,n);  halve_(eg_C);\n        sub_(eg_D,x);  halve_(eg_D);\n      }\n    }\n\n    if (!greater(eg_v,eg_u)) { //eg_v <= eg_u\n      sub_(eg_u,eg_v);\n      sub_(eg_A,eg_C);\n      sub_(eg_B,eg_D);\n    } else {                   //eg_v > eg_u\n      sub_(eg_v,eg_u);\n      sub_(eg_C,eg_A);\n      sub_(eg_D,eg_B);\n    }\n  \n    if (equalsInt(eg_u,0)) {\n      if (negative(eg_C)) //make sure answer is nonnegative\n        add_(eg_C,n);\n      copy_(x,eg_C);\n\n      if (!equalsInt(eg_v,1)) { //if GCD_(x,n)!=1, then there is no inverse\n        copyInt_(x,0);\n        return 0;\n      }\n      return 1;\n    }\n  }\n}\n\n//return x**(-1) mod n, for integers x and n.  Return 0 if there is no inverse\nfunction inverseModInt(x,n) {\n  var a=1,b=0,t;\n  for (;;) {\n    if (x==1) return a;\n    if (x==0) return 0;\n    b-=a*Math.floor(n/x);\n    n%=x;\n\n    if (n==1) return b; //to avoid negatives, change this b to n-b, and each -= to +=\n    if (n==0) return 0;\n    a-=b*Math.floor(x/n);\n    x%=n;\n  }\n}\n\n//this deprecated function is for backward compatibility only. \nfunction inverseModInt_(x,n) {\n   return inverseModInt(x,n);\n}\n\n\n//Given positive bigInts x and y, change the bigints v, a, and b to positive bigInts such that:\n//     v = GCD_(x,y) = a*x-b*y\n//The bigInts v, a, b, must have exactly as many elements as the larger of x and y.\nfunction eGCD_(x,y,v,a,b) {\n  var g=0;\n  var k=Math.max(x.length,y.length);\n  if (eg_u.length!=k) {\n    eg_u=new Array(k);\n    eg_A=new Array(k);\n    eg_B=new Array(k);\n    eg_C=new Array(k);\n    eg_D=new Array(k);\n  }\n  while(!(x[0]&1)  && !(y[0]&1)) {  //while x and y both even\n    halve_(x);\n    halve_(y);\n    g++;\n  }\n  copy_(eg_u,x);\n  copy_(v,y);\n  copyInt_(eg_A,1);\n  copyInt_(eg_B,0);\n  copyInt_(eg_C,0);\n  copyInt_(eg_D,1);\n  for (;;) {\n    while(!(eg_u[0]&1)) {  //while u is even\n      halve_(eg_u);\n      if (!(eg_A[0]&1) && !(eg_B[0]&1)) { //if A==B==0 mod 2\n        halve_(eg_A);\n        halve_(eg_B);      \n      } else {\n        add_(eg_A,y);  halve_(eg_A);\n        sub_(eg_B,x);  halve_(eg_B);\n      }\n    }\n\n    while (!(v[0]&1)) {  //while v is even\n      halve_(v);\n      if (!(eg_C[0]&1) && !(eg_D[0]&1)) { //if C==D==0 mod 2\n        halve_(eg_C);\n        halve_(eg_D);      \n      } else {\n        add_(eg_C,y);  halve_(eg_C);\n        sub_(eg_D,x);  halve_(eg_D);\n      }\n    }\n\n    if (!greater(v,eg_u)) { //v<=u\n      sub_(eg_u,v);\n      sub_(eg_A,eg_C);\n      sub_(eg_B,eg_D);\n    } else {                //v>u\n      sub_(v,eg_u);\n      sub_(eg_C,eg_A);\n      sub_(eg_D,eg_B);\n    }\n    if (equalsInt(eg_u,0)) {\n      if (negative(eg_C)) {   //make sure a (C)is nonnegative\n        add_(eg_C,y);\n        sub_(eg_D,x);\n      }\n      multInt_(eg_D,-1);  ///make sure b (D) is nonnegative\n      copy_(a,eg_C);\n      copy_(b,eg_D);\n      leftShift_(v,g);\n      return;\n    }\n  }\n}\n\n\n//is bigInt x negative?\nfunction negative(x) {\n  return ((x[x.length-1]>>(bpe-1))&1);\n}\n\n\n//is (x << (shift*bpe)) > y?\n//x and y are nonnegative bigInts\n//shift is a nonnegative integer\nfunction greaterShift(x,y,shift) {\n  var i, kx=x.length, ky=y.length;\n  k=((kx+shift)<ky) ? (kx+shift) : ky;\n  for (i=ky-1-shift; i<kx && i>=0; i++) \n    if (x[i]>0)\n      return 1; //if there are nonzeros in x to the left of the first column of y, then x is bigger\n  for (i=kx-1+shift; i<ky; i++)\n    if (y[i]>0)\n      return 0; //if there are nonzeros in y to the left of the first column of x, then x is not bigger\n  for (i=k-1; i>=shift; i--)\n    if      (x[i-shift]>y[i]) return 1;\n    else if (x[i-shift]<y[i]) return 0;\n  return 0;\n}\n\n//is x > y? (x and y both nonnegative)\nfunction greater(x,y) {\n  var i;\n  var k=(x.length<y.length) ? x.length : y.length;\n\n  for (i=x.length;i<y.length;i++)\n    if (y[i])\n      return 0;  //y has more digits\n\n  for (i=y.length;i<x.length;i++)\n    if (x[i])\n      return 1;  //x has more digits\n\n  for (i=k-1;i>=0;i--)\n    if (x[i]>y[i])\n      return 1;\n    else if (x[i]<y[i])\n      return 0;\n  return 0;\n}\n\n//divide x by y giving quotient q and remainder r.  (q=floor(x/y),  r=x mod y).  All 4 are bigints.\n//x must have at least one leading zero element.\n//y must be nonzero.\n//q and r must be arrays that are exactly the same length as x. (Or q can have more).\n//Must have x.length >= y.length >= 2.\nfunction divide_(x,y,q,r) {\n  var kx, ky;\n  var i,j,y1,y2,c,a,b;\n  copy_(r,x);\n  for (ky=y.length;y[ky-1]==0;ky--); //ky is number of elements in y, not including leading zeros\n\n  //normalize: ensure the most significant element of y has its highest bit set  \n  b=y[ky-1];\n  for (a=0; b; a++)\n    b>>=1;  \n  a=bpe-a;  //a is how many bits to shift so that the high order bit of y is leftmost in its array element\n  leftShift_(y,a);  //multiply both by 1<<a now, then divide both by that at the end\n  leftShift_(r,a);\n\n  //Rob Visser discovered a bug: the following line was originally just before the normalization.\n  for (kx=r.length;r[kx-1]==0 && kx>ky;kx--); //kx is number of elements in normalized x, not including leading zeros\n\n  copyInt_(q,0);                      // q=0\n  while (!greaterShift(y,r,kx-ky)) {  // while (leftShift_(y,kx-ky) <= r) {\n    subShift_(r,y,kx-ky);             //   r=r-leftShift_(y,kx-ky)\n    q[kx-ky]++;                       //   q[kx-ky]++;\n  }                                   // }\n\n  for (i=kx-1; i>=ky; i--) {\n    if (r[i]==y[ky-1])\n      q[i-ky]=mask;\n    else\n      q[i-ky]=Math.floor((r[i]*radix+r[i-1])/y[ky-1]);\t\n\n    //The following for(;;) loop is equivalent to the commented while loop, \n    //except that the uncommented version avoids overflow.\n    //The commented loop comes from HAC, which assumes r[-1]==y[-1]==0\n    //  while (q[i-ky]*(y[ky-1]*radix+y[ky-2]) > r[i]*radix*radix+r[i-1]*radix+r[i-2])\n    //    q[i-ky]--;    \n    for (;;) {\n      y2=(ky>1 ? y[ky-2] : 0)*q[i-ky];\n      c=y2>>bpe;\n      y2=y2 & mask;\n      y1=c+q[i-ky]*y[ky-1];\n      c=y1>>bpe;\n      y1=y1 & mask;\n\n      if (c==r[i] ? y1==r[i-1] ? y2>(i>1 ? r[i-2] : 0) : y1>r[i-1] : c>r[i]) \n        q[i-ky]--;\n      else\n        break;\n    }\n\n    linCombShift_(r,y,-q[i-ky],i-ky);    //r=r-q[i-ky]*leftShift_(y,i-ky)\n    if (negative(r)) {\n      addShift_(r,y,i-ky);         //r=r+leftShift_(y,i-ky)\n      q[i-ky]--;\n    }\n  }\n\n  rightShift_(y,a);  //undo the normalization step\n  rightShift_(r,a);  //undo the normalization step\n}\n\n//do carries and borrows so each element of the bigInt x fits in bpe bits.\nfunction carry_(x) {\n  var i,k,c,b;\n  k=x.length;\n  c=0;\n  for (i=0;i<k;i++) {\n    c+=x[i];\n    b=0;\n    if (c<0) {\n      b=-(c>>bpe);\n      c+=b*radix;\n    }\n    x[i]=c & mask;\n    c=(c>>bpe)-b;\n  }\n}\n\n//return x mod n for bigInt x and integer n.\nfunction modInt(x,n) {\n  var i,c=0;\n  for (i=x.length-1; i>=0; i--)\n    c=(c*radix+x[i])%n;\n  return c;\n}\n\n//convert the integer t into a bigInt with at least the given number of bits.\n//the returned array stores the bigInt in bpe-bit chunks, little endian (buff[0] is least significant word)\n//Pad the array with leading zeros so that it has at least minSize elements.\n//There will always be at least one leading 0 element.\nfunction int2bigInt(t,bits,minSize) {   \n  var i,k;\n  k=Math.ceil(bits/bpe)+1;\n  k=minSize>k ? minSize : k;\n  buff=new Array(k);\n  copyInt_(buff,t);\n  return buff;\n}\n\n//return the bigInt given a string representation in a given base.  \n//Pad the array with leading zeros so that it has at least minSize elements.\n//If base=-1, then it reads in a space-separated list of array elements in decimal.\n//The array will always have at least one leading zero, unless base=-1.\nfunction str2bigInt(s,base,minSize) {\n  var d, i, j, x, y, kk;\n  var k=s.length;\n  if (base==-1) { //comma-separated list of array elements in decimal\n    x=new Array(0);\n    for (;;) {\n      y=new Array(x.length+1);\n      for (i=0;i<x.length;i++)\n        y[i+1]=x[i];\n      y[0]=parseInt(s,10);\n      x=y;\n      d=s.indexOf(',',0);\n      if (d<1) \n        break;\n      s=s.substring(d+1);\n      if (s.length==0)\n        break;\n    }\n    if (x.length<minSize) {\n      y=new Array(minSize);\n      copy_(y,x);\n      return y;\n    }\n    return x;\n  }\n\n  x=int2bigInt(0,base*k,0);\n  for (i=0;i<k;i++) {\n    d=digitsStr.indexOf(s.substring(i,i+1),0);\n    if (base<=36 && d>=36)  //convert lowercase to uppercase if base<=36\n      d-=26;\n    if (d>=base || d<0) {   //stop at first illegal character\n      break;\n    }\n    multInt_(x,base);\n    addInt_(x,d);\n  }\n\n  for (k=x.length;k>0 && !x[k-1];k--); //strip off leading zeros\n  k=minSize>k+1 ? minSize : k+1;\n  y=new Array(k);\n  kk=k<x.length ? k : x.length;\n  for (i=0;i<kk;i++)\n    y[i]=x[i];\n  for (;i<k;i++)\n    y[i]=0;\n  return y;\n}\n\n//is bigint x equal to integer y?\n//y must have less than bpe bits\nfunction equalsInt(x,y) {\n  var i;\n  if (x[0]!=y)\n    return 0;\n  for (i=1;i<x.length;i++)\n    if (x[i])\n      return 0;\n  return 1;\n}\n\n//are bigints x and y equal?\n//this works even if x and y are different lengths and have arbitrarily many leading zeros\nfunction equals(x,y) {\n  var i;\n  var k=x.length<y.length ? x.length : y.length;\n  for (i=0;i<k;i++)\n    if (x[i]!=y[i])\n      return 0;\n  if (x.length>y.length) {\n    for (;i<x.length;i++)\n      if (x[i])\n        return 0;\n  } else {\n    for (;i<y.length;i++)\n      if (y[i])\n        return 0;\n  }\n  return 1;\n}\n\n//is the bigInt x equal to zero?\nfunction isZero(x) {\n  var i;\n  for (i=0;i<x.length;i++)\n    if (x[i])\n      return 0;\n  return 1;\n}\n\n//convert a bigInt into a string in a given base, from base 2 up to base 95.\n//Base -1 prints the contents of the array representing the number.\nfunction bigInt2str(x,base) {\n  var i,t,s=\"\";\n\n  if (s6.length!=x.length) \n    s6=dup(x);\n  else\n    copy_(s6,x);\n\n  if (base==-1) { //return the list of array contents\n    for (i=x.length-1;i>0;i--)\n      s+=x[i]+',';\n    s+=x[0];\n  }\n  else { //return it in the given base\n    while (!isZero(s6)) {\n      t=divInt_(s6,base);  //t=s6 % base; s6=floor(s6/base);\n      s=digitsStr.substring(t,t+1)+s;\n    }\n  }\n  if (s.length==0)\n    s=\"0\";\n  return s;\n}\n\n//returns a duplicate of bigInt x\nfunction dup(x) {\n  var i;\n  buff=new Array(x.length);\n  copy_(buff,x);\n  return buff;\n}\n\n//do x=y on bigInts x and y.  x must be an array at least as big as y (not counting the leading zeros in y).\nfunction copy_(x,y) {\n  var i;\n  var k=x.length<y.length ? x.length : y.length;\n  for (i=0;i<k;i++)\n    x[i]=y[i];\n  for (i=k;i<x.length;i++)\n    x[i]=0;\n}\n\n//do x=y on bigInt x and integer y.  \nfunction copyInt_(x,n) {\n  var i,c;\n  for (c=n,i=0;i<x.length;i++) {\n    x[i]=c & mask;\n    c>>=bpe;\n  }\n}\n\n//do x=x+n where x is a bigInt and n is an integer.\n//x must be large enough to hold the result.\nfunction addInt_(x,n) {\n  var i,k,c,b;\n  x[0]+=n;\n  k=x.length;\n  c=0;\n  for (i=0;i<k;i++) {\n    c+=x[i];\n    b=0;\n    if (c<0) {\n      b=-(c>>bpe);\n      c+=b*radix;\n    }\n    x[i]=c & mask;\n    c=(c>>bpe)-b;\n    if (!c) return; //stop carrying as soon as the carry is zero\n  }\n}\n\n//right shift bigInt x by n bits.  0 <= n < bpe.\nfunction rightShift_(x,n) {\n  var i;\n  var k=Math.floor(n/bpe);\n  if (k) {\n    for (i=0;i<x.length-k;i++) //right shift x by k elements\n      x[i]=x[i+k];\n    for (;i<x.length;i++)\n      x[i]=0;\n    n%=bpe;\n  }\n  for (i=0;i<x.length-1;i++) {\n    x[i]=mask & ((x[i+1]<<(bpe-n)) | (x[i]>>n));\n  }\n  x[i]>>=n;\n}\n\n//do x=floor(|x|/2)*sgn(x) for bigInt x in 2's complement\nfunction halve_(x) {\n  var i;\n  for (i=0;i<x.length-1;i++) {\n    x[i]=mask & ((x[i+1]<<(bpe-1)) | (x[i]>>1));\n  }\n  x[i]=(x[i]>>1) | (x[i] & (radix>>1));  //most significant bit stays the same\n}\n\n//left shift bigInt x by n bits.\nfunction leftShift_(x,n) {\n  var i;\n  var k=Math.floor(n/bpe);\n  if (k) {\n    for (i=x.length; i>=k; i--) //left shift x by k elements\n      x[i]=x[i-k];\n    for (;i>=0;i--)\n      x[i]=0;  \n    n%=bpe;\n  }\n  if (!n)\n    return;\n  for (i=x.length-1;i>0;i--) {\n    x[i]=mask & ((x[i]<<n) | (x[i-1]>>(bpe-n)));\n  }\n  x[i]=mask & (x[i]<<n);\n}\n\n//do x=x*n where x is a bigInt and n is an integer.\n//x must be large enough to hold the result.\nfunction multInt_(x,n) {\n  var i,k,c,b;\n  if (!n)\n    return;\n  k=x.length;\n  c=0;\n  for (i=0;i<k;i++) {\n    c+=x[i]*n;\n    b=0;\n    if (c<0) {\n      b=-(c>>bpe);\n      c+=b*radix;\n    }\n    x[i]=c & mask;\n    c=(c>>bpe)-b;\n  }\n}\n\n//do x=floor(x/n) for bigInt x and integer n, and return the remainder\nfunction divInt_(x,n) {\n  var i,r=0,s;\n  for (i=x.length-1;i>=0;i--) {\n    s=r*radix+x[i];\n    x[i]=Math.floor(s/n);\n    r=s%n;\n  }\n  return r;\n}\n\n//do the linear combination x=a*x+b*y for bigInts x and y, and integers a and b.\n//x must be large enough to hold the answer.\nfunction linComb_(x,y,a,b) {\n  var i,c,k,kk;\n  k=x.length<y.length ? x.length : y.length;\n  kk=x.length;\n  for (c=0,i=0;i<k;i++) {\n    c+=a*x[i]+b*y[i];\n    x[i]=c & mask;\n    c>>=bpe;\n  }\n  for (i=k;i<kk;i++) {\n    c+=a*x[i];\n    x[i]=c & mask;\n    c>>=bpe;\n  }\n}\n\n//do the linear combination x=a*x+b*(y<<(ys*bpe)) for bigInts x and y, and integers a, b and ys.\n//x must be large enough to hold the answer.\nfunction linCombShift_(x,y,b,ys) {\n  var i,c,k,kk;\n  k=x.length<ys+y.length ? x.length : ys+y.length;\n  kk=x.length;\n  for (c=0,i=ys;i<k;i++) {\n    c+=x[i]+b*y[i-ys];\n    x[i]=c & mask;\n    c>>=bpe;\n  }\n  for (i=k;c && i<kk;i++) {\n    c+=x[i];\n    x[i]=c & mask;\n    c>>=bpe;\n  }\n}\n\n//do x=x+(y<<(ys*bpe)) for bigInts x and y, and integers a,b and ys.\n//x must be large enough to hold the answer.\nfunction addShift_(x,y,ys) {\n  var i,c,k,kk;\n  k=x.length<ys+y.length ? x.length : ys+y.length;\n  kk=x.length;\n  for (c=0,i=ys;i<k;i++) {\n    c+=x[i]+y[i-ys];\n    x[i]=c & mask;\n    c>>=bpe;\n  }\n  for (i=k;c && i<kk;i++) {\n    c+=x[i];\n    x[i]=c & mask;\n    c>>=bpe;\n  }\n}\n\n//do x=x-(y<<(ys*bpe)) for bigInts x and y, and integers a,b and ys.\n//x must be large enough to hold the answer.\nfunction subShift_(x,y,ys) {\n  var i,c,k,kk;\n  k=x.length<ys+y.length ? x.length : ys+y.length;\n  kk=x.length;\n  for (c=0,i=ys;i<k;i++) {\n    c+=x[i]-y[i-ys];\n    x[i]=c & mask;\n    c>>=bpe;\n  }\n  for (i=k;c && i<kk;i++) {\n    c+=x[i];\n    x[i]=c & mask;\n    c>>=bpe;\n  }\n}\n\n//do x=x-y for bigInts x and y.\n//x must be large enough to hold the answer.\n//negative answers will be 2s complement\nfunction sub_(x,y) {\n  var i,c,k,kk;\n  k=x.length<y.length ? x.length : y.length;\n  for (c=0,i=0;i<k;i++) {\n    c+=x[i]-y[i];\n    x[i]=c & mask;\n    c>>=bpe;\n  }\n  for (i=k;c && i<x.length;i++) {\n    c+=x[i];\n    x[i]=c & mask;\n    c>>=bpe;\n  }\n}\n\n//do x=x+y for bigInts x and y.\n//x must be large enough to hold the answer.\nfunction add_(x,y) {\n  var i,c,k,kk;\n  k=x.length<y.length ? x.length : y.length;\n  for (c=0,i=0;i<k;i++) {\n    c+=x[i]+y[i];\n    x[i]=c & mask;\n    c>>=bpe;\n  }\n  for (i=k;c && i<x.length;i++) {\n    c+=x[i];\n    x[i]=c & mask;\n    c>>=bpe;\n  }\n}\n\n//do x=x*y for bigInts x and y.  This is faster when y<x.\nfunction mult_(x,y) {\n  var i;\n  if (ss.length!=2*x.length)\n    ss=new Array(2*x.length);\n  copyInt_(ss,0);\n  for (i=0;i<y.length;i++)\n    if (y[i])\n      linCombShift_(ss,x,y[i],i);   //ss=1*ss+y[i]*(x<<(i*bpe))\n  copy_(x,ss);\n}\n\n//do x=x mod n for bigInts x and n.\nfunction mod_(x,n) {\n  if (s4.length!=x.length)\n    s4=dup(x);\n  else\n    copy_(s4,x);\n  if (s5.length!=x.length)\n    s5=dup(x);  \n  divide_(s4,n,s5,x);  //x = remainder of s4 / n\n}\n\n//do x=x*y mod n for bigInts x,y,n.\n//for greater speed, let y<x.\nfunction multMod_(x,y,n) {\n  var i;\n  if (s0.length!=2*x.length)\n    s0=new Array(2*x.length);\n  copyInt_(s0,0);\n  for (i=0;i<y.length;i++)\n    if (y[i])\n      linCombShift_(s0,x,y[i],i);   //s0=1*s0+y[i]*(x<<(i*bpe))\n  mod_(s0,n);\n  copy_(x,s0);\n}\n\n//do x=x*x mod n for bigInts x,n.\nfunction squareMod_(x,n) {\n  var i,j,d,c,kx,kn,k;\n  for (kx=x.length; kx>0 && !x[kx-1]; kx--);  //ignore leading zeros in x\n  k=kx>n.length ? 2*kx : 2*n.length; //k=# elements in the product, which is twice the elements in the larger of x and n\n  if (s0.length!=k) \n    s0=new Array(k);\n  copyInt_(s0,0);\n  for (i=0;i<kx;i++) {\n    c=s0[2*i]+x[i]*x[i];\n    s0[2*i]=c & mask;\n    c>>=bpe;\n    for (j=i+1;j<kx;j++) {\n      c=s0[i+j]+2*x[i]*x[j]+c;\n      s0[i+j]=(c & mask);\n      c>>=bpe;\n    }\n    s0[i+kx]=c;\n  }\n  mod_(s0,n);\n  copy_(x,s0);\n}\n\n//return x with exactly k leading zero elements\nfunction trim(x,k) {\n  var i,y;\n  for (i=x.length; i>0 && !x[i-1]; i--);\n  y=new Array(i+k);\n  copy_(y,x);\n  return y;\n}\n\n//do x=x**y mod n, where x,y,n are bigInts and ** is exponentiation.  0**0=1.\n//this is faster when n is odd.  x usually needs to have as many elements as n.\nfunction powMod_(x,y,n) {\n  var k1,k2,kn,np;\n  if(s7.length!=n.length)\n    s7=dup(n);\n\n  //for even modulus, use a simple square-and-multiply algorithm,\n  //rather than using the more complex Montgomery algorithm.\n  if ((n[0]&1)==0) {\n    copy_(s7,x);\n    copyInt_(x,1);\n    while(!equalsInt(y,0)) {\n      if (y[0]&1)\n        multMod_(x,s7,n);\n      divInt_(y,2);\n      squareMod_(s7,n); \n    }\n    return;\n  }\n\n  //calculate np from n for the Montgomery multiplications\n  copyInt_(s7,0);\n  for (kn=n.length;kn>0 && !n[kn-1];kn--);\n  np=radix-inverseModInt(modInt(n,radix),radix);\n  s7[kn]=1;\n  multMod_(x ,s7,n);   // x = x * 2**(kn*bp) mod n\n\n  if (s3.length!=x.length)\n    s3=dup(x);\n  else\n    copy_(s3,x);\n\n  for (k1=y.length-1;k1>0 & !y[k1]; k1--);  //k1=first nonzero element of y\n  if (y[k1]==0) {  //anything to the 0th power is 1\n    copyInt_(x,1);\n    return;\n  }\n  for (k2=1<<(bpe-1);k2 && !(y[k1] & k2); k2>>=1);  //k2=position of first 1 bit in y[k1]\n  for (;;) {\n    if (!(k2>>=1)) {  //look at next bit of y\n      k1--;\n      if (k1<0) {\n        mont_(x,one,n,np);\n        return;\n      }\n      k2=1<<(bpe-1);\n    }    \n    mont_(x,x,n,np);\n\n    if (k2 & y[k1]) //if next bit is a 1\n      mont_(x,s3,n,np);\n  }\n}\n\n\n//do x=x*y*Ri mod n for bigInts x,y,n, \n//  where Ri = 2**(-kn*bpe) mod n, and kn is the \n//  number of elements in the n array, not \n//  counting leading zeros.  \n//x array must have at least as many elemnts as the n array\n//It's OK if x and y are the same variable.\n//must have:\n//  x,y < n\n//  n is odd\n//  np = -(n^(-1)) mod radix\nfunction mont_(x,y,n,np) {\n  var i,j,c,ui,t,ks;\n  var kn=n.length;\n  var ky=y.length;\n\n  if (sa.length!=kn)\n    sa=new Array(kn);\n    \n  copyInt_(sa,0);\n\n  for (;kn>0 && n[kn-1]==0;kn--); //ignore leading zeros of n\n  for (;ky>0 && y[ky-1]==0;ky--); //ignore leading zeros of y\n  ks=sa.length-1; //sa will never have more than this many nonzero elements.  \n\n  //the following loop consumes 95% of the runtime for randTruePrime_() and powMod_() for large numbers\n  for (i=0; i<kn; i++) {\n    t=sa[0]+x[i]*y[0];\n    ui=((t & mask) * np) & mask;  //the inner \"& mask\" was needed on Safari (but not MSIE) at one time\n    c=(t+ui*n[0]) >> bpe;\n    t=x[i];\n    \n    //do sa=(sa+x[i]*y+ui*n)/b   where b=2**bpe.  Loop is unrolled 5-fold for speed\n    j=1;\n    for (;j<ky-4;) { c+=sa[j]+ui*n[j]+t*y[j];   sa[j-1]=c & mask;   c>>=bpe;   j++;\n                     c+=sa[j]+ui*n[j]+t*y[j];   sa[j-1]=c & mask;   c>>=bpe;   j++;\n                     c+=sa[j]+ui*n[j]+t*y[j];   sa[j-1]=c & mask;   c>>=bpe;   j++;\n                     c+=sa[j]+ui*n[j]+t*y[j];   sa[j-1]=c & mask;   c>>=bpe;   j++;\n                     c+=sa[j]+ui*n[j]+t*y[j];   sa[j-1]=c & mask;   c>>=bpe;   j++; }    \n    for (;j<ky;)   { c+=sa[j]+ui*n[j]+t*y[j];   sa[j-1]=c & mask;   c>>=bpe;   j++; }\n    for (;j<kn-4;) { c+=sa[j]+ui*n[j];          sa[j-1]=c & mask;   c>>=bpe;   j++;\n                     c+=sa[j]+ui*n[j];          sa[j-1]=c & mask;   c>>=bpe;   j++;\n                     c+=sa[j]+ui*n[j];          sa[j-1]=c & mask;   c>>=bpe;   j++;\n                     c+=sa[j]+ui*n[j];          sa[j-1]=c & mask;   c>>=bpe;   j++;\n                     c+=sa[j]+ui*n[j];          sa[j-1]=c & mask;   c>>=bpe;   j++; }  \n    for (;j<kn;)   { c+=sa[j]+ui*n[j];          sa[j-1]=c & mask;   c>>=bpe;   j++; }   \n    for (;j<ks;)   { c+=sa[j];                  sa[j-1]=c & mask;   c>>=bpe;   j++; }  \n    sa[j-1]=c & mask;\n  }\n\n  if (!greater(n,sa))\n    sub_(sa,n);\n  copy_(x,sa);\n}\n\n\n","if (typeof Object.assign != 'function') {\n\t\n\tObject.assign = function (target, varArgs) {\n\t\t\n\t\tif (target == null) {\n\t\t\tthrow new TypeError('Cannot convert undefined or null to object');\n\t\t}\n\t\tvar result = Object(target);\n\n\t\tfor (var index = 1; index < arguments.length; index++) {\n\t\t\tvar nextSource = arguments[index];\n\n\t\t\tif (nextSource) {\n\t\t\t\tfor (var nextKey in nextSource) {\n\t\t\t\t\t// Avoid bugs when hasOwnProperty is shadowed\n\t\t\t\t\tif (Object.prototype.hasOwnProperty.call(nextSource, nextKey)) {\n\t\t\t\t\t\tresult[nextKey] = nextSource[nextKey];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t};\n}","/**\n * This library:\n *\t\t1. aims to solve the problem related to preserving types when it comes to web storage; \n *\t\t2. includes an expiration mechanism similar to the one cookies have. \n *\n * By using localStorage and sessionStorage, no matter what kind of a value is saved, this value is always converted to a string. This might lead to unpleasant results. \n * This library provides proxies for these storages, called XPMobileSDK.localStorage nad XPMobileSDK.sessionStorage. \n * Use the methods setItem, getItem, removeItem and clear in the same way described in the specification. Expect the type to be preserved. \n *\n * Example:\n *\t\tXPMobileSDK.sessionStorage.setItem('myKey', true);\n *\t\tXPMobileSDK.sessionStorage.getItem('myKey') === true;\n *\n * The method setItem provides an additional optional parameter: milliseconds. The item will not be available that many milliseconds from the moment of saving. \n *\n * Example:\n *\t\tXPMobileSDK.sessionStorage.setItem('myKey', 'myValue', 1000 * 60);\n *\t\t// after a minute\n *\t\tXPMobileSDK.sessionStorage.getItem('myKey') === null;\n *\n * @author rvp\n */\n(function () {\n\t\n\tif (!window.localStorage || !window.sessionStorage) {\n\t\treturn;\n\t}\n\n\tvar storages = ['sessionStorage', 'localStorage'];\n\n\tfor (var i in storages) {\n\n\t\tXPMobileSDK[storages[i]] = {\n\t\t\t\n\t\t\tstorage: window[storages[i]],\n\n\t\t\tsetItem: function (key, value, expiration) {\n\n\t\t\t\tif (expiration) {\n\t\t\t\t\t\n\t\t\t\t\tvar obj = {\n\t\t\t\t\t\tvalue: value,\n\t\t\t\t\t\texpiration: new Date().getTime() + expiration\n\t\t\t\t\t};\n\t\t\t\t\tthis.storage.setItem(key, 'expiration::' + JSON.stringify(obj));\n\t\t\t\t\treturn ;\n\t\t\t\t}\n\n\t\t\t\tif (typeof value == 'boolean') {\n\t\t\t\t\tthis.storage.setItem(key, 'boolean::' + value);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (typeof value == 'number') {\n\t\t\t\t\tthis.storage.setItem(key, 'number::' + value);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (typeof value == 'object') {\n\t\t\t\t\tthis.storage.setItem(key, 'object::' + JSON.stringify(value));\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tthis.storage.setItem(key, value);\n\t\t\t},\n\n\t\t\tgetItem: function (key) {\n\n\t\t\t\tvar value = this.storage.getItem(key);\n\t\t\t\t\n\t\t\t\tif (value == null) {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\n\t\t\t\tif (value.indexOf('expiration::') == 0) {\n\t\t\t\t\t\n\t\t\t\t\tvar obj = JSON.parse(value.substr(value.indexOf('::') + 2));\n\t\t\t\t\tif (new Date().getTime() > obj.expiration) {\n\t\t\t\t\t\tthis.storage.removeItem(key);\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t} \n\t\t\t\t\treturn obj.value;\n\t\t\t\t}\n\n\t\t\t\tif (value.indexOf('boolean::') == 0) {\n\t\t\t\t\treturn value == 'boolean::true';\n\t\t\t\t}\n\n\t\t\t\tif (value.indexOf('number::') == 0) {\n\t\t\t\t\treturn parseFloat(value.substr(value.indexOf('::') + 2));\n\t\t\t\t}\n\n\t\t\t\tif (value.indexOf('object::') == 0) {\n\t\t\t\t\treturn JSON.parse(value.substr(value.indexOf('::') + 2));\n\t\t\t\t}\n\n\t\t\t\treturn value;\n\t\t\t},\n\t\t\t\n\t\t\tremoveItem: function (key) {\n\t\t\t\tthis.storage.removeItem(key);\n\t\t\t},\n\t\t\t\n\t\t\tclear: function () {\n\t\t\t\tthis.storage.clear();\n\t\t\t},\n\t\t\t\n\t\t\tkey: function (index) {\n\t\t\t\treturn this.storage.key(index);\n\t\t\t}\n\t\t};\n\t\t\n\t}\n\n})();","/**\n*\n*  Base64 encode / decode\n*  http://www.webtoolkit.info/\n*\n**/\n\nvar Base64 = {\n\n\t// private property\n\t_keyStr : \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\",\n\n\t// public method for encoding\n\tencode : function (input) {\n\t\tvar output = \"\";\n\t\tvar chr1, chr2, chr3, enc1, enc2, enc3, enc4;\n\t\tvar i = 0;\n\n\t\t//input = Base64._utf8_encode(input);\n\n\t\twhile (i < input.length) {\n\n\t\t\tchr1 = input.charCodeAt(i++);\n\t\t\tchr2 = input.charCodeAt(i++);\n\t\t\tchr3 = input.charCodeAt(i++);\n\n\t\t\tenc1 = chr1 >> 2;\n\t\t\tenc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\n\t\t\tenc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\n\t\t\tenc4 = chr3 & 63;\n\n\t\t\tif (isNaN(chr2)) {\n\t\t\t\tenc3 = enc4 = 64;\n\t\t\t} else if (isNaN(chr3)) {\n\t\t\t\tenc4 = 64;\n\t\t\t}\n\n\t\t\toutput = output +\n\t\t\tthis._keyStr.charAt(enc1) + this._keyStr.charAt(enc2) +\n\t\t\tthis._keyStr.charAt(enc3) + this._keyStr.charAt(enc4);\n\n\t\t}\n\n\t\treturn output;\n\t},\n\t\n\tencodeArray : function (input) {\n\t\tvar output = \"\";\n\t\tvar chr1, chr2, chr3, enc1, enc2, enc3, enc4;\n\t\tvar i = 0;\n\n\t\t//input = Base64._utf8_encode(input);\n\n\t\twhile (i < input.length) {\n\n\t\t\tchr1 = input[i++];\n\t\t\tchr2 = input[i++];\n\t\t\tchr3 = input[i++];\n\n\t\t\tenc1 = chr1 >> 2;\n\t\t\tenc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\n\t\t\tenc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\n\t\t\tenc4 = chr3 & 63;\n\n\t\t\tif (isNaN(chr2)) {\n\t\t\t\tenc3 = enc4 = 64;\n\t\t\t} else if (isNaN(chr3)) {\n\t\t\t\tenc4 = 64;\n\t\t\t}\n\n\t\t\toutput = output +\n\t\t\tthis._keyStr.charAt(enc1) + this._keyStr.charAt(enc2) +\n\t\t\tthis._keyStr.charAt(enc3) + this._keyStr.charAt(enc4);\n\n\t\t}\n\n\t\treturn output;\n\t},\n\n\t// public method for decoding\n\tdecode : function (input) {\n\t\tvar output = \"\";\n\t\tvar chr1, chr2, chr3;\n\t\tvar enc1, enc2, enc3, enc4;\n\t\tvar i = 0;\n\n\t\tinput = input.replace(/[^A-Za-z0-9\\+\\/\\=]/g, \"\");\n\n\t\twhile (i < input.length) {\n\n\t\t\tenc1 = this._keyStr.indexOf(input.charAt(i++));\n\t\t\tenc2 = this._keyStr.indexOf(input.charAt(i++));\n\t\t\tenc3 = this._keyStr.indexOf(input.charAt(i++));\n\t\t\tenc4 = this._keyStr.indexOf(input.charAt(i++));\n\n\t\t\tchr1 = (enc1 << 2) | (enc2 >> 4);\n\t\t\tchr2 = ((enc2 & 15) << 4) | (enc3 >> 2);\n\t\t\tchr3 = ((enc3 & 3) << 6) | enc4;\n\n\t\t\toutput = output + String.fromCharCode(chr1);\n\n\t\t\tif (enc3 != 64) {\n\t\t\t\toutput = output + String.fromCharCode(chr2);\n\t\t\t}\n\t\t\tif (enc4 != 64) {\n\t\t\t\toutput = output + String.fromCharCode(chr3);\n\t\t\t}\n\n\t\t}\n\n\t\toutput = Base64._utf8_decode(output);\n\n\t\treturn output;\n\n\t},\n\t\n\t// public method for decoding binary\n\tdecodeBinary: function(input, arrayBuffer) {\n\t\t(function() {\n\t\t\ttry {\n\t\t\t\tvar a = new Uint8Array(1);\n\t\t\t\treturn; //no need\n\t\t\t} catch(e) { }\n\t\t\t\n\t\t\tfunction subarray(start, end) {\n\t\t\t\treturn this.slice(start, end);\n\t\t\t}\n\t\t\t\n\t\t\tfunction set_(array, offset) {\n\t\t\t\tif (arguments.length < 2) offset = 0;\n\t\t\t\tfor (var i = 0, n = array.length; i < n; ++i, ++offset)\n\t\t\t\t\tthis[offset] = array[i] & 0xFF;\n\t\t\t}\n\t\t\t\n\t\t\t// we need typed arrays\n\t\t\tfunction TypedArray(arg1) {\n\t\t\t\tvar result;\n\t\t\t\tif (typeof arg1 === \"number\") {\n\t\t\t\t\tresult = new Array(arg1);\n\t\t\t\t\tfor (var i = 0; i < arg1; ++i)\n\t\t\t\t\t\tresult[i] = 0;\n\t\t\t\t} else\n\t\t\t\t\tresult = arg1.slice(0);\n\t\t\t\tresult.subarray = subarray;\n\t\t\t\tresult.buffer = result;\n\t\t\t\tresult.byteLength = result.length;\n\t\t\t\tresult.set = set_;\n\t\t\t\tif (typeof arg1 === \"object\" && arg1.buffer)\n\t\t\t\t\tresult.buffer = arg1.buffer;\n\t\t\t\treturn result;\n\t\t\t}\n\t\t\twindow.Uint8Array = TypedArray;\n\t\t\twindow.Uint32Array = TypedArray;\n\t\t\twindow.Int32Array = TypedArray;\n\t\t})();\n\t\n\t\t//get last chars to see if are valid\n\t\tvar lkey1 = this._keyStr.indexOf(input.charAt(input.length-1));\t\t \n\t\tvar lkey2 = this._keyStr.indexOf(input.charAt(input.length-2));\t\t \n\t\n\t\tvar bytes = (input.length / 4) * 3;\n\n\t    // The input is not always the same number, which divided by 4 does not always return an integer\n\t    // This doesn't seem to bother most platforms and it sounds perfectly fine to browsers and the iOS parser, \n\t\t// but somehow the Android parser expects integer number and throws an exception that it cannot parse the input.\n\t\tbytes = parseInt(bytes);\n\n\t\tif (lkey1 == 64) bytes--; //padding chars, so skip\n\t\tif (lkey2 == 64) bytes--; //padding chars, so skip\n\t\t\n\t\tvar uarray;\n\t\tvar chr1, chr2, chr3;\n\t\tvar enc1, enc2, enc3, enc4;\n\t\tvar i = 0;\n\t\tvar j = 0;\n\t\t\n\t\tif (arrayBuffer)\n\t\t\tuarray = new Uint8Array(arrayBuffer);\n\t\telse\n\t\t\tuarray = new Uint8Array(bytes);\n\t\t\n\t\tinput = input.replace(/[^A-Za-z0-9\\+\\/\\=]/g, \"\");\n\t\t\n\t\tfor (i=0; i<bytes; i+=3) {\t\n\t\t\t//get the 3 octects in 4 ascii chars\n\t\t\tenc1 = this._keyStr.indexOf(input.charAt(j++));\n\t\t\tenc2 = this._keyStr.indexOf(input.charAt(j++));\n\t\t\tenc3 = this._keyStr.indexOf(input.charAt(j++));\n\t\t\tenc4 = this._keyStr.indexOf(input.charAt(j++));\n\t\n\t\t\tchr1 = (enc1 << 2) | (enc2 >> 4);\n\t\t\tchr2 = ((enc2 & 15) << 4) | (enc3 >> 2);\n\t\t\tchr3 = ((enc3 & 3) << 6) | enc4;\n\t\n\t\t\tuarray[i] = chr1;\t\t\t\n\t\t\tif (enc3 != 64) uarray[i+1] = chr2;\n\t\t\tif (enc4 != 64) uarray[i+2] = chr3;\n\t\t}\n\t\n\t\treturn uarray;\t\n\t},\n\n\t// private method for UTF-8 encoding\n\t_utf8_encode : function (string) {\n\t\tstring = string.replace(/\\r\\n/g,\"\\n\");\n\t\tvar utftext = \"\";\n\n\t\tfor (var n = 0; n < string.length; n++) {\n\n\t\t\tvar c = string.charCodeAt(n);\n\n\t\t\tif (c < 128) {\n\t\t\t\tutftext += String.fromCharCode(c);\n\t\t\t}\n\t\t\telse if((c > 127) && (c < 2048)) {\n\t\t\t\tutftext += String.fromCharCode((c >> 6) | 192);\n\t\t\t\tutftext += String.fromCharCode((c & 63) | 128);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tutftext += String.fromCharCode((c >> 12) | 224);\n\t\t\t\tutftext += String.fromCharCode(((c >> 6) & 63) | 128);\n\t\t\t\tutftext += String.fromCharCode((c & 63) | 128);\n\t\t\t}\n\n\t\t}\n\n\t\treturn utftext;\n\t},\n\n\t// private method for UTF-8 decoding\n\t_utf8_decode : function (utftext) {\n\t\tvar string = \"\";\n\t\tvar i = 0;\n\t\tvar c = c1 = c2 = 0;\n\n\t\twhile ( i < utftext.length ) {\n\n\t\t\tc = utftext.charCodeAt(i);\n\n\t\t\tif (c < 128) {\n\t\t\t\tstring += String.fromCharCode(c);\n\t\t\t\ti++;\n\t\t\t}\n\t\t\telse if((c > 191) && (c < 224)) {\n\t\t\t\tc2 = utftext.charCodeAt(i+1);\n\t\t\t\tstring += String.fromCharCode(((c & 31) << 6) | (c2 & 63));\n\t\t\t\ti += 2;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tc2 = utftext.charCodeAt(i+1);\n\t\t\t\tc3 = utftext.charCodeAt(i+2);\n\t\t\t\tstring += String.fromCharCode(((c & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));\n\t\t\t\ti += 3;\n\t\t\t}\n\n\t\t}\n\n\t\treturn string;\n\t}\n\n};\n","/**\n * The connection response class is internal and instances should only be created from the ConnectionRequest class.\n * The goal of the class is to parse response from the server and serve it as simpler JavaScript object. \n * \n * @class ConnectionResponse\n */\nXPMobileSDK.library.ConnectionResponse = function (xmlString) {\n\t\n\tvar self = this;\n\t\n\tself.sequenceID = 0;\n\tself.command = '';\n\tself.isResponse = false;\n\tself.isProcessing = false;\n\tself.isError = false;\n\tself.outputParameters = null; \n\tself.subItems = null; // XML Node, because they are not based on fixed structure\n\tself.thumbnailBase64 = null; // Base 64 encoded thumbnail. This is used only for the GetThumbnail command\n\tself.exports = [];\n\tself.sequences = []; \n\tself.actions = [];\n\tself.items = [];\n\tself.errorCode = 0;\n\tself.errorString = '';\n\t\n\t//xmlString = xmlString.replace('<Result>', '<Items><Item Type=\"Investiagtion\" Id=\"ef305713-ed63-4888-9fdc-53a5294fc62b\" Name=\"Bahur\"><Properties State=\"New\" StartTime=\"1412173087831\" EndTime=\"1412176810831\"/><Items><Item Type=\"Camera\" Name=\"Syzdyrma\" Id=\"af81b01d-f623-45d9-951a-6452b94ee561\" ><Properties SrcWidth=\"1920\" SrcHeight=\"1080\"/></Item><Item Type=\"Camera\" Name=\"Babek\" Id=\"b1bddc78-87ad-470f-b488-9db6352aab82\" ><Properties SrcWidth=\"720\" SrcHeight=\"576\" /></Item></Items></Item></Items><Result>');\n\t\n\tvar xmlDoc = parseXML(xmlString);\n\tvar CommunicationNode = xmlDoc.getElementsByTagName('Communication')[0];\n\tvar CommandNode = CommunicationNode.getElementsByTagName('Command')[0];\n\tvar TypeNode = CommandNode.getElementsByTagName('Type')[0];\n  if (XMLNodeTextContent(TypeNode) == 'Processing') {\n    logger.log('Processing...');\n\t\tself.isProcessing = true;\n\t} else if (XMLNodeTextContent(TypeNode) == 'Response') {\n\t\tself.isResponse = true;\n\t\tvar tmp;\n\t\ttmp = CommandNode.getElementsByTagName('OutputParams');\n\t\tif (tmp.length > 0) {\n\t\t\tself.outputParameters = {};\n\t\t\tvar OutputParamsNode = tmp[0];\n\t\t\tvar paramsNodes = OutputParamsNode.getElementsByTagName('Param');\n\t\t\tfor (var i = 0, c = paramsNodes.length; i < c; i++) {\n\t\t\t\tvar paramNode = paramsNodes[i];\n\t\t\t\tvar key = '', value = '';\n\t\t\t\tvar attributes = paramNode.attributes;\n\t\t\t\tfor (var j = 0; j < attributes.length; j++) {\n\t\t\t\t\tvar attr = attributes[j];\n\t\t\t\t\tif (attr.name == 'Name') {\n\t\t\t\t\t\tkey = attr.value;\n\t\t\t\t\t} else if (attr.name == 'Value') {\n\t\t\t\t\t\tvalue = attr.value;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (key && value) {\n                    if(this.outputParameters[key] && typeof this.outputParameters[key] == 'string') {\n                            var paramValue = this.outputParameters[key];\n                            this.outputParameters[key] = new Array();\n                            this.outputParameters[key].push(paramValue);\n                    }\n                    else if (typeof this.outputParameters[key] == 'object') {\n                            this.outputParameters[key].push(value);\n                    }\n                    else {\n                            this.outputParameters[key] = value;\n                    }\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\ttmp = CommandNode.getElementsByTagName('SubItems');\n\t\tif (tmp.length > 0) {\n\t\t\tself.subItems = tmp[0];\n\t\t}\n\n\t\ttmp = CommandNode.getElementsByTagName('ServerStatus');\n\t\tif (tmp.length > 0) {\n\t\t\tself.ServerStatus = {};\n\t\t\tvar cpu = tmp[0].getElementsByTagName('CpuUsage');\n\t\t\tif(cpu.length > 0) {\n\t\t\t\tself.ServerStatus.CPU = XMLNodeTextContent(cpu[0]);\n\t\t\t}\n\t\t\t\n\t\t\tvar DiskUsage = tmp[0].getElementsByTagName('DiskUsage');\n\t\t\tif(DiskUsage.length > 0) {\n\t\t\t\tself.ServerStatus.HDD = {};\n\t\t\t\tvar recording = DiskUsage[0].getElementsByTagName('RecordingDiskUsageInBytes');\n\t\t\t\tif(recording.length > 0) {\n\t\t\t\t\tself.ServerStatus.HDD.recorded = XMLNodeTextContent(recording[0]);\n\t\t\t\t}\n\t\t\t\tvar exp = DiskUsage[0].getElementsByTagName('ExportsDiskUsageInBytes');\n\t\t\t\tif(exp.length > 0) {\n\t\t\t\t\tself.ServerStatus.HDD.exports = XMLNodeTextContent(exp[0]);\n\t\t\t\t}\n\t\t\t\tvar user = DiskUsage[0].getElementsByTagName('UserDiskUsageInBytes');\n\t\t\t\tif(user.length > 0) {\n\t\t\t\t\tself.ServerStatus.HDD.user = XMLNodeTextContent(user[0]);\n\t\t\t\t}\n\t\t\t\tvar other = DiskUsage[0].getElementsByTagName('OtherDiskUsageInBytes');\n\t\t\t\tif(other.length > 0) {\n\t\t\t\t\tself.ServerStatus.HDD.other = XMLNodeTextContent(other[0]);\n\t\t\t\t}\n\t\t\t\tvar free = DiskUsage[0].getElementsByTagName('FreeSpaceInBytes');\n\t\t\t\tif(free.length > 0) {\n\t\t\t\t\tself.ServerStatus.HDD.free = XMLNodeTextContent(free[0]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tparseThumbnail(CommandNode);\n\n\t\tparseExports(CommandNode);\n\t\t\n\t\tparseSequences(CommandNode);\n\t\t\n\t\tparseActions(CommandNode);\n\t\t\n\t\tparseItems(CommandNode);\n\n\t\tvar ResultNode = CommandNode.getElementsByTagName('Result')[0];\n\t\t\n\t\tif (XMLNodeTextContent(ResultNode) != 'OK') {\n\t\t\tself.isError = true;\n\t\t\ttmp = CommandNode.getElementsByTagName('ErrorString');\n\t\t\tif (tmp.length > 0) {\n\t\t\t\tself.errorString = XMLNodeTextContent(tmp[0]);\n\t\t\t}\n\t\t\ttmp = CommandNode.getElementsByTagName('ErrorCode');\n\t\t\tif (tmp.length > 0) {\n\t\t\t\tself.errorCode = parseInt(XMLNodeTextContent(tmp[0]));\n\t\t\t}\n\n\t\t\tself.error = {\n\t\t\t\tcode: self.errorCode || XPMobileSDK.library.ConnectionError.Unknown,\n\t\t\t\tmessage: self.errorString || ''\n\t\t\t};\n\n\t\t\tconst commandNameNode = CommandNode.getElementsByTagName('Name');\n\t\t\tif (commandNameNode.length > 0) {\n\t\t\t\tconst commandName = XMLNodeTextContent(commandNameNode[0]);\n\t\t\t\tlet logError = true;\n\t\t\t\tif (commandName === \"CloseStream\") {\n\t\t\t\t\tlogError = false;\r\n\t\t\t\t}\n\t\t\t\tif (commandName === \"LogIn\" && self.errorCode === XPMobileSDK.library.ConnectionError.SecondStepAuthenticationRequired) {\n\t\t\t\t\tlogError = false;\r\n\t\t\t\t}\n\t\t\t\tif (logError) {\n\t\t\t\t\tlogger.error('Response error ' + (self.errorString || getError(self.errorCode)) + ' ' + (self.errorCode || '') + ' Complete response: ' + xmlString);\r\n\t\t\t\t}\r\n\t\t\t}\n\t\t}\n\t}\n\t\n\t/**\n\t * Gets an error string by error code as defined in XPMobileSDK.library.ConnectionError\n\t */\n\tfunction getError(errorCode) {\n\t\tvar result;\n\t\tObject.keys(XPMobileSDK.library.ConnectionError).forEach(function(key) { \n\t\t\t\tif (XPMobileSDK.library.ConnectionError[key] == errorCode) { \n\t\t\t\t\tresult = key; \n\t\t\t\t} \n\t\t\t});\n\t\treturn result;\n\t}\n\n\t/**\n\t * Parses the Thumbnail or ThumbnailJSON tag and extracts a BASE64 image.\n\t *\n\t * @param CommandNode the Command tag.\n\t */\n\tfunction parseThumbnail(CommandNode) {\n\n\t\tvar thumbnail = CommandNode.getElementsByTagName('Thumbnail')[0];\n\t\tif (thumbnail) {\n\t\t\tself.thumbnailBase64 = 'data:image/jpeg;base64,' + XMLNodeTextContent(thumbnail);\n\t\t\treturn;\n\t\t}\n\n\t\tvar thumbnailJSON = CommandNode.getElementsByTagName('ThumbnailJSON')[0];\n\t\tif (thumbnailJSON) {\n\t\t\tself.thumbnailJSON = XMLNodeTextContent(thumbnailJSON);\n\t\t\treturn;\n\t\t}\n\t\t\n\t};\n\t\n\t/**\n\t * Parses the Exports tag and saves the Export entries within this.exports.\n\t *\n\t * @param CommandNode the Command tag.\n\t */\n\tfunction parseExports(CommandNode) {\n\n\t\tvar exportsNodes = CommandNode.getElementsByTagName('Exports');\n\n\t\tif (exportsNodes.length > 0) {\n\n\t\t\tself.exports = [];\n\t\t\tvar exportNodes = exportsNodes[0].getElementsByTagName(\"Export\");\n\n\t\t\tfor (var i = 0; i < exportNodes.length; i++) {\n\t\t\t\tvar exp = attributesToObject(exportNodes[i], {\n\t\t\t\t\tnumbers: ['Size', 'State'],\n\t\t\t\t\tdates: ['StartTime', 'EndTime', 'CompletedTime', 'QueuedTime']\n\t\t\t\t});\n\t\t\t\t\n\t\t\t\tself.exports.push(exp);\n\t\t\t}\n\t\t}\n\t};\n\n\t/**\n\t* Parses the Sequences tag and saves the sequence entries within this.sequences.\n\t*\n\t* @param CommandNode the Command tag.\n\t*/\n\tfunction parseSequences(CommandNode) {\n\t\t\n\t\tvar rootNode = CommandNode.getElementsByTagName('Sequences');\n\n\t\tif (rootNode.length > 0) {\n\n\t\t\tself.sequences = [];\n\t\t\tvar sequencesNodes = rootNode[0].getElementsByTagName(\"Sequence\");\n\n\t\t\tfor (var i = 0; i < sequencesNodes.length; i++) {\n\t\t\t\t\n\t\t\t\tvar sequence = attributesToObject(sequencesNodes[i], {\n\t\t\t\t\tdates: ['StartTime', 'EndTime', 'TimeStamp']\n\t\t\t\t});\n\n\t\t\t\tself.sequences.push(sequence);\n\t\t\t}\n\t\t}\n\t};\n\t\n\t/**\n\t * Parses the Outputs and Events (Actions) and saves them within this.actions.\n\t * \n\t * @param CommandNode the Command tag.\n\t */\n\tfunction parseActions(CommandNode) {\n\t\t\n\t\tvar EMPTY_CAMERA_NAME = '00000000-0000-0000-0000-000000000000';\n\t\t\n\t\tself.actions = [];\n\t\t\n\t\tvar headerGroups = CommandNode.getElementsByTagName('OEHeaderGroup');\n\t\t\n\t\tif (headerGroups.length == 0) {\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tArray.prototype.forEach.call(headerGroups, function(headerGroup) {\n\t\t\tvar items = headerGroup.getElementsByTagName('OEItem');\n\t\t\tArray.prototype.forEach.call(items, function(item) {\n\t\t\t\tvar action = attributesToObject(item);\n\t\t\t\taction.Type = headerGroup.getAttribute('Name');\n\t\t\t\tself.actions.push(action);\n\t\t\t});\n\t\t});\n\t\t\n\t\tself.actions.sort(function(first, second) {\n\t\t\t\n\t\t\t// sort types (outputs go first, then events)\n\t\t\tif (first.Type == 'Outputs' && second.Type == 'Events')\n\t\t\t\treturn -1;\n\t\t\telse if (first.Type == 'Events' && second.Type == 'Outputs')\n\t\t\t\treturn 1;\n\t\t\t\n\t\t\t// if types match, sort by assignment status (assigned outputs go first, then unassigned)\n\t\t\tif (first.CameraId != EMPTY_CAMERA_NAME && second.CameraId == EMPTY_CAMERA_NAME)\n\t\t\t\treturn -1;\n\t\t\telse if (first.CameraId == EMPTY_CAMERA_NAME && second.CameraId != EMPTY_CAMERA_NAME)\n\t\t\t\treturn 1;\n\n\t\t\t// if types and statuses match, sort alphabetically\n\t\t\tif (first.Name < second.Name)\n\t\t\t\treturn -1;\n\t\t\telse if (first.Name > second.Name)\n\t\t\t\treturn 1;\n\t\t\t\n\t\t\treturn 0;\n\t\t});\n\t};\n\t\n\t/**\n\t* Parses the Items tag\n\t*\n\t* @param CommandNode the Command tag.\n\t*/\n\tfunction parseItems(CommandNode) {\n\n\t\tvar findItems = function(node) {\n\t\t\tvar subNodes = node.childNodes;\n\t\t\tvar ItemsNode = null;\n\t\t\t\n\t\t\tfor(var i = 0; i < subNodes.length; i++) {\n\t\t\t\tif(subNodes[i].nodeName == 'Items') {\n\t\t\t\t\tItemsNode = subNodes[i];\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif(ItemsNode) {\n\t\t\t\tself.items = processItem(ItemsNode);\n\t\t\t}\n\t\t\n\t\t};\n\t\t\n\t\tvar processItem = function(node) {\n\t\t\t\n\t\t\tvar result = [];\n\t\t\tvar subNodes = node.childNodes;\n\t\t\t\n\t\t\tfor(var i = 0; i < subNodes.length; i++) {\n\t\t\t\tif(subNodes[i].nodeName == 'Item') {\n\t\t\t\t\tvar itemData = {};\n\t\t\t\t\t\n\t\t\t\t\tif(subNodes[i].attributes.length > 0) {\n\t\t\t\t\t\tfor(var j = 0; j < subNodes[i].attributes.length; j++) {\n\t\t\t\t\t\t\titemData[subNodes[i].attributes[j].name] = safe(subNodes[i].attributes[j].value);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tfor(var j = 0; j < subNodes[i].childNodes.length; j++) {\n\t\t\t\t\t\t\n\t\t\t\t\t\tif(subNodes[i].childNodes[j].nodeName == 'Properties') {\n\t\t\t\t\t\t\tfor(var k = 0; k < subNodes[i].childNodes[j].attributes.length; k++) {\n\t\t\t\t\t\t\t\titemData[subNodes[i].childNodes[j].attributes[k].name] = safe(subNodes[i].childNodes[j].attributes[k].value);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (subNodes[i].childNodes[j].nodeName == 'Items') {\n\t\t\t\t\t\t\titemData.Items = processItem(subNodes[i].childNodes[j]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tresult.push(itemData);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn result;\n\t\t};\n\t\t\n\t\tfindItems(CommandNode);\n\t};\n\n\t/**\n\t * Converts a XML Node object to a JavaScript object converting all attributes of the node as properties of the object. \n\t * The default type of the properties is String. Use the options argument to change that behavior. \n\t *\n\t * @param node: a XML Node.\n\t * @param options: optional parameter, an object describing how attributes should be converted to different types; may contains the following properties:\n\t *\t- numbers: an array of the attributes that should be converted to numbers.\n\t *\t- dates: an array of the attributes that should be converted to dates from the given UTC timestamp.\n\t * @return object representing the given node.\n\t */\n\tfunction attributesToObject(node, options) {\n\n\t\tvar result = {};\n\n\t\tfor (var i = 0; i < node.attributes.length; i++) {\n\n\t\t\tvar attribute = node.attributes[i];\n\n\t\t\tif (options && options.numbers && options.numbers.indexOf(attribute.name) != -1) {\n\t\t\t\tresult[attribute.name] = Number(attribute.value);\n\t\t\t} else if (options && options.dates && options.dates.indexOf(attribute.name) != -1) {\n\t\t\t\tresult[attribute.name] = new Date(parseInt(attribute.value));\n\t\t\t} else {\n\t\t\t\tresult[attribute.name] = safe(attribute.value);\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t}\n\t\n\t/**\n\t * Removes unsafe symbols.\n\t * \n\t * @param string: a value coming from the server\n\t * @return a safe version of the string\n\t */\n\tfunction safe(string) {\n\t\t\n\t\tvar symbols = ['<', '>'];\n\n\t\tfor (var i = 0, max = symbols.length; i < max; ++i) {\n\t\t\tstring = string.replace(new RegExp(symbols[i], 'g'), '');\n\t\t}\n\t\t\n\t\treturn string;\n\t}\n};\n\n//////////////\n// XML Parser\n//////////////\n\nvar parseXML;\nvar XMLNodeTextContent;\nif (typeof window.DOMParser != \"undefined\") {\n\tparseXML = function (xmlStr) {\n    \treturn ( new window.DOMParser() ).parseFromString(xmlStr, \"text/xml\");\n\t};\n\tXMLNodeTextContent = function (node) {\n\t\treturn node.textContent;\n\t};\n} else if (typeof window.ActiveXObject != \"undefined\" &&\n       new window.ActiveXObject(\"Microsoft.XMLDOM\")) {\n    parseXML = function(xmlStr) {\n        var xmlDoc = new window.ActiveXObject(\"Microsoft.XMLDOM\");\n        xmlDoc.async = \"false\";\n        xmlDoc.loadXML(xmlStr);\n        return xmlDoc;\n    };\n    XMLNodeTextContent = function (node) {\n\t\treturn node.text;\n\t};\n} else {\n    throw new Error(\"No XML parser found\");\n}","/*\nCryptoJS v3.1\ncode.google.com/p/crypto-js\n(c) 2009-2013 by Jeff Mott. All rights reserved.\ncode.google.com/p/crypto-js/wiki/License\n*/\nvar CryptoJS=CryptoJS||function(u,p){var d={},l=d.lib={},s=function(){},t=l.Base={extend:function(a){s.prototype=this;var c=new s;a&&c.mixIn(a);c.hasOwnProperty(\"init\")||(c.init=function(){c.$super.init.apply(this,arguments)});c.init.prototype=c;c.$super=this;return c},create:function(){var a=this.extend();a.init.apply(a,arguments);return a},init:function(){},mixIn:function(a){for(var c in a)a.hasOwnProperty(c)&&(this[c]=a[c]);a.hasOwnProperty(\"toString\")&&(this.toString=a.toString)},clone:function(){return this.init.prototype.extend(this)}},\nr=l.WordArray=t.extend({init:function(a,c){a=this.words=a||[];this.sigBytes=c!=p?c:4*a.length},toString:function(a){return(a||v).stringify(this)},concat:function(a){var c=this.words,e=a.words,j=this.sigBytes;a=a.sigBytes;this.clamp();if(j%4)for(var k=0;k<a;k++)c[j+k>>>2]|=(e[k>>>2]>>>24-8*(k%4)&255)<<24-8*((j+k)%4);else if(65535<e.length)for(k=0;k<a;k+=4)c[j+k>>>2]=e[k>>>2];else c.push.apply(c,e);this.sigBytes+=a;return this},clamp:function(){var a=this.words,c=this.sigBytes;a[c>>>2]&=4294967295<<\n32-8*(c%4);a.length=u.ceil(c/4)},clone:function(){var a=t.clone.call(this);a.words=this.words.slice(0);return a},random:function(a){for(var c=[],e=0;e<a;e+=4)c.push(4294967296*u.random()|0);return new r.init(c,a)}}),w=d.enc={},v=w.Hex={stringify:function(a){var c=a.words;a=a.sigBytes;for(var e=[],j=0;j<a;j++){var k=c[j>>>2]>>>24-8*(j%4)&255;e.push((k>>>4).toString(16));e.push((k&15).toString(16))}return e.join(\"\")},parse:function(a){for(var c=a.length,e=[],j=0;j<c;j+=2)e[j>>>3]|=parseInt(a.substr(j,\n2),16)<<24-4*(j%8);return new r.init(e,c/2)}},b=w.Latin1={stringify:function(a){var c=a.words;a=a.sigBytes;for(var e=[],j=0;j<a;j++)e.push(String.fromCharCode(c[j>>>2]>>>24-8*(j%4)&255));return e.join(\"\")},parse:function(a){for(var c=a.length,e=[],j=0;j<c;j++)e[j>>>2]|=(a.charCodeAt(j)&255)<<24-8*(j%4);return new r.init(e,c)}},x=w.Utf8={stringify:function(a){try{return decodeURIComponent(escape(b.stringify(a)))}catch(c){throw Error(\"Malformed UTF-8 data\");}},parse:function(a){return b.parse(unescape(encodeURIComponent(a)))}},\nq=l.BufferedBlockAlgorithm=t.extend({reset:function(){this._data=new r.init;this._nDataBytes=0},_append:function(a){\"string\"==typeof a&&(a=x.parse(a));this._data.concat(a);this._nDataBytes+=a.sigBytes},_process:function(a){var c=this._data,e=c.words,j=c.sigBytes,k=this.blockSize,b=j/(4*k),b=a?u.ceil(b):u.max((b|0)-this._minBufferSize,0);a=b*k;j=u.min(4*a,j);if(a){for(var q=0;q<a;q+=k)this._doProcessBlock(e,q);q=e.splice(0,a);c.sigBytes-=j}return new r.init(q,j)},clone:function(){var a=t.clone.call(this);\na._data=this._data.clone();return a},_minBufferSize:0});l.Hasher=q.extend({cfg:t.extend(),init:function(a){this.cfg=this.cfg.extend(a);this.reset()},reset:function(){q.reset.call(this);this._doReset()},update:function(a){this._append(a);this._process();return this},finalize:function(a){a&&this._append(a);return this._doFinalize()},blockSize:16,_createHelper:function(a){return function(b,e){return(new a.init(e)).finalize(b)}},_createHmacHelper:function(a){return function(b,e){return(new n.HMAC.init(a,\ne)).finalize(b)}}});var n=d.algo={};return d}(Math);\n(function(){var u=CryptoJS,p=u.lib.WordArray;u.enc.Base64={stringify:function(d){var l=d.words,p=d.sigBytes,t=this._map;d.clamp();d=[];for(var r=0;r<p;r+=3)for(var w=(l[r>>>2]>>>24-8*(r%4)&255)<<16|(l[r+1>>>2]>>>24-8*((r+1)%4)&255)<<8|l[r+2>>>2]>>>24-8*((r+2)%4)&255,v=0;4>v&&r+0.75*v<p;v++)d.push(t.charAt(w>>>6*(3-v)&63));if(l=t.charAt(64))for(;d.length%4;)d.push(l);return d.join(\"\")},parse:function(d){var l=d.length,s=this._map,t=s.charAt(64);t&&(t=d.indexOf(t),-1!=t&&(l=t));for(var t=[],r=0,w=0;w<\nl;w++)if(w%4){var v=s.indexOf(d.charAt(w-1))<<2*(w%4),b=s.indexOf(d.charAt(w))>>>6-2*(w%4);t[r>>>2]|=(v|b)<<24-8*(r%4);r++}return p.create(t,r)},_map:\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\"}})();\n(function(u){function p(b,n,a,c,e,j,k){b=b+(n&a|~n&c)+e+k;return(b<<j|b>>>32-j)+n}function d(b,n,a,c,e,j,k){b=b+(n&c|a&~c)+e+k;return(b<<j|b>>>32-j)+n}function l(b,n,a,c,e,j,k){b=b+(n^a^c)+e+k;return(b<<j|b>>>32-j)+n}function s(b,n,a,c,e,j,k){b=b+(a^(n|~c))+e+k;return(b<<j|b>>>32-j)+n}for(var t=CryptoJS,r=t.lib,w=r.WordArray,v=r.Hasher,r=t.algo,b=[],x=0;64>x;x++)b[x]=4294967296*u.abs(u.sin(x+1))|0;r=r.MD5=v.extend({_doReset:function(){this._hash=new w.init([1732584193,4023233417,2562383102,271733878])},\n_doProcessBlock:function(q,n){for(var a=0;16>a;a++){var c=n+a,e=q[c];q[c]=(e<<8|e>>>24)&16711935|(e<<24|e>>>8)&4278255360}var a=this._hash.words,c=q[n+0],e=q[n+1],j=q[n+2],k=q[n+3],z=q[n+4],r=q[n+5],t=q[n+6],w=q[n+7],v=q[n+8],A=q[n+9],B=q[n+10],C=q[n+11],u=q[n+12],D=q[n+13],E=q[n+14],x=q[n+15],f=a[0],m=a[1],g=a[2],h=a[3],f=p(f,m,g,h,c,7,b[0]),h=p(h,f,m,g,e,12,b[1]),g=p(g,h,f,m,j,17,b[2]),m=p(m,g,h,f,k,22,b[3]),f=p(f,m,g,h,z,7,b[4]),h=p(h,f,m,g,r,12,b[5]),g=p(g,h,f,m,t,17,b[6]),m=p(m,g,h,f,w,22,b[7]),\nf=p(f,m,g,h,v,7,b[8]),h=p(h,f,m,g,A,12,b[9]),g=p(g,h,f,m,B,17,b[10]),m=p(m,g,h,f,C,22,b[11]),f=p(f,m,g,h,u,7,b[12]),h=p(h,f,m,g,D,12,b[13]),g=p(g,h,f,m,E,17,b[14]),m=p(m,g,h,f,x,22,b[15]),f=d(f,m,g,h,e,5,b[16]),h=d(h,f,m,g,t,9,b[17]),g=d(g,h,f,m,C,14,b[18]),m=d(m,g,h,f,c,20,b[19]),f=d(f,m,g,h,r,5,b[20]),h=d(h,f,m,g,B,9,b[21]),g=d(g,h,f,m,x,14,b[22]),m=d(m,g,h,f,z,20,b[23]),f=d(f,m,g,h,A,5,b[24]),h=d(h,f,m,g,E,9,b[25]),g=d(g,h,f,m,k,14,b[26]),m=d(m,g,h,f,v,20,b[27]),f=d(f,m,g,h,D,5,b[28]),h=d(h,f,\nm,g,j,9,b[29]),g=d(g,h,f,m,w,14,b[30]),m=d(m,g,h,f,u,20,b[31]),f=l(f,m,g,h,r,4,b[32]),h=l(h,f,m,g,v,11,b[33]),g=l(g,h,f,m,C,16,b[34]),m=l(m,g,h,f,E,23,b[35]),f=l(f,m,g,h,e,4,b[36]),h=l(h,f,m,g,z,11,b[37]),g=l(g,h,f,m,w,16,b[38]),m=l(m,g,h,f,B,23,b[39]),f=l(f,m,g,h,D,4,b[40]),h=l(h,f,m,g,c,11,b[41]),g=l(g,h,f,m,k,16,b[42]),m=l(m,g,h,f,t,23,b[43]),f=l(f,m,g,h,A,4,b[44]),h=l(h,f,m,g,u,11,b[45]),g=l(g,h,f,m,x,16,b[46]),m=l(m,g,h,f,j,23,b[47]),f=s(f,m,g,h,c,6,b[48]),h=s(h,f,m,g,w,10,b[49]),g=s(g,h,f,m,\nE,15,b[50]),m=s(m,g,h,f,r,21,b[51]),f=s(f,m,g,h,u,6,b[52]),h=s(h,f,m,g,k,10,b[53]),g=s(g,h,f,m,B,15,b[54]),m=s(m,g,h,f,e,21,b[55]),f=s(f,m,g,h,v,6,b[56]),h=s(h,f,m,g,x,10,b[57]),g=s(g,h,f,m,t,15,b[58]),m=s(m,g,h,f,D,21,b[59]),f=s(f,m,g,h,z,6,b[60]),h=s(h,f,m,g,C,10,b[61]),g=s(g,h,f,m,j,15,b[62]),m=s(m,g,h,f,A,21,b[63]);a[0]=a[0]+f|0;a[1]=a[1]+m|0;a[2]=a[2]+g|0;a[3]=a[3]+h|0},_doFinalize:function(){var b=this._data,n=b.words,a=8*this._nDataBytes,c=8*b.sigBytes;n[c>>>5]|=128<<24-c%32;var e=u.floor(a/\n4294967296);n[(c+64>>>9<<4)+15]=(e<<8|e>>>24)&16711935|(e<<24|e>>>8)&4278255360;n[(c+64>>>9<<4)+14]=(a<<8|a>>>24)&16711935|(a<<24|a>>>8)&4278255360;b.sigBytes=4*(n.length+1);this._process();b=this._hash;n=b.words;for(a=0;4>a;a++)c=n[a],n[a]=(c<<8|c>>>24)&16711935|(c<<24|c>>>8)&4278255360;return b},clone:function(){var b=v.clone.call(this);b._hash=this._hash.clone();return b}});t.MD5=v._createHelper(r);t.HmacMD5=v._createHmacHelper(r)})(Math);\n(function(){var u=CryptoJS,p=u.lib,d=p.Base,l=p.WordArray,p=u.algo,s=p.EvpKDF=d.extend({cfg:d.extend({keySize:4,hasher:p.MD5,iterations:1}),init:function(d){this.cfg=this.cfg.extend(d)},compute:function(d,r){for(var p=this.cfg,s=p.hasher.create(),b=l.create(),u=b.words,q=p.keySize,p=p.iterations;u.length<q;){n&&s.update(n);var n=s.update(d).finalize(r);s.reset();for(var a=1;a<p;a++)n=s.finalize(n),s.reset();b.concat(n)}b.sigBytes=4*q;return b}});u.EvpKDF=function(d,l,p){return s.create(p).compute(d,\nl)}})();\nCryptoJS.lib.Cipher||function(u){var p=CryptoJS,d=p.lib,l=d.Base,s=d.WordArray,t=d.BufferedBlockAlgorithm,r=p.enc.Base64,w=p.algo.EvpKDF,v=d.Cipher=t.extend({cfg:l.extend(),createEncryptor:function(e,a){return this.create(this._ENC_XFORM_MODE,e,a)},createDecryptor:function(e,a){return this.create(this._DEC_XFORM_MODE,e,a)},init:function(e,a,b){this.cfg=this.cfg.extend(b);this._xformMode=e;this._key=a;this.reset()},reset:function(){t.reset.call(this);this._doReset()},process:function(e){this._append(e);return this._process()},\nfinalize:function(e){e&&this._append(e);return this._doFinalize()},keySize:4,ivSize:4,_ENC_XFORM_MODE:1,_DEC_XFORM_MODE:2,_createHelper:function(e){return{encrypt:function(b,k,d){return(\"string\"==typeof k?c:a).encrypt(e,b,k,d)},decrypt:function(b,k,d){return(\"string\"==typeof k?c:a).decrypt(e,b,k,d)}}}});d.StreamCipher=v.extend({_doFinalize:function(){return this._process(!0)},blockSize:1});var b=p.mode={},x=function(e,a,b){var c=this._iv;c?this._iv=u:c=this._prevBlock;for(var d=0;d<b;d++)e[a+d]^=\nc[d]},q=(d.BlockCipherMode=l.extend({createEncryptor:function(e,a){return this.Encryptor.create(e,a)},createDecryptor:function(e,a){return this.Decryptor.create(e,a)},init:function(e,a){this._cipher=e;this._iv=a}})).extend();q.Encryptor=q.extend({processBlock:function(e,a){var b=this._cipher,c=b.blockSize;x.call(this,e,a,c);b.encryptBlock(e,a);this._prevBlock=e.slice(a,a+c)}});q.Decryptor=q.extend({processBlock:function(e,a){var b=this._cipher,c=b.blockSize,d=e.slice(a,a+c);b.decryptBlock(e,a);x.call(this,\ne,a,c);this._prevBlock=d}});b=b.CBC=q;q=(p.pad={}).Pkcs7={pad:function(a,b){for(var c=4*b,c=c-a.sigBytes%c,d=c<<24|c<<16|c<<8|c,l=[],n=0;n<c;n+=4)l.push(d);c=s.create(l,c);a.concat(c)},unpad:function(a){a.sigBytes-=a.words[a.sigBytes-1>>>2]&255}};d.BlockCipher=v.extend({cfg:v.cfg.extend({mode:b,padding:q}),reset:function(){v.reset.call(this);var a=this.cfg,b=a.iv,a=a.mode;if(this._xformMode==this._ENC_XFORM_MODE)var c=a.createEncryptor;else c=a.createDecryptor,this._minBufferSize=1;this._mode=c.call(a,\nthis,b&&b.words)},_doProcessBlock:function(a,b){this._mode.processBlock(a,b)},_doFinalize:function(){var a=this.cfg.padding;if(this._xformMode==this._ENC_XFORM_MODE){a.pad(this._data,this.blockSize);var b=this._process(!0)}else b=this._process(!0),a.unpad(b);return b},blockSize:4});var n=d.CipherParams=l.extend({init:function(a){this.mixIn(a)},toString:function(a){return(a||this.formatter).stringify(this)}}),b=(p.format={}).OpenSSL={stringify:function(a){var b=a.ciphertext;a=a.salt;return(a?s.create([1398893684,\n1701076831]).concat(a).concat(b):b).toString(r)},parse:function(a){a=r.parse(a);var b=a.words;if(1398893684==b[0]&&1701076831==b[1]){var c=s.create(b.slice(2,4));b.splice(0,4);a.sigBytes-=16}return n.create({ciphertext:a,salt:c})}},a=d.SerializableCipher=l.extend({cfg:l.extend({format:b}),encrypt:function(a,b,c,d){d=this.cfg.extend(d);var l=a.createEncryptor(c,d);b=l.finalize(b);l=l.cfg;return n.create({ciphertext:b,key:c,iv:l.iv,algorithm:a,mode:l.mode,padding:l.padding,blockSize:a.blockSize,formatter:d.format})},\ndecrypt:function(a,b,c,d){d=this.cfg.extend(d);b=this._parse(b,d.format);return a.createDecryptor(c,d).finalize(b.ciphertext)},_parse:function(a,b){return\"string\"==typeof a?b.parse(a,this):a}}),p=(p.kdf={}).OpenSSL={execute:function(a,b,c,d){d||(d=s.random(8));a=w.create({keySize:b+c}).compute(a,d);c=s.create(a.words.slice(b),4*c);a.sigBytes=4*b;return n.create({key:a,iv:c,salt:d})}},c=d.PasswordBasedCipher=a.extend({cfg:a.cfg.extend({kdf:p}),encrypt:function(b,c,d,l){l=this.cfg.extend(l);d=l.kdf.execute(d,\nb.keySize,b.ivSize);l.iv=d.iv;b=a.encrypt.call(this,b,c,d.key,l);b.mixIn(d);return b},decrypt:function(b,c,d,l){l=this.cfg.extend(l);c=this._parse(c,l.format);d=l.kdf.execute(d,b.keySize,b.ivSize,c.salt);l.iv=d.iv;return a.decrypt.call(this,b,c,d.key,l)}})}();\n(function(){for(var u=CryptoJS,p=u.lib.BlockCipher,d=u.algo,l=[],s=[],t=[],r=[],w=[],v=[],b=[],x=[],q=[],n=[],a=[],c=0;256>c;c++)a[c]=128>c?c<<1:c<<1^283;for(var e=0,j=0,c=0;256>c;c++){var k=j^j<<1^j<<2^j<<3^j<<4,k=k>>>8^k&255^99;l[e]=k;s[k]=e;var z=a[e],F=a[z],G=a[F],y=257*a[k]^16843008*k;t[e]=y<<24|y>>>8;r[e]=y<<16|y>>>16;w[e]=y<<8|y>>>24;v[e]=y;y=16843009*G^65537*F^257*z^16843008*e;b[k]=y<<24|y>>>8;x[k]=y<<16|y>>>16;q[k]=y<<8|y>>>24;n[k]=y;e?(e=z^a[a[a[G^z]]],j^=a[a[j]]):e=j=1}var H=[0,1,2,4,8,\n16,32,64,128,27,54],d=d.AES=p.extend({_doReset:function(){for(var a=this._key,c=a.words,d=a.sigBytes/4,a=4*((this._nRounds=d+6)+1),e=this._keySchedule=[],j=0;j<a;j++)if(j<d)e[j]=c[j];else{var k=e[j-1];j%d?6<d&&4==j%d&&(k=l[k>>>24]<<24|l[k>>>16&255]<<16|l[k>>>8&255]<<8|l[k&255]):(k=k<<8|k>>>24,k=l[k>>>24]<<24|l[k>>>16&255]<<16|l[k>>>8&255]<<8|l[k&255],k^=H[j/d|0]<<24);e[j]=e[j-d]^k}c=this._invKeySchedule=[];for(d=0;d<a;d++)j=a-d,k=d%4?e[j]:e[j-4],c[d]=4>d||4>=j?k:b[l[k>>>24]]^x[l[k>>>16&255]]^q[l[k>>>\n8&255]]^n[l[k&255]]},encryptBlock:function(a,b){this._doCryptBlock(a,b,this._keySchedule,t,r,w,v,l)},decryptBlock:function(a,c){var d=a[c+1];a[c+1]=a[c+3];a[c+3]=d;this._doCryptBlock(a,c,this._invKeySchedule,b,x,q,n,s);d=a[c+1];a[c+1]=a[c+3];a[c+3]=d},_doCryptBlock:function(a,b,c,d,e,j,l,f){for(var m=this._nRounds,g=a[b]^c[0],h=a[b+1]^c[1],k=a[b+2]^c[2],n=a[b+3]^c[3],p=4,r=1;r<m;r++)var q=d[g>>>24]^e[h>>>16&255]^j[k>>>8&255]^l[n&255]^c[p++],s=d[h>>>24]^e[k>>>16&255]^j[n>>>8&255]^l[g&255]^c[p++],t=\nd[k>>>24]^e[n>>>16&255]^j[g>>>8&255]^l[h&255]^c[p++],n=d[n>>>24]^e[g>>>16&255]^j[h>>>8&255]^l[k&255]^c[p++],g=q,h=s,k=t;q=(f[g>>>24]<<24|f[h>>>16&255]<<16|f[k>>>8&255]<<8|f[n&255])^c[p++];s=(f[h>>>24]<<24|f[k>>>16&255]<<16|f[n>>>8&255]<<8|f[g&255])^c[p++];t=(f[k>>>24]<<24|f[n>>>16&255]<<16|f[g>>>8&255]<<8|f[h&255])^c[p++];n=(f[n>>>24]<<24|f[g>>>16&255]<<16|f[h>>>8&255]<<8|f[k&255])^c[p++];a[b]=q;a[b+1]=s;a[b+2]=t;a[b+3]=n},keySize:8});u.AES=p._createHelper(d)})();\n","/*\nCryptoJS v3.1.2\ncode.google.com/p/crypto-js\n(c) 2009-2013 by Jeff Mott. All rights reserved.\ncode.google.com/p/crypto-js/wiki/License\n*/\nvar CryptoJS=CryptoJS||function(h,s){var f={},t=f.lib={},g=function(){},j=t.Base={extend:function(a){g.prototype=this;var c=new g;a&&c.mixIn(a);c.hasOwnProperty(\"init\")||(c.init=function(){c.$super.init.apply(this,arguments)});c.init.prototype=c;c.$super=this;return c},create:function(){var a=this.extend();a.init.apply(a,arguments);return a},init:function(){},mixIn:function(a){for(var c in a)a.hasOwnProperty(c)&&(this[c]=a[c]);a.hasOwnProperty(\"toString\")&&(this.toString=a.toString)},clone:function(){return this.init.prototype.extend(this)}},\nq=t.WordArray=j.extend({init:function(a,c){a=this.words=a||[];this.sigBytes=c!=s?c:4*a.length},toString:function(a){return(a||u).stringify(this)},concat:function(a){var c=this.words,d=a.words,b=this.sigBytes;a=a.sigBytes;this.clamp();if(b%4)for(var e=0;e<a;e++)c[b+e>>>2]|=(d[e>>>2]>>>24-8*(e%4)&255)<<24-8*((b+e)%4);else if(65535<d.length)for(e=0;e<a;e+=4)c[b+e>>>2]=d[e>>>2];else c.push.apply(c,d);this.sigBytes+=a;return this},clamp:function(){var a=this.words,c=this.sigBytes;a[c>>>2]&=4294967295<<\n32-8*(c%4);a.length=h.ceil(c/4)},clone:function(){var a=j.clone.call(this);a.words=this.words.slice(0);return a},random:function(a){for(var c=[],d=0;d<a;d+=4)c.push(4294967296*h.random()|0);return new q.init(c,a)}}),v=f.enc={},u=v.Hex={stringify:function(a){var c=a.words;a=a.sigBytes;for(var d=[],b=0;b<a;b++){var e=c[b>>>2]>>>24-8*(b%4)&255;d.push((e>>>4).toString(16));d.push((e&15).toString(16))}return d.join(\"\")},parse:function(a){for(var c=a.length,d=[],b=0;b<c;b+=2)d[b>>>3]|=parseInt(a.substr(b,\n2),16)<<24-4*(b%8);return new q.init(d,c/2)}},k=v.Latin1={stringify:function(a){var c=a.words;a=a.sigBytes;for(var d=[],b=0;b<a;b++)d.push(String.fromCharCode(c[b>>>2]>>>24-8*(b%4)&255));return d.join(\"\")},parse:function(a){for(var c=a.length,d=[],b=0;b<c;b++)d[b>>>2]|=(a.charCodeAt(b)&255)<<24-8*(b%4);return new q.init(d,c)}},l=v.Utf8={stringify:function(a){try{return decodeURIComponent(escape(k.stringify(a)))}catch(c){throw Error(\"Malformed UTF-8 data\");}},parse:function(a){return k.parse(unescape(encodeURIComponent(a)))}},\nx=t.BufferedBlockAlgorithm=j.extend({reset:function(){this._data=new q.init;this._nDataBytes=0},_append:function(a){\"string\"==typeof a&&(a=l.parse(a));this._data.concat(a);this._nDataBytes+=a.sigBytes},_process:function(a){var c=this._data,d=c.words,b=c.sigBytes,e=this.blockSize,f=b/(4*e),f=a?h.ceil(f):h.max((f|0)-this._minBufferSize,0);a=f*e;b=h.min(4*a,b);if(a){for(var m=0;m<a;m+=e)this._doProcessBlock(d,m);m=d.splice(0,a);c.sigBytes-=b}return new q.init(m,b)},clone:function(){var a=j.clone.call(this);\na._data=this._data.clone();return a},_minBufferSize:0});t.Hasher=x.extend({cfg:j.extend(),init:function(a){this.cfg=this.cfg.extend(a);this.reset()},reset:function(){x.reset.call(this);this._doReset()},update:function(a){this._append(a);this._process();return this},finalize:function(a){a&&this._append(a);return this._doFinalize()},blockSize:16,_createHelper:function(a){return function(c,d){return(new a.init(d)).finalize(c)}},_createHmacHelper:function(a){return function(c,d){return(new w.HMAC.init(a,\nd)).finalize(c)}}});var w=f.algo={};return f}(Math);\n(function(h){for(var s=CryptoJS,f=s.lib,t=f.WordArray,g=f.Hasher,f=s.algo,j=[],q=[],v=function(a){return 4294967296*(a-(a|0))|0},u=2,k=0;64>k;){var l;a:{l=u;for(var x=h.sqrt(l),w=2;w<=x;w++)if(!(l%w)){l=!1;break a}l=!0}l&&(8>k&&(j[k]=v(h.pow(u,0.5))),q[k]=v(h.pow(u,1/3)),k++);u++}var a=[],f=f.SHA256=g.extend({_doReset:function(){this._hash=new t.init(j.slice(0))},_doProcessBlock:function(c,d){for(var b=this._hash.words,e=b[0],f=b[1],m=b[2],h=b[3],p=b[4],j=b[5],k=b[6],l=b[7],n=0;64>n;n++){if(16>n)a[n]=\nc[d+n]|0;else{var r=a[n-15],g=a[n-2];a[n]=((r<<25|r>>>7)^(r<<14|r>>>18)^r>>>3)+a[n-7]+((g<<15|g>>>17)^(g<<13|g>>>19)^g>>>10)+a[n-16]}r=l+((p<<26|p>>>6)^(p<<21|p>>>11)^(p<<7|p>>>25))+(p&j^~p&k)+q[n]+a[n];g=((e<<30|e>>>2)^(e<<19|e>>>13)^(e<<10|e>>>22))+(e&f^e&m^f&m);l=k;k=j;j=p;p=h+r|0;h=m;m=f;f=e;e=r+g|0}b[0]=b[0]+e|0;b[1]=b[1]+f|0;b[2]=b[2]+m|0;b[3]=b[3]+h|0;b[4]=b[4]+p|0;b[5]=b[5]+j|0;b[6]=b[6]+k|0;b[7]=b[7]+l|0},_doFinalize:function(){var a=this._data,d=a.words,b=8*this._nDataBytes,e=8*a.sigBytes;\nd[e>>>5]|=128<<24-e%32;d[(e+64>>>9<<4)+14]=h.floor(b/4294967296);d[(e+64>>>9<<4)+15]=b;a.sigBytes=4*d.length;this._process();return this._hash},clone:function(){var a=g.clone.call(this);a._hash=this._hash.clone();return a}});s.SHA256=g._createHelper(f);s.HmacSHA256=g._createHmacHelper(f)})(Math);\n","/*\nCryptoJS v3.1.2\ncode.google.com/p/crypto-js\n(c) 2009-2013 by Jeff Mott. All rights reserved.\ncode.google.com/p/crypto-js/wiki/License\n*/\nvar CryptoJS=CryptoJS||function(a,m){var r={},f=r.lib={},g=function(){},l=f.Base={extend:function(a){g.prototype=this;var b=new g;a&&b.mixIn(a);b.hasOwnProperty(\"init\")||(b.init=function(){b.$super.init.apply(this,arguments)});b.init.prototype=b;b.$super=this;return b},create:function(){var a=this.extend();a.init.apply(a,arguments);return a},init:function(){},mixIn:function(a){for(var b in a)a.hasOwnProperty(b)&&(this[b]=a[b]);a.hasOwnProperty(\"toString\")&&(this.toString=a.toString)},clone:function(){return this.init.prototype.extend(this)}},\np=f.WordArray=l.extend({init:function(a,b){a=this.words=a||[];this.sigBytes=b!=m?b:4*a.length},toString:function(a){return(a||q).stringify(this)},concat:function(a){var b=this.words,d=a.words,c=this.sigBytes;a=a.sigBytes;this.clamp();if(c%4)for(var j=0;j<a;j++)b[c+j>>>2]|=(d[j>>>2]>>>24-8*(j%4)&255)<<24-8*((c+j)%4);else if(65535<d.length)for(j=0;j<a;j+=4)b[c+j>>>2]=d[j>>>2];else b.push.apply(b,d);this.sigBytes+=a;return this},clamp:function(){var n=this.words,b=this.sigBytes;n[b>>>2]&=4294967295<<\n32-8*(b%4);n.length=a.ceil(b/4)},clone:function(){var a=l.clone.call(this);a.words=this.words.slice(0);return a},random:function(n){for(var b=[],d=0;d<n;d+=4)b.push(4294967296*a.random()|0);return new p.init(b,n)}}),y=r.enc={},q=y.Hex={stringify:function(a){var b=a.words;a=a.sigBytes;for(var d=[],c=0;c<a;c++){var j=b[c>>>2]>>>24-8*(c%4)&255;d.push((j>>>4).toString(16));d.push((j&15).toString(16))}return d.join(\"\")},parse:function(a){for(var b=a.length,d=[],c=0;c<b;c+=2)d[c>>>3]|=parseInt(a.substr(c,\n2),16)<<24-4*(c%8);return new p.init(d,b/2)}},G=y.Latin1={stringify:function(a){var b=a.words;a=a.sigBytes;for(var d=[],c=0;c<a;c++)d.push(String.fromCharCode(b[c>>>2]>>>24-8*(c%4)&255));return d.join(\"\")},parse:function(a){for(var b=a.length,d=[],c=0;c<b;c++)d[c>>>2]|=(a.charCodeAt(c)&255)<<24-8*(c%4);return new p.init(d,b)}},fa=y.Utf8={stringify:function(a){try{return decodeURIComponent(escape(G.stringify(a)))}catch(b){throw Error(\"Malformed UTF-8 data\");}},parse:function(a){return G.parse(unescape(encodeURIComponent(a)))}},\nh=f.BufferedBlockAlgorithm=l.extend({reset:function(){this._data=new p.init;this._nDataBytes=0},_append:function(a){\"string\"==typeof a&&(a=fa.parse(a));this._data.concat(a);this._nDataBytes+=a.sigBytes},_process:function(n){var b=this._data,d=b.words,c=b.sigBytes,j=this.blockSize,l=c/(4*j),l=n?a.ceil(l):a.max((l|0)-this._minBufferSize,0);n=l*j;c=a.min(4*n,c);if(n){for(var h=0;h<n;h+=j)this._doProcessBlock(d,h);h=d.splice(0,n);b.sigBytes-=c}return new p.init(h,c)},clone:function(){var a=l.clone.call(this);\na._data=this._data.clone();return a},_minBufferSize:0});f.Hasher=h.extend({cfg:l.extend(),init:function(a){this.cfg=this.cfg.extend(a);this.reset()},reset:function(){h.reset.call(this);this._doReset()},update:function(a){this._append(a);this._process();return this},finalize:function(a){a&&this._append(a);return this._doFinalize()},blockSize:16,_createHelper:function(a){return function(b,d){return(new a.init(d)).finalize(b)}},_createHmacHelper:function(a){return function(b,d){return(new ga.HMAC.init(a,\nd)).finalize(b)}}});var ga=r.algo={};return r}(Math);\n(function(a){var m=CryptoJS,r=m.lib,f=r.Base,g=r.WordArray,m=m.x64={};m.Word=f.extend({init:function(a,p){this.high=a;this.low=p}});m.WordArray=f.extend({init:function(l,p){l=this.words=l||[];this.sigBytes=p!=a?p:8*l.length},toX32:function(){for(var a=this.words,p=a.length,f=[],q=0;q<p;q++){var G=a[q];f.push(G.high);f.push(G.low)}return g.create(f,this.sigBytes)},clone:function(){for(var a=f.clone.call(this),p=a.words=this.words.slice(0),g=p.length,q=0;q<g;q++)p[q]=p[q].clone();return a}})})();\n(function(){function a(){return g.create.apply(g,arguments)}for(var m=CryptoJS,r=m.lib.Hasher,f=m.x64,g=f.Word,l=f.WordArray,f=m.algo,p=[a(1116352408,3609767458),a(1899447441,602891725),a(3049323471,3964484399),a(3921009573,2173295548),a(961987163,4081628472),a(1508970993,3053834265),a(2453635748,2937671579),a(2870763221,3664609560),a(3624381080,2734883394),a(310598401,1164996542),a(607225278,1323610764),a(1426881987,3590304994),a(1925078388,4068182383),a(2162078206,991336113),a(2614888103,633803317),\na(3248222580,3479774868),a(3835390401,2666613458),a(4022224774,944711139),a(264347078,2341262773),a(604807628,2007800933),a(770255983,1495990901),a(1249150122,1856431235),a(1555081692,3175218132),a(1996064986,2198950837),a(2554220882,3999719339),a(2821834349,766784016),a(2952996808,2566594879),a(3210313671,3203337956),a(3336571891,1034457026),a(3584528711,2466948901),a(113926993,3758326383),a(338241895,168717936),a(666307205,1188179964),a(773529912,1546045734),a(1294757372,1522805485),a(1396182291,\n2643833823),a(1695183700,2343527390),a(1986661051,1014477480),a(2177026350,1206759142),a(2456956037,344077627),a(2730485921,1290863460),a(2820302411,3158454273),a(3259730800,3505952657),a(3345764771,106217008),a(3516065817,3606008344),a(3600352804,1432725776),a(4094571909,1467031594),a(275423344,851169720),a(430227734,3100823752),a(506948616,1363258195),a(659060556,3750685593),a(883997877,3785050280),a(958139571,3318307427),a(1322822218,3812723403),a(1537002063,2003034995),a(1747873779,3602036899),\na(1955562222,1575990012),a(2024104815,1125592928),a(2227730452,2716904306),a(2361852424,442776044),a(2428436474,593698344),a(2756734187,3733110249),a(3204031479,2999351573),a(3329325298,3815920427),a(3391569614,3928383900),a(3515267271,566280711),a(3940187606,3454069534),a(4118630271,4000239992),a(116418474,1914138554),a(174292421,2731055270),a(289380356,3203993006),a(460393269,320620315),a(685471733,587496836),a(852142971,1086792851),a(1017036298,365543100),a(1126000580,2618297676),a(1288033470,\n3409855158),a(1501505948,4234509866),a(1607167915,987167468),a(1816402316,1246189591)],y=[],q=0;80>q;q++)y[q]=a();f=f.SHA512=r.extend({_doReset:function(){this._hash=new l.init([new g.init(1779033703,4089235720),new g.init(3144134277,2227873595),new g.init(1013904242,4271175723),new g.init(2773480762,1595750129),new g.init(1359893119,2917565137),new g.init(2600822924,725511199),new g.init(528734635,4215389547),new g.init(1541459225,327033209)])},_doProcessBlock:function(a,f){for(var h=this._hash.words,\ng=h[0],n=h[1],b=h[2],d=h[3],c=h[4],j=h[5],l=h[6],h=h[7],q=g.high,m=g.low,r=n.high,N=n.low,Z=b.high,O=b.low,$=d.high,P=d.low,aa=c.high,Q=c.low,ba=j.high,R=j.low,ca=l.high,S=l.low,da=h.high,T=h.low,v=q,s=m,H=r,E=N,I=Z,F=O,W=$,J=P,w=aa,t=Q,U=ba,K=R,V=ca,L=S,X=da,M=T,x=0;80>x;x++){var B=y[x];if(16>x)var u=B.high=a[f+2*x]|0,e=B.low=a[f+2*x+1]|0;else{var u=y[x-15],e=u.high,z=u.low,u=(e>>>1|z<<31)^(e>>>8|z<<24)^e>>>7,z=(z>>>1|e<<31)^(z>>>8|e<<24)^(z>>>7|e<<25),D=y[x-2],e=D.high,k=D.low,D=(e>>>19|k<<13)^\n(e<<3|k>>>29)^e>>>6,k=(k>>>19|e<<13)^(k<<3|e>>>29)^(k>>>6|e<<26),e=y[x-7],Y=e.high,C=y[x-16],A=C.high,C=C.low,e=z+e.low,u=u+Y+(e>>>0<z>>>0?1:0),e=e+k,u=u+D+(e>>>0<k>>>0?1:0),e=e+C,u=u+A+(e>>>0<C>>>0?1:0);B.high=u;B.low=e}var Y=w&U^~w&V,C=t&K^~t&L,B=v&H^v&I^H&I,ha=s&E^s&F^E&F,z=(v>>>28|s<<4)^(v<<30|s>>>2)^(v<<25|s>>>7),D=(s>>>28|v<<4)^(s<<30|v>>>2)^(s<<25|v>>>7),k=p[x],ia=k.high,ea=k.low,k=M+((t>>>14|w<<18)^(t>>>18|w<<14)^(t<<23|w>>>9)),A=X+((w>>>14|t<<18)^(w>>>18|t<<14)^(w<<23|t>>>9))+(k>>>0<M>>>\n0?1:0),k=k+C,A=A+Y+(k>>>0<C>>>0?1:0),k=k+ea,A=A+ia+(k>>>0<ea>>>0?1:0),k=k+e,A=A+u+(k>>>0<e>>>0?1:0),e=D+ha,B=z+B+(e>>>0<D>>>0?1:0),X=V,M=L,V=U,L=K,U=w,K=t,t=J+k|0,w=W+A+(t>>>0<J>>>0?1:0)|0,W=I,J=F,I=H,F=E,H=v,E=s,s=k+e|0,v=A+B+(s>>>0<k>>>0?1:0)|0}m=g.low=m+s;g.high=q+v+(m>>>0<s>>>0?1:0);N=n.low=N+E;n.high=r+H+(N>>>0<E>>>0?1:0);O=b.low=O+F;b.high=Z+I+(O>>>0<F>>>0?1:0);P=d.low=P+J;d.high=$+W+(P>>>0<J>>>0?1:0);Q=c.low=Q+t;c.high=aa+w+(Q>>>0<t>>>0?1:0);R=j.low=R+K;j.high=ba+U+(R>>>0<K>>>0?1:0);S=l.low=\nS+L;l.high=ca+V+(S>>>0<L>>>0?1:0);T=h.low=T+M;h.high=da+X+(T>>>0<M>>>0?1:0)},_doFinalize:function(){var a=this._data,f=a.words,h=8*this._nDataBytes,g=8*a.sigBytes;f[g>>>5]|=128<<24-g%32;f[(g+128>>>10<<5)+30]=Math.floor(h/4294967296);f[(g+128>>>10<<5)+31]=h;a.sigBytes=4*f.length;this._process();return this._hash.toX32()},clone:function(){var a=r.clone.call(this);a._hash=this._hash.clone();return a},blockSize:32});m.SHA512=r._createHelper(f);m.HmacSHA512=r._createHmacHelper(f)})();\n","/**\n * Network parameters - see CommunicationStability.\n * \n * @author rvp\n */\nvar NETWORK = {\n\t\n\t/**\n\t * Constant.\n\t * This is the lower bound for the NETWORK.minRequestTime.\n\t */\n\tMIN_REQUEST_TIME_LOWER_BOUND: 100,\n\t\n\t/**\n\t * Constant.\n\t * This is the upper bound for the NETWORK.minRequestTime.\n\t */\n\tMIN_REQUEST_TIME_UPPER_BOUND: 1000,\n\t\n\t/**\n\t * Constant.\n\t * Interval: maximum interval for requesting next camera frame after the last frame is received from the server.\n\t * This is the upper bound for the NETWORK.requestTime which can grow exponentially for cameras that are currently not working and do not receive frames. \n\t */\n\tMAX_REQUEST_TIME: 10000,\n\t\n\t/**\n\t * Constant.\n\t * Interval: maximum interval for requesting next camera frame after the last frame is not received due to a HTTP error. \n\t */\n\tMAX_REQUEST_TIME_ON_FAILURE: 4000,\n\t\n\t/**\n\t * Constant.\n\t * Coefficient: when the server returns only header instead of frame for a certain camera stream, the next frame will be requested with delay, determined by this coefficient. \n\t */\n\tREQUEST_TIME_GROW_PER_EMPTY_FRAME: 1.32,\n\t\n\t/**\n\t * Constant.\n\t * Coefficient: how much the NETWORK.requestTime and NETWORK.requestTimeOnFailure grow depending on the number of recent HTTP errors \n\t */\n\tREQUEST_TIME_GROW_PER_HTTP_ERROR: 10,\n\n\t/**\n\t * Constant.\n\t * Coefficient: how much the NETWORK.minRequestTime grows when HTTP errors occur\n\t */\n\tMIN_REQUEST_TIME_GROW: 1.4,\n\t\n\t/**\n\t * Constant.\n\t * Difference between dates: used to reduce NETWORK.minRequestTime if no HTTP errors have recently occurred. \n\t */\n\tMIN_REQUEST_TIME_DECREASE: 30000,\n\t\n\t/**\n\t * Constant.\n\t * Difference between dates: used to increase NETWORK.minRequestTime if HTTP errors have recently occurred. \n\t */\n\tMIN_REQUEST_TIME_INCREASE: 15000,\n\t\n\t/**\n\t * Constant.\n\t * Denominator: determines how fast the HTTP errors on the video channel become obsolete. \n\t * errors -= 1 + errors / pace\n\t */\n\tVIDEO_PROTOCOL_RECOVER_PACE: 13,\n\t\n\t/**\n\t * Constant.\n\t * Interval: monitors the number of recent HTTP errors and modifies the NETWORK.minRequestTime if no errors have recently occurred. \n\t */\n\tVIDEO_FAILS_MONITOR: 7000,\n\t\n\t/**\n\t * Variable.\n\t * Interval: minimal interval for requesting next camera frame after the last frame is received from the server, i.e. the minimal value of NETWORK.requestTime.\n\t * It changes based on the number of HTTP request errors for a given time. \n\t */\n\tminRequestTime: 10,\n\t\n\t/**\n\t * Variable.\n\t * Interval: current interval for requesting next camera frame after the last frame is received from the server.\n\t * Calculated based on the NETWORK.minRequestTime and the number of HTTP request errors for a given time. \n\t */\n\trequestTime: 10,\n\t\n\t/**\n\t * Variable.\n\t * Interval: current interval for requesting next camera frame after the last frame is not received due to a HTTP error. \n\t */\n\trequestTimeOnFailure: 2000,\n\t\n\t/**\n\t * Variable.\n\t * Interval: current interval for sending empty message through WebSocket to the server. This will help the reconnection of WebSockets when network ticks occure. \n\t */\n\twebsocketSendMessage: 1000\n};\n","/**\n * Encrypt/Decrtpt a string based on the user share key taken at login\n * \n * @author \t\ttvh\n */\nXPMobileSDK.library.SecureString = {\n\n\tsharedKey: null,\n\t\n\t/**\n\t * Creates an encrypted string using the Diffie-Hellmen shared key and random initialization vector\n\t * Both vector and encrypted string are concatenated using \":\".\n\t * First part is base64 encoded initialization vector and the second one is AES ancrypted string that use the initialization vector and shared key\n\t *\n\t * @param\t\t\tstring\t\tstring\t\t\tString to encrypt\n\t * @return\t\t\t\t\t\tstring\t\t\tEncrypted string\n\t */\n\tencrypt: function(string) {\n\t\tvar key = this.generateKey();\n\t\tvar iv = CryptoJS.lib.WordArray.random(16);\n\t\tvar params = { 'iv': iv };\n\t\tif (Settings.DefaultEncryptionPadding && CryptoJS.pad[Settings.DefaultEncryptionPadding]) {\r\n\t\t    params.padding = CryptoJS.pad[Settings.DefaultEncryptionPadding];\r\n\t\t}\n\t\tvar cip = CryptoJS.AES.encrypt(string, CryptoJS.SHA256(key), params);\n\t\treturn cip.iv.toString(CryptoJS.enc.Base64) + ':' + cip.ciphertext.toString(CryptoJS.enc.Base64);\n\t},\n\t\n\t/**\n\t * Decrypt a string which was encrypted byt the encrypt method\n\t *\n\t * @param\t\t\tstring\t\tstring\t\t\tBase64 string to decrypt\n\t * @return\t\t\t\t\t\tstring\t\t\tDecrypted string\n\t */\n\tdecrypt: function(string) {\n\t\tvar result = '';\n\t\tif(string.indexOf(':') > -1) {\n\t\t\n\t\t\tvar key = this.generateKey();\n\t\t\tvar data = string.split(':');\n\t\t\tvar iv = CryptoJS.enc.Base64.parse(data[0]);\n\t\t\tvar cip = CryptoJS.enc.Base64.parse(data[1]);\n\t\t\tvar params = { 'iv': iv };\n\t\t\tif (Settings.DefaultEncryptionPadding && CryptoJS.pad[Settings.DefaultEncryptionPadding]) {\r\n\t\t\t    params.padding = CryptoJS.pad[Settings.DefaultEncryptionPadding];\r\n\t\t\t}\n\t\t\tvar result = CryptoJS.AES.decrypt({ciphertext: cip}, CryptoJS.SHA256(key),params);\n\t\t\tresult = CryptoJS.enc.Utf8.stringify(result);\n\t\t}\n\t\treturn result;\n\t},\n\t\n\t/**\n\t * Generate a key based on the shared key used in Diffie-Hellman that will be used to AES ancrypt the string\n\t *\n\t * @return\t\t\tstring\t\t\tSHA256 encrypted string\n\t */\n\tgenerateKey: function() {\n\t\tvar sharedKey = '';\n\t\tif(!this.sharedKey) {\n\t\t    if (XPMobileSDK.library.Connection.dh) {\n\t\t\t    sharedKey = this.sharedKey = XPMobileSDK.library.Connection.dh.getSharedKey().toUpperCase();\n\t\t\t}\n\t\t    else if (XPMobileSDK.library.CHAP.sharedKey) {\n\t\t        sharedKey = this.sharedKey = XPMobileSDK.library.CHAP.sharedKey.toUpperCase();\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tsharedKey = this.sharedKey;\n\t\t}\n\t\treturn sharedKey;\n\t}\n\t\n};","/**\n * Implement the CHAP security alorythm that will secure the connection(session) ID\n * \n *  This library requires SHA512 (http://code.google.com/p/crypto-js/#SHA-2)\n *\n * @see\t\t\thttp://en.wikipedia.org/wiki/Challenge-Handshake_Authentication_Protocol\n * \n * @author \t\ttvh\n */\n \nXPMobileSDK.library.CHAP = {\n\t/**\n\t * Stores a list of salts that will be used for hashing\n\t */\n\tchallenges: [],\n\t\n\t/**\n\t * Diffie-Hellman shared key\n\t */\n\tsharedKey: '',\n\t\n\t/**\n\t * Minimum amount of challenges that needs to be kept in cache\n\t */\n\tminChallenges: 200,\n\n\t/**\n\t * Amount of challenges kept in the list betor the system halts. Set in the initialize method\n\t */\n\thaltThreshold: 0,\n\n\t/**\n\t * Flag defining if the system id haled for lack of challenges\n\t */\n\thalt: false,\n\n\t/**\n\t * Flag indicating that the component is waiting for challenges and not to request more until the data is received\n\t */\n\twaitingForData: false,\n\t\n\t/**\n\t * Constructor\n\t */\n\tinitialize: function () {\n\t\tthis.haltThreshold = this.minChallenges * 5 / 100,\n\t\tXPMobileSDK.library.Connection.addObserver(this);\n\t},\n\t\n\t/**\n\t * Start the checking mechanism of the challenges status\n\t */\n\tstart: () =>  { },\n\t\n\t/**\n\t * Check challenges\n\t */\n\tcleanUp: function() {\n\t\t// Uncomment this line if sorting is required.\n\t\t// Currently it is made without sorting because the rule is first in last out from the array\n\t\t//this.challenges.sort(this.sort);\n\n\t\tif (!XPMobileSDK.library.Connection.connectionId) return;\n\t\tif (this.waitingForData) return;\n\t    \n\t\tif(this.challenges.length > 0) {\r\n\t\t    for(var i = 0; i < this.challenges.length; i++) {\r\n\t\t        if (!this.challenges[i].isValid()) {\r\n\t\t            this.challenges[i].destroy();\r\n\t\t            this.challenges.splice(i, 1);\r\n\t\t        }\r\n\t\t    }\r\n\t\t}\n\t\tif(this.challenges.length < this.minChallenges) {\n\t\t\tvar params = {NumChallenges: 100};\n\t\t\tif (this.challenges.length <= this.haltThreshold) {\n\t\t\t\tparams.Reset = 'Yes';\n\t\t\t}\n\t\t\tthis.waitingForData = true;\n\t\t\tXPMobileSDK.requestChallenges(params, () => {\n\t\t\t\tthis.waitingForData = false;\n\t\t\t});\n\t\t}\n\t},\n\t\n\t/**\n\t * Add new challenges\n\t *\n\t * @param\tchallenges\t\tarray\t\tList of challenges\n\t */\n\tadd: function (challenges) {\r\n\t    \n\t\tif(typeof challenges == 'string') {\n\t\t\tvar challenge = new XPMobileSDK.library.Challenge(challenges);\n\t\t\tthis.challenges.push(challenge);\n\t\t}\n\t\telse if(typeof challenges == 'object' && challenges.length > 0) {\n\t\t\tfor(var i = 0; i < challenges.length; i++) {\n\t\t\t\tvar challenge = new XPMobileSDK.library.Challenge(challenges[i]);\n\t\t\t\tthis.challenges.push(challenge);\n\t\t\t}\n\t\t}\n\t\tthis.start();\n\t},\n\t\n\t/**\n\t * Try to find a valid challenge\n\t *\n\t * @return\t\tstring\t\tValid challege value\n\t */\n\ttakeValidChallenge: function () {\n\t\tthis.cleanUp();\n\t    if(this.challenges.length > 0) {\n\t        for (var i = 0; i < this.challenges.length; i++) {\n\n\t\t\t\tvar challenge = this.challenges.shift();\n\n\t\t\t\tif (this.challenges.length < this.haltThreshold) {\n\t\t\t\t\tthis.haltSystem();\r\n\t\t\t\t} else {\n\t\t\t\t\tthis.unHaltSystem();\r\n                }\n\n            if (challenge.isValid()) {\n              logger.log('Challenge:' + challenge.getValue(), 'Seconds until expire:' + challenge.ttl);\n\t                return challenge;\n\t            }\n\t\t\t\tchallenge.destroy();\n\t        }\n\t    }\n\t    else {\n\t        logger.warn('No challenges in the list!');\n\t        return {getValue: function(){}, getTime: function(){}};\n\t    }\n\t},\n\t\n\t/**\n\t * Export all challenges. Used for stored in the localStorage when page is reloaded\n\t *\n\t * @return\t\tarray\t\tArray of all challeges\n\t */\n\texportAll: function() {\n\t\tvar result = [];\n\t\tthis.challenges.forEach(function(challenge){\n\t\t\tvar value = challenge.getValue();\n\t\t\tif(value) {\n\t\t\t\tresult.push(value);\n\t\t\t}\n\t\t});\n\t\treturn result;\n\t},\n\t\n\t/**\n\t * Sort an array of Challenge object based on their expiration time.\n\t *\n\t * @param\tfirst\t\tobject\t\tChallenge object\n\t * @param\tsecond\t\tobject\t\tChallenge object\n\t */\n\tsort: function(first, second) {\n\t\treturn second.getTime() - first.getTime();\n\t},\n\t\n\t/**\n\t * Calculate the challenge answer\n\t */\n\tcalculate: function() {\n\t    var challenge = this.takeValidChallenge();\n\n\t    if (challenge)\n\t    {\r\n\t        return {\r\n\t            'Challenge': challenge.getValue(),\n\t            'ChalAnswer': CryptoJS.SHA512((challenge.getValue() + this.sharedKey).toUpperCase()).toString(CryptoJS.enc.Base64),\n\t            'timeout': (challenge.ttl - challenge.getTime()) * 1000\r\n\t        };\r\n\t    }\n\n\t    return {\r\n\t        'Challenge': undefined,\n\t        'ChalAnswer': undefined,\n\t        'timeout': undefined\r\n\t    };\n\t},\n\t\n\t/**\n\t * Connection state observing\n\t */ \n\tconnectionLostConnection: function () {\n\t\tthis.destroy();\n\t},\n\t\n\t/**\n\t * Connection state observing\n\t */ \n\tconnectionDidDisconnect: function () {\n\t\tthis.destroy();\n\t},\n\n\thaltSystem() {\n\t\tdocument.getElementById('systemErrorModal').setAttribute(\"show\", true);\n\t\tthis.halt = true;\n\t},\n\n\tunHaltSystem() {\n\t\tif (!this.halt) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.halt = false;\n\t\tdocument.getElementById('systemErrorModal').removeAttribute(\"show\");\n\t},\n\t\n\t/**\n\t * Connection request observer\n\t */ \n\tconnectionRequestSucceeded: function(request, response) {\n\t    if (XPMobileSDK.library.Connection.CHAPSupported == 'Yes'\n            && response\n            && response.parameters\n            && response.parameters.Challenge\n            && XPMobileSDK.library.Connection.connectionId) {\n\t\t\tthis.add(response.parameters.Challenge);\n\t\t}\n\t},\n\t\n\t/**\n\t * Destructor\n\t */\n\tdestroy: function() {\n\t\tif(this.challenges.length > 0) {\n\t\t\tfor(var i = 0; i < this.challenges.length; i++) {\n\t\t\t\tvar challenge = this.challenges.shift();\n\t\t\t\tchallenge.destroy();\n\t\t\t}\n\t\t}\n\t\tthis.challenges = [];\n\t\tthis.unHaltSystem();\n\t\tXPMobileSDK.library.SecureString.sharedKey = null;\n\t}\n};","/**\n * Generate a challenge that will be used to hash connectino id\n * \n * @param \t\tvalue\t\t\tstring\t\tValue of the challenge\n * @author \t\ttvh\n */\nXPMobileSDK.library.Challenge = function(value) {\n\t/**\n\t * UTC time when challenge received\n\t * \n\t * @var\t\t\tDate\n\t * @access\t\tpublic\n\t */\n\tvar date = Date.now();\n\t\n\t/**\n\t * Time to live constant - in seconds\n\t * \n\t * @var\t\t\tinteger\n\t * @access\t\tpublic\n\t */\n\tthis.ttl = 59 * 60; // 5 * Connection.serverTimeout;\n\n\n\t/**\n\t * Check if the challenge is valid or not\n\t * \n\t * @access\t\t\t\t\tpublic\n\t * @return\t\t\t\t\tboolean\t\ttrue if challenge is suitable for usage / false otherwise\n\t */\n\tthis.isValid = function () {\n\t\treturn this.getTime() / 1000 < this.ttl;\n\t};\n\t\n\n\t/**\n\t * Return the value of the challege\n\t * \n\t * @access\t\t\t\t\tpublic\n\t * @return\t\t\t\t\tstring\t\tValue of the challenge\n\t */\n\tthis.getValue = function() {\n\t\treturn value;\n\t};\n\t\n\t/**\n\t * Return the time in seconds of how long we keep the challenge in memory\n\t * \n\t * @access\t\t\t\t\tpublic\n\t * @return\t\t\t\t\tnumber\t\tseconds\n\t */\n\tthis.getTime = function() {\n\t\treturn Date.now() - date;\n\t};\n\t\n\t/**\n\t * Destructor\n\t * \n\t * @access\t\t\t\t\tpublic\n\t */\n\tthis.destroy = function() {\n\t};\n\n};","/**\n * Implementing Diffie Hellman algorithm for exchange shared key between two parties\n * \n *  This library requires BigInt (http://www.leemon.com/crypto/BigInt.js) and \n *  Advanced Encryption Standard library (http://crypto-js.googlecode.com/svn/tags/3.1/build/rollups/aes.js) \n *\n * @see\t\t\thttp://en.wikipedia.org/wiki/Diffie%E2%80%93Hellman_key_exchange\n * \n * @author \t\ttvh <tvh@milestonesys.com>\n */\n\nXPMobileSDK.library.DiffieHellman = function(params) {\n\t/**\n\t * Server and client prime key\n\t * \n\t * @var\t\t\tstring\n\t * @access\t\tprivate\n\t */\n    var primeKey = {\n        1024: \"F488FD584E49DBCD20B49DE49107366B336C380D451D0F7C88B31C7C5B2D8EF6F3C923C043F0A55B188D8EBB558CB85D38D334FD7C175743A31D186CDE33212CB52AFF3CE1B1294018118D7C84A70A72D686C40319C807297ACA950CD9969FABD00A509B0246D3083D66A45D419F9C7CBD894B221926BAABA25EC355E92F78C7\",\n        2048: \"87A8E61DB4B6663CFFBBD19C651959998CEEF608660DD0F25D2CEED4435E3B00E00DF8F1D61957D4FAF7DF4561B2AA3016C3D91134096FAA3BF4296D830E9A7C209E0C6497517ABD5A8A9D306BCF67ED91F9E6725B4758C022E0B1EF4275BF7B6C5BFC11D45F9088B941F54EB1E59BB8BC39A0BF12307F5C4FDB70C581B23F76B63ACAE1CAA6B7902D52526735488A0EF13C6D9A51BFA4AB3AD8347796524D8EF6A167B5A41825D967E144E5140564251CCACB83E6B486F6B3CA3F7971506026C0B857F689962856DED4010ABD0BE621C3A3960A54E710C375F26375D7014103A4B54330C198AF126116D2276E11715F693877FAD7EF09CADB094AE91E1A1597\"\n    };\n\t\n\t/**\n\t * Converted prime key into big int\n\t * \n\t * @var\t\t\tarray\n\t * @access\t\tprivate\n\t */\n    var primeKeyBigInt = str2bigInt(primeKey[XPMobileSDKSettings.primeLength], 16, 1);\n\t\n\t/**\n\t * Generator key\n\t * \n\t * @var\t\t\tarray\n\t * @access\t\tprivate\n\t */\n\tvar generator = str2bigInt('2',10,1);\n\t\n\t/**\n\t * Client specific random key\n\t * \n\t * @var\t\t\tarray\n\t * @access\t\tprivate\n\t */\n\tvar randKey = [];\n\n\t/**\n\t * Server public key\n\t * \n\t * @var\t\t\tarray\n\t * @access\t\tprivate\n\t */\n\tvar serverKey = null;\n\t\n\t/**\n\t * Stores context of execution\n\t * \n\t * @var\t\t\tobject\n\t * @access\t\tprivate\n\t */\n\tvar self = this;\n\t\n\t/**\n\t * Convert string to byte array\n\t * \n\t * @param \t\tstr\t\t\tstring\t\tString to convert to\n\t * @access\t\t\t\t\tprivate\n\t * @return\t\t\t\t\tarray\t\tConverted string to byte array\n\t */\n\tvar str2byteArray = function (str) {\n\t\tif (str.length % 2 != 0) {\n            str = '0' + str;\n\t\t}\n\n\t\tvar result = [];\n\t\tfor(var i=0; i<str.length; i=i+2)\n\t\t\tresult.push(parseInt(str.substring(i,i+2),16));\n\t\t\n\t\tresult.reverse();\n\t\treturn result;\n\t};\n\t\n\t/**\n\t * Generates client public key\n\t * \n\t * @access\t\t\t\t\tpublic\n\t * @return\t\t\t\t\tstring\t\tBase64 encoded public key\n\t */\n\tthis.createPublicKey = function () {\n\t\trandKey = randBigInt(160, 0);\n\t\tvar byteArrayKey = str2byteArray(bigInt2str(powMod(generator,randKey,primeKeyBigInt),16));\n\t\tbyteArrayKey.push(0);\n\t\tvar key = Base64.encodeArray(byteArrayKey);\n\t\treturn key;\n\t};\n\n\t/**\n\t * Decode and set server public key\n\t * \n\t * @param \t\tstr\t\t\tstring\t\tServer public key\n\t * @access\t\t\t\t\tpublic\n\t */\n\tthis.setServerPublicKey = function (publicKey) {\n\t\tvar decodedServerKey = Base64.decodeBinary(publicKey);\n\n\t\tvar reversedServerKey = [];\n\t\t\n\t\tfor(i=decodedServerKey.length-1; i>=0; i--)\n\t\t\treversedServerKey.push(decodedServerKey[i]);\n\t\t\n\t\tserverKey = CryptoJS.enc.Base64.parse(Base64.encodeArray(reversedServerKey)).toString();\n\t};\n\n\t/**\n\t * Return the skared key\n\t * \n\t * @return\t\t\t\t\tstring\t\tShared key\n\t * @access\t\t\t\t\tpublic\n\t */\n\tthis.getSharedKey = function () {\n\t\tvar secretKey = str2byteArray(bigInt2str(powMod(str2bigInt(serverKey,16,1),randKey,primeKeyBigInt),16));\n\t\treturn CryptoJS.enc.Base64.parse(Base64.encodeArray(secretKey)).toString();\n\t};\n\t\n\t/**\n\t * Encode a string using client and server public keys\n\t * \n\t * @param \t\tstr\t\t\tstring\t\tString to encode\n\t * @access\t\t\t\t\tpublic\n\t * @return\t\t\t\t\tstring\t\tBase64 encoded encrypted string\n\t */\n\tthis.encodeString = function(str) {\n\t\tvar secretString = this._sharedKey || this.getSharedKey().substring(0, 96);\n\n\t\tvar key = CryptoJS.enc.Hex.parse(secretString.substring(32, 96)); \n\t\tvar iv = CryptoJS.enc.Hex.parse( secretString.substring(0,32) ); \n\t\t\n\t\tvar params = { 'iv': iv };\n\t\tif (XPMobileSDKSettings.defaultEncryptionPadding && CryptoJS.pad[XPMobileSDKSettings.defaultEncryptionPadding]) {\n\t\t    params.padding = CryptoJS.pad[XPMobileSDKSettings.defaultEncryptionPadding];\n\t\t}\n\t\treturn CryptoJS.AES.encrypt(str, key, params).ciphertext.toString(CryptoJS.enc.Base64);\n\t};\n};","/*\nCryptoJS v3.1.2\ncode.google.com/p/crypto-js\n(c) 2009-2013 by Jeff Mott. All rights reserved.\ncode.google.com/p/crypto-js/wiki/License\n*/\nCryptoJS.pad.Iso10126={pad:function(a,c){var b=4*c,b=b-a.sigBytes%b;a.concat(CryptoJS.lib.WordArray.random(b-1)).concat(CryptoJS.lib.WordArray.create([b<<24],1))},unpad:function(a){a.sigBytes-=a.words[a.sigBytes-1>>>2]&255}};\n","\nXPMobileSDK.library.PKCECode = {\n\n\tcodeVerifier: '',\n\n\t/**\n\t * Generate Code Verifier for 3rd part login\n\t *\n\t * @return\t\t\tstring\t\t\trandom string\n\t */\n\tgetCodeVerifier: function () {\n\t\tthis.codeVerifier = CryptoJS.lib.WordArray.random(56 / 2).toString();\n\t\treturn this.codeVerifier;\n\t},\n\n\t/**\n\t * Generate Code Challange for 3rd part login\n\t *\n\t * @return\t\t\tstring\t\t\tSHA256 encrypted string\n\t */\n\tgetCodeChallenge: function () {\n\t\tif (!this.codeVerifier) {\n\t\t\tthis.getCodeVerifier();\n\t\t}\n\n\t\treturn encodeURIComponent(CryptoJS.SHA256(this.codeVerifier).toString(CryptoJS.enc.Base64).replace(/\\+/g, '-').replace(/\\//g, '_').replace(/=+$/, ''));\n\t}\n};","XPMobileSDK.library.Ajax = new function () {\r\n\n    this.Request = function (connectionUrl, params) {\r\n        var realTimeout = params.timeout || 0;\n\n        // remove timeout, set it later only for asynchronous requests\n        delete params.timeout;\r\n\n        params = Object.assign({\r\n            method: 'POST',\n            contentType: 'plain/text',\n            responseType: 'text',\n            encoding: 'utf-8',\n            postBody: null,\n            asynchronous: true,\n            onLoading: function () { },\n            onComplete: function () { },\n            onSuccess: function () { },\n            onFailure: function () { },\n            onTimeout: function () { }\r\n        }, params);\n\n        var ajaxRequest = new XMLHttpRequest();\n\n        var checkReadyState = function () {\r\n\n            if (ajaxRequest.readyState == 1) {\r\n                params.onLoading(ajaxRequest);\r\n            }\n            else if (ajaxRequest.readyState == 4) {\r\n\n                params.onComplete(ajaxRequest);\n\n                if ((ajaxRequest.responseType == '' || ajaxRequest.responseType == 'text') && ajaxRequest.status == 0 && ajaxRequest.responseText == '') {\r\n                    params.onFailure(ajaxRequest);\n                    return;\r\n                }\n\n                if (ajaxRequest.responseType == 'arraybuffer' && ajaxRequest.status == 0 && (ajaxRequest.response == null || ajaxRequest.response == '')) {\r\n                    params.onFailure(ajaxRequest);\n                    return;\r\n                }\n\n                if (ajaxRequest.status == 200 || ajaxRequest.status == 0) {\r\n                    params.onSuccess(ajaxRequest);\r\n                }\r\n                else {\r\n                    params.onFailure(ajaxRequest);\r\n                }\r\n            }\r\n        };\n\n        ajaxRequest.onreadystatechange = checkReadyState;\n\n        ajaxRequest.open(params.method, connectionUrl, params.asynchronous);\n\n        if (params.asynchronous) {\r\n            ajaxRequest.responseType = params.responseType;\r\n            ajaxRequest.timeout = realTimeout;\r\n            ajaxRequest.ontimeout = params.onTimeout;\r\n        }\n\n        ajaxRequest.setRequestHeader('Content-Type', params.contentType + '; charset=' + params.encoding);\n        ajaxRequest.send(params.postBody);\n\n        return ajaxRequest;\r\n\n    };\r\n\n};","XPMobileSDK.library.Bytes = new function () {\n\n\tvar fromInt = function (integer, bytes) {\n\t\t\n\t\treturn fromHex(integer.toString(16), bytes);\n\t\t\n\t};\n\t\t\n\tvar fromGuid = function (guid, bytes) {\n\t\t\n\t\treturn fromHex(guid.replace(/[^a-f0-9]/gi, ''), bytes);\n\t\t\n\t};\n\n\tvar fromBase64 = function (base64, bytes) {\n\t\t\n\t\tvar string = atob(base64.replace(/^.*?,/, '')).slice(- bytes);\n\t\tvar array = new Array(bytes ? bytes - string.length : 0);\n\t\t\n\t\tfor (var i = 0; i < string.length; i++)\n\t\t\tarray.push(string.charCodeAt(i));\n\t\t\n\t\treturn array;\n\n\t};\n\n\tvar fromHex = function (hex, bytes) {\n\t\t\n\t\thex = hex.length % 2 ? \"0\" + hex : hex;\n\t\t\n\t\tvar numbers = hex.match(/../g).splice(- bytes);\n\t\tvar array = new Array(bytes ? bytes - numbers.length : 0);\n\t\t\n\t\tarray.push.apply(array, numbers);\n\t\tarray.forEach(function (item, index) {\n\t\t\tarray[index] = parseInt(item || 0, 16);\n\t\t});\n\t\t\t\t\n\t\treturn array;\n\t\t\t\t\n\t};\n\t\n\treturn {\n\t\tfromInt: fromInt,\n\t\tfromGuid: fromGuid,\n\t\tfromBase64: fromBase64,\n\t\tfromHex: fromHex\n\t}\n\n};","/**\n * This singleton monitors the stability of the communication between the Web Client and the Mobile Server.\n * Such kind of monitoring is necessary due to the limitation of the simultaneous AJAX requests that the server can process. \n * \n * The server gets constantly overloaded when the Web Client shows many cameras on the screen or/and there are many Web Clients connected to the same Mobile Server.\n * When the server is overloaded, some/all of the HTTP requests fail with different HTTP error codes, HTTP error 0 (zero) being the most frequent one.\n * In such situations, the AJAX requests should become less frequent, i.e. the interval between requesting frames for streams should get bigger. \n * Also, the LiveMessage command should always be with higher priority than the video stream requests to avoid log-out. Loosely speaking, the command channel\n * should be with higher priority than the video channel. \n * \n * This singleton modifies the variables declared in the NETWORK object. NETWORK.requestTime is probably the most important, as it defines the interval between two \n * requests for video frames. The general rule is that if the communication is overloaded, the requestTime interval is bigger, so the server gets a chance to recover. \n * \n * @author rvp\n */\nvar CommunicationStability = new function() {\n\t\n\t// Counter for HTTP errors on the command channel. +1 is added on error, -1 is added on success after failure\n\tvar connectionProtocolFails = 0;\n\t\n\t// Counter for the recent HTTP errors on the video channel. It tends to zero, as zero means that no HTTP errors have recently occurred\n\tvar videoProtocolFails = 0;\n\t\n\t// the last time that an HTTP error occurred on the video channel and the NETWORK.requestTime got bigger\n\tvar videoProtocolFailDate = null;\n\t\n\t// reduces videoProtocolFails each second, until it becomes zero\n\tsetInterval(function() {\n\t\t\n\t\tvideoProtocolFails = Math.max(0, videoProtocolFails - 1 - parseInt(videoProtocolFails / NETWORK.VIDEO_PROTOCOL_RECOVER_PACE));\n\t\t\n\t\tNETWORK.requestTime = NETWORK.minRequestTime + videoProtocolFails * NETWORK.REQUEST_TIME_GROW_PER_HTTP_ERROR;\n\t\tNETWORK.requestTimeOnFailure = Math.min(NETWORK.MAX_REQUEST_TIME_ON_FAILURE, NETWORK.requestTime * NETWORK.REQUEST_TIME_GROW_PER_HTTP_ERROR);\n\t\t\n//\t\tconsole.show(NETWORK.requestTime + ' request time', 0);\n//\t\tconsole.show(NETWORK.minRequestTime + ' min request time', 1);\n//\t\tconsole.show(NETWORK.requestTimeOnFailure + ' request time on failure', 2);\n\t\t\n\t}, 1000);\n\t\n\t// reduces NETWORK.minRequestTime if no recent HTTP errors have occurred\n\tsetInterval(function() {\n\t\tif (noRecentVideoFails(NETWORK.MIN_REQUEST_TIME_DECREASE)) {\n\t\t\tNETWORK.minRequestTime = Math.max(NETWORK.MIN_REQUEST_TIME_LOWER_BOUND, NETWORK.minRequestTime * 0.9);\n\t\t}\n\t}, NETWORK.VIDEO_FAILS_MONITOR);\n\t\n\t/**\n\t * Call this method to indicate that a command (on the command channel) has failed. \n\t * \n\t * @param object: the ConnectionRequest instance\n\t */\n\tthis.addBreakDown = function(object) {\n\t\t\n\t\tif (object.brokenDown) {\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tconnectionProtocolFails++;\n\t\tobject.brokenDown = true;\n\t};\n\t\n\t/**\n\t * Call this method to indicate that a command (on the command channel) has succeeded. \n\t * \n\t * @param object: the ConnectionRequest instance\n\t */\n\tthis.removeBreakDown = function(object) {\n\t\t\n\t\tif (!object.brokenDown) {\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tconnectionProtocolFails--;\n\t\tobject.brokenDown = false;\n\t};\n\t\n\t/**\n\t * Call this method to indicate that a video request has failed.\n\t */\n\tthis.addVideoBreakDown = function() {\n\t\t\n\t\tvideoProtocolFails++;\n\t\t\n\t\tif (!videoProtocolFailDate) {\n\t\t\tvideoProtocolFailDate = new Date();\n\t\t} else {\n\t\t\tif (noRecentVideoFails(NETWORK.MIN_REQUEST_TIME_INCREASE)) {\n\t\t\t\tNETWORK.minRequestTime = Math.min(NETWORK.MIN_REQUEST_TIME_UPPER_BOUND, NETWORK.minRequestTime * NETWORK.MIN_REQUEST_TIME_GROW);\n\t\t\t\tvideoProtocolFailDate = new Date();\n\t\t\t}\n\t\t}\n\t};\n\t\n\t/**\n\t * Checks whether the command channel is broken down. \n\t */\n\tthis.isBrokenDown = function() {\n\t\treturn connectionProtocolFails > 0;\n\t};\n\t\n\tfunction noRecentVideoFails(interval) {\n\t\treturn videoProtocolFailDate && new Date().getTime() - videoProtocolFailDate.getTime() > interval;\n\t}\n};","/** \n * Network API\n *\n * This file defines the Connection singleton, which is the entry point of the Network API.\n * It is an abstraction layer over the communication with the Mobile server.\n * It encapsulates the low-level XML creation and parsing.  \n * It is responsible for creating the high-level ConnectionRequest, ConnectionResponse, VideoConnection and ItemHeaderParser instances. \n * \n * @module Network\n */\n\n/**\n * Connection state machine states\n */\nXPMobileSDK.library.ConnectionStates = {\n    idle: 1, // Waiting to connect\n    connecting: 2, // Connecting, waiting for ajax response\n    loggingIn: 3, // Logging in, waiting for ajax response\n    working: 4, // Logged in, established connection and etc\n    lostConnection: 5 // Got an error from the server that the connection ID is no longer valid and should reconnect\n};\n\n/**\n * Interface description for the observers of the Connection singleton.\n * \n * If an objects wants to be informed for a specific event (when connection is lost for example) they can register as an observer.\n * Registering an object as an observer for the Connection singleton is simple as calling Connection.addObserver(object).\n * Then, if the observer defines any of the methods described below, they will be called whenever it is appropriate.\n * \n * All methods are optional. Just implement those you need in your class and add it as observer. \n * \n * @class ConnectionObserverInterface\n */\nXPMobileSDK.library.ConnectionObserverInterface = {\n\n    /**\n     * Sent to observers when the connection state changes in any way\n     * \n     * @method connectionStateChanged\n     */\n    connectionStateChanged: function () { },\n\n    /**\n     * Sent to observers when connection has connected to the server and is about to send credentials\n     * \n     * @method connectionDidConnect\n     * @param parameters: object, the object containing the response parameters.\n     */\n    connectionDidConnect: function (parameters) { },\n\n    /**\n     * Sent to observers when connection attempted to connect to the server but failed.\n     * Note that error may be a null object if we have failed to even parse the response from the server.\n     * \n     * @method connectionFailedToConnect\n     */\n    connectionFailedToConnect: function (error) { },\n\n    /**\n     * Sent to observers when connecting with external connection ID has failed.  \n     * \n     * @method connectionFailedToConnectWithId\n     */\n    connectionFailedToConnectWithId: function (error) { },\n\n    /**\n     * Sent to observers when connection is in the process of logging in, but requires additional verification code.\n     * \n     * @method connectionRequiresCode\n     * @param provider: string, the provider used to send a verification code.\n     */\n    connectionRequiresCode: function (provider) { },\n\n    /**\n     * Sent to observers when connection is in the process of logging in, a code has been sent to the server for verification, but this code is wrong.\n     * \n     * @method connectionCodeError\n     */\n    connectionCodeError: function () { },\n\n    /**\n     * Sent to observers when connection has logged in.\n     * \n     * @method connectionDidLogIn\n     */\n    connectionDidLogIn: function () { },\n\n    /**\n     * Sent to observers when connection has failed to log in. Check the error to determine if it was due to incorrect credentials!\n     * Note that error may be a null object if we have failed to even parse the response from the server.\n     * \n     * @method connectionFailedToLogIn\n     */\n    connectionFailedToLogIn: function (error) { },\n\n    /**\n     * Sent to observers when connection to the server was lost.\n     * \n     * @method connectionLostConnection\n     */\n    connectionLostConnection: function () { },\n\n    /**\n     * Sent to observers when the disconnect command is sent.\n     * \n     * @method connectionProcessingDisconnect\n     */\n    connectionProcessingDisconnect: function () { },\n\n    /**\n     * Sent to observers when connection to the server was closed on request via disconnect method.\n     * \n     * @method connectionDidDisconnect\n     */\n    connectionDidDisconnect: function () { },\n\n    /**\n     * Sent to observers every time a request to the server has been received properly and without timeout or other terminal errors.\n     * You can use that to keep track of the connection and monitor it is properly working.\n     * \n     * @method connectionRequestSucceeded\n     */\n    connectionRequestSucceeded: function (request, response) { },\n\n    connectionVersionChanged: function () { },\n\n    connectionReloadConfiguration: function () { },\n\n    connectionReloadCameraConfiguration: function () { },\n\n    closeStreamFinished: function () { }\n};\n\n/**\n * Main Connection.\n * \n * This class encapsulates:\n * \t- connection state management;\n *  - commands sending to the server over ajax;\n *  - keep alive messages (LiveMessage commands).\n *  \n * The class uses ConnectionRequest to generate XML and perform the actual AJAX call with the command. \n * Most commands methods (if not all), such as getViews and requestStream return a connectionRequest object to the callee.\n * This object can be used to cancel the request if needed via the cancelRequest method.\n * \n * @class Connection\n */\nConnection = function () {\n\n    var self = this;\n\n    /**\n     * Read-only: Connection ID, supplied by the server\n     * @property {String} connectionId\n     */\n    this.connectionId = null;\n\n    /**\n     * Read-only: Server ID, supplied by the server\n     * @property {String} serverId\n     */\n    this.serverId = null;\n\n    /**\n     * Keeps the username provided by the server of the currently logged in user\n     * @property {String} currentUserName\n     */\n    this.currentUserName = null;\n\n    /**\n     * Keeps the email provided by the server of the currently logged in user\n     * @property {String} currentUserEmail\n     */\n    this.currentUserEmail = null;\n\n    /**\n     * Session timeout in seconds, supplied by the server. It is needed so we know how often to send keep-alive messages\n     * @property {Number} serverTimeout\n     */\n    this.serverTimeout = 30;\n\n    /**\n     * Read-only: Connection state. See ConnectionStates constants for possible values\n     * @property {Number} state\n     */\n    this.state = XPMobileSDK.library.ConnectionStates.idle;\n\n    /**\n     * Indicates the configuration of DS comming from the Mobile Server\n     */\n    this.DSServerStatus = {\n        NotAvailable: 0,\n        DoNotEnforce: 1,\n        EnforceWheneverPossible: 2,\n        Enforce: 3\n    };\n\n    /**\n     * All requests currently waiting for response\n     */\n    var requests = [];\n\n    /**\n     * Observers are objects that receive certain events from the connection. These objects should implement methods from \n     * the ConnectionObserverInterface. To add/remove an observer use the addObserver/removeObsever methods, don't modify this \n     * array directly - it is supposed to be private property\n     */\n    var observers = [];\n\n    /**\n     * Each command send to the server has a sequenceID which starts from 1 and is increased with every next request.\n     */\n    var sequenceID = 0;\n\n    /**\n     * Number of previous LiveMessages still waiting for response from the server.\n     */\n    var liveMessagesWaiting = 0;\n\n    /**\n     * Minimum FPS supported. In push mode this FPS value is used as lowest value when adjusting the frame rate\n     */\n    var minFps = 1;\n\n    /**\n     * Maximum FPS supported. In push mode this FPS value is used as highest value when adjusting the frame rate. \n     */\n    var maxFps = 15;\n\n    /**\n     * Initializes the Connection singleton. Must be called before using any of the other methods.\n     * \n     * @method initialize\n     * @param storage: optional, the storage used to store server features in, and to initialize them from (for example XPMobileSDK.localStorage, XPMobileSDK.sessionStorage, or any object implementing their methods). \n     * \t\t\t\tThe server features are retrieved on login. The idea is to keep the connection state if you want to connectWithId, but it is cleared for some reason (browser refresh for example).\n     */\n    this.initialize = function (storage) {\n\n        if (storage) {\n            self.storage = storage;\n            XPMobileSDK.features = self.storage.getItem('features');\n            self.resizeAvailable = self.storage.getItem('resizeAvailable');\n            self.webSocketServer = self.storage.getItem('webSocketServer');\n            self.webSocketBrowser = self.storage.getItem('webSocketBrowser');\n            self.directStreamingClient = self.storage.getItem('directStreamingClient');\n            self.directStreamingServer = self.storage.getItem('directStreamingServer');\n            self.exportToAvi = self.storage.getItem('exportToAvi');\n            self.exportToDb = self.storage.getItem('exportToDb');\n            self.exportToMkv = self.storage.getItem('exportToMkv');\n            self.analytics = self.storage.getItem('analytics');\n        }\n\n        self.server = XPMobileSDKSettings.MobileServerURL || window.location.origin;\n        self.dh = new XPMobileSDK.library.DiffieHellman();\n    };\n\n    /**\n     * Adds an observer to the Connection singleton. \n     * \n     * @method addObserver\n     * @param object: an arbitrary object implementing the ConnectionObserverInterface interface\n     * @see ConnectionObserverInterface\n     */\n    this.addObserver = function (object) {\n        if (observers.indexOf(object) === -1) observers.push(object);\n    };\n\n    /**\n     * Removes an existing observer from the Connection singleton.\n     * \n     * @method removeObserver\n     * @param object: an arbitrary object implementing the ConnectionObserverInterface interface\n     * @see ConnectionObserverInterface\n     */\n    this.removeObserver = function (object) {\n        var index = observers.indexOf(object);\n        if (index < 0) {\n            logger.error('Error removing observer. Observer does not exist.');\n            return;\n        }\n        observers.splice(index, 1);\n    };\n\n    /**\n     * Cancels a request. Provide the ConnectionRequest object, returned by the method used to create it.\n     * \n     * @method cancelRequest\n     * @param {ConnectionRequest} connectionRequest\n     */\n    this.cancelRequest = function (connectionRequest) {\n        logger.log('Cancelling request: ', connectionRequest);\n        connectionRequest.cancel();\n        requestFinished(connectionRequest);\n    };\n\n    /**\n     * Sends a Connect command to the server.\n     * \n     * @param {Object} params: Parameters to sent to the server\n     * @param {Function} successCallback: function that is called when the command execution was successful and the result is passed as a parameter.\n     * @param {Function} failCallback: function that is called when the command execution has failed and the error is passed as a parameter.\n     * \n     * @return the request object\n     */\n    this.Connect = function (params, successCallback, failCallback) {\n        params = params || {};\n\n        setState(XPMobileSDK.library.ConnectionStates.connecting);\n        params.ProcessingMessage = 'No';\n        return self.sendCommand('Connect', params, { successCallback: successCallback }, connectCallback, failCallback);\n    };\n\n    var connectCallback = function (connectionRequest) {\n        requestFinished(connectionRequest);\n        var connectionResponse = connectionRequest.response;\n        if (!connectionResponse || connectionResponse.isError) {\n            var failedResponseParameter = connectionResponse && connectionResponse.error;\n            callMethodOnObservers('connectionFailedToConnect', failedResponseParameter);\n            connectionRequest.options.failCallback && connectionRequest.options.failCallback(failedResponseParameter);\n        } else {\n            self.connectionId = connectionResponse.outputParameters.ConnectionId;\n            self.serverTimeout = parseInt(connectionResponse.outputParameters.Timeout);\n            self.serverId = connectionResponse.outputParameters.ServerId;\n\n            if (self.storage) {\n                self.webSocketServer = connectionResponse.outputParameters.WebSocketSupport === 'Yes';\n                self.storage.setItem('webSocketServer', self.webSocketServer);\n\n                if (typeof self.storage.getItem('webSocketBrowser') === 'boolean' && !!window.WebSocket) {\n                    self.webSocketBrowser = self.storage.getItem('webSocketBrowser');\n                }\n                else {\n                    self.webSocketBrowser = !!window.WebSocket;\n                    self.storage.setItem('webSocketBrowser', self.webSocketBrowser);\n                }\n\n                if (typeof self.storage.getItem('directStreamingClient') === 'boolean') {\n                    self.directStreamingClient = self.storage.getItem('directStreamingClient');\n                }\n                else {\n                    self.directStreamingClient = !!XPMobileSDKSettings.DirectStreaming;\n                    self.storage.setItem('directStreamingClient', self.directStreamingClient);\n                }\n\n\n                self.analytics = self.storage.getItem('analytics');\n            }\n\n            if (connectionResponse.outputParameters.SecurityEnabled) {\n                self.SecurityEnabled = connectionResponse.outputParameters.SecurityEnabled;\n            }\n\n            if (connectionResponse.outputParameters.PublicKey) {\n                self.PublicKey = connectionResponse.outputParameters.PublicKey;\n                self.dh && self.dh.setServerPublicKey(connectionResponse.outputParameters.PublicKey);\n            }\n\n            if (connectionResponse.outputParameters.CHAPSupported && connectionResponse.outputParameters.CHAPSupported === \"Yes\") {\n                self.CHAPSupported = connectionResponse.outputParameters.CHAPSupported;\n                XPMobileSDK.library.CHAP.sharedKey = self.dh && self.dh.getSharedKey();\n            }\n\n            if (connectionResponse.outputParameters.ServerProductCode) {\n                self.ServerProductCode = connectionResponse.outputParameters.ServerProductCode;\n            }\n\n            logger.info('Established connection');\n            scheduleLiveMessage();\n            var successResponseParameter = connectionResponse.outputParameters;\n            callMethodOnObservers('connectionDidConnect', successResponseParameter);\n            connectionRequest.options.successCallback && connectionRequest.options.successCallback(successResponseParameter);\n        }\n    };\n\n    /**\n     * Connects to the server with an existing connectionId.\n     * \n     * @method connectWithId\n     * @param {String} server: url of the server to connect to\n     * @param {String} connectionId: token provided from external login request\n     * @param {String} serverId: token provided from external login request\n     */\n    this.connectWithId = function (server, connectionId, serverId) {\n        self.server = server;\n        self.connectionId = connectionId;\n        self.serverId = serverId;\n        logger.log('Connecting with Id ' + self.connectionId);\n        setState(XPMobileSDK.library.ConnectionStates.connecting);\n        // We need to check the connection ID we have been provided with the server. Easiest way is to just ping it\n        self.sendLiveMessage();\n        // we set a flag which is checked when the live message comes back. If it contains an OK response we set the connection as live.\n        // If it contains a time out response we set it as disconnected\n        self.connectingViaExternalConnectionID = true;\n\n    };\n\n    /**\n     * Sends a Login command to the server. Log-in has to be performed before any other normal requests (except connect and some other special cases). \n     * \n     * @param {Object} params: Parameters to sent to the server\n     * @param {Function} successCallback: function that is called when the command execution was successful and the result is passed as a parameter.\n     * @param {Function} failCallback: function that is called when the command execution has failed and the error is passed as a parameter.\n     * \n     * @return the request object\n     */\n    this.Login = function (params, successCallback, failCallback) {\n        params = params || {};\n\n        logger.log('Log in with authentication type ' + params.LoginType + ' username ' + params.Username + ' password ' + params.Password);\n        setState(XPMobileSDK.library.ConnectionStates.loggingIn);\n        return self.sendCommand('LogIn', params, { successCallback: successCallback }, loginCallback, failCallback);\n    };\n\n    var loginCallback = function (connectionRequest) {\n        requestFinished(connectionRequest);\n        var connectionResponse = connectionRequest.response;\n        if (!connectionResponse || connectionResponse.isError) {\n            if (connectionResponse && connectionResponse.error.code === XPMobileSDK.library.ConnectionError.SecondStepAuthenticationRequired) {\n                var ssarParameter = connectionResponse.outputParameters.SecondStepAuthenticationProvider;\n                callMethodOnObservers('connectionRequiresCode', ssarParameter);\n                connectionRequest.options.successCallback && connectionRequest.options.successCallback(ssarParameter);\n            }\n            else {\n                self.connectionId = null;\n                cancelLiveMessage();\n                var failedResponseParameter = connectionResponse && connectionResponse.error;\n                callMethodOnObservers('connectionFailedToLogIn', failedResponseParameter);\n                connectionRequest.options.failCallback && connectionRequest.options.failCallback(failedResponseParameter);\n            }\n        }\n        else {\n            proceedWithLogin(connectionResponse, connectionRequest.options.successCallback);\n        }\n    };\n\n    var proceedWithLogin = function (connectionResponse, successCallback) {\n\n        self.directStreamingServer = connectionResponse.outputParameters.DirectStreamingLive === 'Yes';\n        self.storage.setItem('directStreamingServer', self.directStreamingServer);\n\n        self.exportToAvi = connectionResponse.outputParameters.ExportToAvi === 'Yes';\n        self.storage.setItem('exportToAvi', self.exportToAvi);\n\n        self.exportToDb = connectionResponse.outputParameters.ExportToDb === 'Yes';\n        self.storage.setItem('exportToDb', self.exportToDb);\n\n        self.exportToMkv = connectionResponse.outputParameters.ExportToMkv === 'Yes';\n        self.storage.setItem('exportToMkv', self.exportToMkv);\n        if (connectionResponse.outputParameters.Username) {\n            self.currentUserName = connectionResponse.outputParameters.Username;\n        }\n\n        if (connectionResponse.outputParameters.Email) {\n            self.currentUserEmail = connectionResponse.outputParameters.Email;\n        }\n\n        logger.info('Logged in');\n        getFeatures(connectionResponse.outputParameters);\n\n        setState(XPMobileSDK.library.ConnectionStates.working);\n        callMethodOnObservers('connectionDidLogIn', connectionResponse.outputParameters);\n        successCallback && successCallback();\n    };\n\n    /**\n     * Sends a verification code request command after a log-in command, that requires a second step of verification. \n     * \n     * @method requestCode\n     * @param {Function} successCallback: function that is called when the command execution was successful and the result is passed as a parameter.\n     * @param {Function} failCallback: function that is called when the command execution has failed and the error is passed as a parameter.\n     */\n    this.requestCode = function (successCallback, failCallback) {\n        var params = {};\n        return self.sendCommand('RequestSecondStepAuthenticationPin', params, { successCallback: successCallback }, requestCodeCallback, failCallback);\n    };\n\n    var requestCodeCallback = function (connectionRequest) {\n        callbackAfterRequest(connectionRequest, 'Error requesting validation code.', connectionRequest.options.successCallback);\n    };\n\n    /**\n     * Sends a code for verification after a it has been requested with requestCode command. \n     * \n     * @method verifyCode\n     * @param {String} code - second step authentication pin code\n     */\n    this.verifyCode = function (code) {\n        var params = {\n            SecondStepAuthenticationPin: code\n        };\n        return self.sendCommand('VerifySecondStepAuthenticationPin', params, null, verifyCodeCallback);\n    };\n\n    var verifyCodeCallback = function (connectionRequest) {\n        requestFinished(connectionRequest);\n        var connectionResponse = connectionRequest.response;\n        if (!connectionResponse || connectionResponse.isError) {\n            if (connectionResponse && connectionResponse.error.code === XPMobileSDK.library.ConnectionError.SecondStepAuthenticationCodeError) {\n                callMethodOnObservers('connectionCodeError');\n            }\n            else {\n                self.connectionId = null;\n                cancelLiveMessage();\n                callMethodOnObservers('connectionFailedToLogIn', connectionResponse && connectionResponse.error);\n            }\n        }\n        else {\n            proceedWithLogin(connectionResponse);\n        }\n    };\n\n    /**\n     * Sends a disconnect command to the server. Performing any other normal requests that requires a valid connectionId will not be possible from now on.\n     * \n     *  @method Disconnect\n     *  @param {Object} params - Parameters to sent to the server. May contain:\n     * <pre>\n     * - {String} ConnectionId - Connection ID retrieved from Connect command\n     * - {String} ProcessingMessage - (optional) [Yes/No] Indicates whether processing\n     *                                messages should be sent from server while\n     *                                processing the request. Default depends on the\n     *                                value in connect command.\n     * </pre>\n     * @param {Function} successCallback - function that is called when the command execution was successful and the result is passed as a parameter.\n     * @param {Function} failCallback - function that is called when the command execution has failed and the error is passed as a parameter.\n     */\n    this.Disconnect = function (params, successCallback, failCallback) {\n        /* Call connectionProcessingDisconnect method on observers before actual disconnect command call\n        so that other objects have the chance to send their close commands first */\n        callMethodOnObservers('connectionProcessingDisconnect');\n\n        cancelLiveMessage();\n        setState(XPMobileSDK.library.ConnectionStates.idle);\n\n        XPMobileSDK.library.VideoConnectionPool.clear();\n        params = params || {};\n        var connectionRequest = self.sendCommand('Disconnect', params, { successCallback: successCallback }, logOutCallback, failCallback);\n\n        self.connectionId = null;\n        return connectionRequest;\n    };\n\n    /**\n     * logOut callback\n     * \n     * @param \tconnectionRequest\t\tobject\t\tXMLHttpResponse\n     */\n    var logOutCallback = function (connectionRequest) {\n        requestFinished(connectionRequest);\n        callMethodOnObservers('connectionDidDisconnect');\n        self.destroy();\n    };\n\n    /**\n     * Sends a GetViews command to the server. Sub views, child of the given viewId, will be returned in the given callback.\n     * \n     * @method getViews\n     * @param {String} viewId\n     * @param {Function} successCallback: function that is called when the command execution was successful and the result is passed as a parameter.\n     * @param {Function} failCallback: function that is called when the command execution has failed and the error is passed as a parameter.\n     */\n    this.getViews = function (viewId, successCallback, failCallback) {\n        return self.sendCommand('GetViews', { ViewId: viewId }, { successCallback: successCallback, ViewId: viewId }, getViewsCallback, failCallback);\n    };\n\n    var getViewsCallback = function (connectionRequest) {\n        callbackAfterRequest(connectionRequest, null, function () {\n\n            var subViews = [];\n            var subViewsNodes = connectionRequest.response.subItems.getElementsByTagName('Item');\n\n            for (var i = 0, c = subViewsNodes.length; i < c; i++) {\n                var item = subViewsNodes[i];\n                var res = {};\n                for (var j = 0; j < item.attributes.length; j++) {\n                    res[item.attributes[j].name] = item.attributes[j].value;\n                }\n                subViews.push(res);\n            }\n            var view = {\n                id: connectionRequest.options.ViewId,\n                subViews: subViews\n            };\n            connectionRequest.options.successCallback && connectionRequest.options.successCallback(view);\n        });\n    };\n\n    /**\n     * Sends a GetAllViewsAndCameras command to the server. Retrieves all folders, views and cameras in a single command.\n     * \n     * @method getAllViews\n     * @param {Function} successCallback: function that is called when the command execution was successful and the result is passed as a parameter.\n     * @param {Function} failCallback: function that is called when the command execution has failed and the error is passed as a parameter.\n     */\n    this.getAllViews = function (successCallback, failCallback) {\n        return self.sendCommand('GetAllViewsAndCameras', {}, { successCallback: successCallback }, getAllViewsCallback, failCallback);\n    };\n\n    /**\n     * Called when getAllViews response is received\n     * \n     * @param \t\tconnectionRequest\t\tobject\t\tResponse from AXAJ call\n     */\n    var getAllViewsCallback = function (connectionRequest) {\n        callbackAfterRequest(connectionRequest, 'Error executing GetAllViewsAndCameras on the server.', function () {\n            connectionRequest.options.successCallback && connectionRequest.options.successCallback(connectionRequest.response.items);\n        });\n    };\n\n    /**\n     * Sends a GetItems command to the server. Retrieves all folders and cameras inside in a single command.\n     *\n     * @method getAllViews\n     * @param {Function} successCallback: function that is called when the command execution was successful and the result is passed as a parameter.\n     * @param {Function} failCallback: function that is called when the command execution has failed and the error is passed as a parameter.\n     */\n    this.getAllCameras = function (successCallback, failCallback) {\n        return self.sendCommand('GetItems', { ItemKind: 'Camera', Hierarchy: 'UserDefined', IncludeRelatedDevices: 'Yes' }, { successCallback: successCallback }, getAllCamerasCallback, failCallback);\n    };\n\n    /**\n    * Called when getAllViews response is received\n    * \n    * @param \t\tconnectionRequest\t\tobject\t\tResponse from AXAJ call\n    */\n    var getAllCamerasCallback = function (connectionRequest) {\n        callbackAfterRequest(connectionRequest, 'Error executing GetItems on the server.', function () {\n            connectionRequest.options.successCallback && connectionRequest.options.successCallback(connectionRequest.response.items);\n        });\n    };\n\n    this.requestPushStream = function (successCallback, failCallback) {\n\n        var parameters = {\n            SignalType: 'Upload',\n            ByteOrder: 'Network'\n        };\n        return self.RequestStream(parameters, successCallback, failCallback);\n\n    };\n\n    var requestPushStreamCallback = function (connectionRequest) {\n        callbackAfterRequest(connectionRequest, 'Error requesting video push stream from the server.', function () {\n            connectionRequest.options.successCallback && connectionRequest.options.successCallback(connectionRequest.response.outputParameters);\n        });\n    };\n\n    /**\n     * Sends a RequestStream command to the server.\n     * \n     * @method requestStream\n     * @param {String} cameraId: the unique GUID of the camera that should be started\n     * @param size: includes width and height as mandatory properties\n     * @param {Function} successCallback: function that is called when the command execution was successful and the result is passed as a parameter.\n     * @param {Function} failCallback: function that is called when the command execution has failed and the error is passed as a parameter.\n     * @param options: optional parameter containing various configuration, includes:\n     * \t\t\t- {int} signal: live or playback\n     * \t\t\t- {int} jpegCompressionLevel\n     * \t\t\t- {boolean} keyFramesOnly\n     * \t\t\t- {boolean} reuseConnection - if true, the API will reuse existing connections for the same camera\n     *\t\t\t- {int} time - timestamp for playback\n     * \n     * @return the request object\n     */\n    this.requestStream = function (cameraId, size, options, successCallback, failCallback) {\n\n        options = options || {};\n\n        var params = {\n            CameraId: cameraId,\n            DestWidth: Math.round(size.width),\n            DestHeight: Math.round(size.height),\n            SignalType: options.signal === XPMobileSDK.interfaces.VideoConnectionSignal.playback ? 'Playback' : 'Live',\n            MethodType: 'Push',\n            Fps: maxFps, // This doesn't work for Pull mode, but we have to supply it anyway to keep the server happy\n            ComprLevel: options.jpegCompressionLevel ? options.jpegCompressionLevel : 70,\n            KeyFramesOnly: options.keyFramesOnly ? 'Yes' : 'No', // Server will give only key frame thumb nails. This will reduce FPS\n            RequestSize: 'Yes',\n            StreamType: options.streamType === XPMobileSDK.library.VideoConnectionStream.FragmentedMP4 ? 'FragmentedMP4' : 'Transcoded'\n        };\n\n        if (options.fragmentDurationMs) {\n            params.FragmentDurationMs = options.fragmentDurationMs;\n        }\n\n        if (options.time) {\n            params.SeekType = 'Time';\n            params.Time = options.time;\n        }\n\n        if (options.motionOverlay) {\n            params.MotionOverlay = 'Yes';\n        }\n\n        if (XPMobileSDK.features.MultiCameraPlayback && options.playbackControllerId) {\n            params.PlaybackControllerId = options.playbackControllerId;\n        }\n\n        options = {\n            successCallback: successCallback,\n            cameraId: cameraId,\n            signal: options.signal === XPMobileSDK.interfaces.VideoConnectionSignal.playback ? 'Playback' : 'Live',\n            reuseConnection: !!options.reuseConnection\n        };\n        return self.sendCommand('RequestStream', params, options, requestStreamCallback, failCallback);\n    };\n\n    /**\n     * Sends a RequestStream command to the server.\n     * \n     * @param {Object} params: Parameters to sent to the server\n     * @param {Function} successCallback: function that is called when the command execution was successful and the result is passed as a parameter.\n     * @param {Function} failCallback: function that is called when the command execution has failed and the error is passed as a parameter.\n     * \n     * @return the request object\n     */\n    this.RequestStream = function (params, successCallback, failCallback) {\n        return self.sendCommand('RequestStream', params, { successCallback: successCallback }, requestStreamCallback, failCallback);\n    };\n\n    var requestStreamCallback = function (connectionRequest) {\n        let messageString = 'Error starting stream for camera ' + connectionRequest.options.cameraId;\n        if (connectionRequest.response.errorCode === XPMobileSDK.library.ConnectionError.InsufficientUserRights) {\n            messageString = '';\r\n        }\n        callbackAfterRequest(connectionRequest, messageString, function () {\n\n            var videoId = connectionRequest.response.outputParameters.VideoId;\n            logger.log('Server prepared video ID ' + videoId + ' for camera ' + connectionRequest.options.cameraId);\n\n            let videoConnection = new VideoStream(videoId, connectionRequest);\n            if (connectionRequest.options.reuseConnection) {\n                XPMobileSDK.library.VideoConnectionPool.addCamera(connectionRequest.options.cameraId, videoConnection);\n            }\n            connectionRequest.options.successCallback && connectionRequest.options.successCallback(videoConnection);\n        });\n    };\n\n    /**\n    * Sends a RequestAudioStreamIn connection command to get an upstream for audio push to the server.\n    * \n    * @method RequestAudioStreamIn\n    * @param {AudioConnectionOptions} params - Configuration. Should contain:\n    * <pre>\n    * - {String} itemId - Id of the item (speaker), which stream is requested (GUID)\n    * - {String} AudioEncoding - Shows the encoding of the output. Possible values - Pcm, Mp3.\n    * - {Number} AudioSamplingRate - The audio sampling rate in Hz value\n    * - {Number} AudioBitsPerSample - 8/16  - Audio bits per sample\n    * - {Number} AudioChannelsNumber - 1/2 - Number of audio channels (mon or stereo)\n    * - {String} StreamDataType - Shows if this is video, audio or metadata. Possible values - Video, Audio, MetaData.\n    * - {String} SignalType - Type of the requested signal - Live, Playback\n    * - {String} MethodType - Type of the method for retrieving video data - Push or Pull\n    * - {String} StreamHeaders - Shows available stream headers. Possible values - AllPresent, NoHeaders.\n    * - {String} Challenge - (only if CHAPSupproted is true) GUID previously given by the server\n    * - {String} ChalAnswer - (only if CHAPSupproted is true) Challenge itself plus a SHA512 hash encoded as base64\n    \n    * </pre>\n    * @param {Function} successCallback - function that is called when the command execution was successful and a stream parameters object is passed as a parameter.\n    * @param {Function} errorCallback - function that is called when the command execution has failed and an error object is passed as a parameter.\n    * \n    * @return {ConnectionRequest} - the ConnectionRequest object\n    */\n    this.RequestAudioStreamIn = function (params, successCallback, failCallback) {\n        return self.sendCommand('RequestAudioStreamIn', params, { successCallback: successCallback }, requestAudioStreamInCallback, failCallback);\n    };\n\n    /**\n    * Sends a RequestAudioStreamIn connection command to get an upstream for audio push to the server.\n    * \n    * @method requestAudioStreamIn\n    * @param {String} itemId - Id of the item (speaker), which stream is requested (GUID)\n    * @param {AudioConnectionOptions} options - optional, optional configuration. May contain:\n    * <pre>\n    * - {Number} AudioSamplingRate - The audio sampling rate in Hz value\n    * - {Number} AudioBitsPerSample - 8/16  - Audio bits per sample\n    * - {Number} AudioChannelsNumber - 1/2 - Number of audio channels (mon or stereo)\n    * </pre>\n    * @param {Function} successCallback - function that is called when the command execution was successful and a stream parameters object is passed as a parameter.\n    * @param {Function} errorCallback - function that is called when the command execution has failed and an error object is passed as a parameter.\n    * \n    * @return {ConnectionRequest} - the ConnectionRequest object\n    */\n    this.requestAudioStreamIn = function (itemId, options, successCallback, failCallback) {\n\n        options = options || {};\n\n        var params = {\n            ItemId: itemId,\n            AudioEncoding: \"Pcm\",\n            AudioSamplingRate: 8000,\n            AudioBitsPerSample: 16,\n            AudioChannelsNumber: 1,\n            StreamDataType: \"Audio\",\n            SignalType: 'Live',\n            MethodType: 'Push',\n            StreamHeaders: \"AllPresent\",\n            ByteOrder: \"Network\"\n        };\n\n        if (options.AudioSamplingRate) {\n            params.AudioSamplingRate = options.AudioSamplingRate;\n        }\n\n        if (options.AudioBitsPerSample) {\n            params.AudioBitsPerSample = options.AudioBitsPerSample;\n        }\n\n        if (options.AudioChannelsNumber) {\n            params.AudioChannelsNumber = options.AudioChannelsNumber;\n        }\n\n        options = {\n            successCallback: successCallback,\n            timeout: options.timeout\n        };\n\n        return self.sendCommand('RequestAudioStreamIn', params, options, requestAudioStreamInCallback, failCallback);\n    };\n\n    var requestAudioStreamInCallback = function (connectionRequest) {\n        callbackAfterRequest(connectionRequest, 'Error requesting video push stream from the server.', function () {\n            connectionRequest.options.successCallback && connectionRequest.options.successCallback(connectionRequest.response.outputParameters);\n        });\n    };\n\n    var closeVideoConnection = function (videoConnection) {\n\n        self.closeStream(videoConnection.videoId);\n        videoConnection.isReusable && XPMobileSDK.library.VideoConnectionPool.removeCamera(videoConnection.cameraId, videoConnection.videoId);\n\n    };\n\n    var restartVideoConnection = function (videoConnection) {\n\n        videoConnection.request.parameters.MethodType = 'Push';\n\n        self.closeStream(videoConnection.videoId);\n        self.sendCommand('RequestStream', videoConnection.request.parameters, videoConnection.request.options, requestStreamCallback);\n    };\n\n    /**\n     * Sends a RequestAudioStream command to the server.\n     * \n     * @param {Object} params: Parameters to sent to the server\n     * @param {Function} successCallback: function that is called when the command execution was successful and the result is passed as a parameter.\n     * @param {Function} failCallback: function that is called when the command execution has failed and the error is passed as a parameter.\n     * \n     * @return the request object\n     */\n    this.RequestAudioStream = function (params, successCallback, failCallback) {\n        return self.sendCommand('RequestAudioStream', params, { successCallback: successCallback }, requestAudioStreamCallback, failCallback);\n    };\n\n    /**\n     * Sends a RequestAudioStream command to the server.\n     * \n     * @method requestAudioStream\n     * @param {String} microphoneId: the unique GUID of the microphone that should be started\n     * @param {Function} successCallback: function that is called when the command execution was successful and the result is passed as a parameter.\n     * @param {Function} failCallback: function that is called when the command execution has failed and the error is passed as a parameter.\n     * @param options: optional parameter containing various configuration, includes:\n     * \t\t\t- {int} signal: live or playback\n     * \t\t\t- {int} compressionLevel\n     * \t\t\t- {boolean} reuseConnection - if true, the API will reuse existing connections for the same microphone\n     * \n     * @return the request object\n     */\n    this.requestAudioStream = function (microphoneId, options, successCallback, failCallback) {\n\n        options = options || {};\n\n        var params = {\n            ItemId: microphoneId,\n            MethodType: \"Push\",\n            SignalType: options.signal === XPMobileSDK.interfaces.VideoConnectionSignal.playback ? 'Playback' : 'Live',\n            StreamType: \"Transcoded\",\n            StreamDataType: \"Audio\",\n            AudioEncoding: \"Mp3\",\n            CloseConnectionOnError: \"Yes\"\n        };\n\n        if (options.playbackControllerId) {\n            params.PlaybackControllerId = options.playbackControllerId;\n        }\n\n        if (options.AudioCompressionLevel) {\n            params.ComprLevel = options.AudioCompressionLevel;\n        }\n        else if (XPMobileSDKSettings.AudioCompressionLevel) {\n            params.ComprLevel = XPMobileSDKSettings.AudioCompressionLevel;\n        }\n\n        options = {\n            successCallback: successCallback,\n            microphoneId: microphoneId\n        };\n        return self.sendCommand('RequestAudioStream', params, options, requestAudioStreamCallback, failCallback);\n    };\n\n    var requestAudioStreamCallback = function (connectionRequest) {\n        callbackAfterRequest(connectionRequest, 'Error starting stream for microphone ' + connectionRequest.options.microphoneId, function () {\n\n            var streamId = connectionRequest.response.outputParameters.StreamId;\n            logger.log('Server prepared stream ID ' + streamId + ' for microphone ' + connectionRequest.options.microphoneId);\n\n            connectionRequest.options.successCallback && connectionRequest.options.successCallback(connectionRequest);\n        });\n    };\n\n    /**\n     * Toggles the Direct streaming setting\n     *\n     * @method toggleDirectStreaming\n     *\n     * @param {Boolean} enabled - Enable or not direct streaming\n     */\n    this.toggleDirectStreaming = function (enabled) {\n        self.directStreamingClient = !!enabled;\n        self.storage && self.storage.setItem('directStreamingClient', self.directStreamingClient);\n        XPMobileSDK.library.VideoConnection.instances.forEach(function (videoConnection) {\n            videoConnection.getState() === XPMobileSDK.library.VideoConnectionState.running && videoConnection.close();\n        });\n    };\n\n    /**\n     * Toggles the Analytic Data setting\n     *\n     * @method toggleAnalytics\n     *\n     * @param {Boolean} enabled - Enable or not analytics\n     */\n    this.toggleAnalytics = function (enabled) {\n        self.analytics = !!enabled;\n        self.storage && self.storage.setItem('analytics', self.analytics);\n\n        window.dispatchEvent(new CustomEvent(\"AnalyticsSettingChanged\"));\n    };\n\n    /**\n     * Sends a ChangeStream command to the server. Changes the visual part of the stream that the given videoConnection represents. \n     * \n     * @method changeStream\n     * @param {VideoConnection} videoConnection\n     * @param cropping: contains top, left, bottom, and right properties for cropping\n     * @param size: contains width and height properties that define the received frame size\n     * @param {Function} successCallback: function that is called when the command execution was successful and the result is passed as a parameter.\n     * @param {Function} failCallback: function that is called when the command execution has failed and the error is passed as a parameter.\n     */\n    this.changeStream = function (videoConnection, cropping, size, successCallback, failCallback) {\n\n        var params = {\n            VideoConnection: videoConnection,\n            VideoId: videoConnection.videoId,\n            DestWidth: Math.round(size.width),\n            DestHeight: Math.round(size.height)\n        };\n\n        if (cropping.top !== undefined) {\n            params.SrcTop = Math.round(cropping.top);\n        }\n\n        if (cropping.left !== undefined) {\n            params.SrcLeft = Math.round(cropping.left);\n        }\n\n        if (cropping.right !== undefined) {\n            params.SrcRight = Math.round(cropping.right);\n        } else if (cropping.width !== undefined) {\n            params.SrcRight = Math.round(cropping.width) + Math.round(cropping.left);\n        }\n\n        if (cropping.bottom !== undefined) {\n            params.SrcBottom = Math.round(cropping.bottom);\n        } else if (cropping.height !== undefined) {\n            params.SrcBottom = Math.round(cropping.height) + Math.round(cropping.top);\n        }\n\n        return self.ChangeStream(params, successCallback, failCallback);\n    };\n\n    /**\n     * Sends a ChangeStream command to the server.\n     * \n     * @param {Object} params: Parameters to sent to the server\n     * @param {Function} successCallback: function that is called when the command execution was successful and the result is passed as a parameter.\n     * @param {Function} failCallback: function that is called when the command execution has failed and the error is passed as a parameter.\n     * \n     * @return the request object\n     */\n    this.ChangeStream = function (params, successCallback, failCallback) {\n        return self.sendCommand('ChangeStream', params, { successCallback: successCallback }, changeStreamCallback, failCallback);\n    };\n\n    var changeStreamCallback = function (connectionRequest) {\n        callbackAfterRequest(connectionRequest, 'Error changing stream.', function () {\n            connectionRequest.options.successCallback && connectionRequest.options.successCallback();\n        });\n    };\n\n    /**\n     * Sends a ChangeStream command to the server. Changes the motion detection settings of the stream that the given videoConnection represents. \n     * \n     * @method motionDetection\n     * @param {VideoConnection} videoConnection\n     * @param {Object} options: contains any or all of the motion, sensitivity, grid and cpu parameters.\n     */\n    this.motionDetection = function (videoConnection, options) {\n\n        var params = { VideoId: videoConnection.videoId, VideoConnection: videoConnection };\n\n        var motion = options.motion || options.MotionAmount;\n        if (motion) params.MotionAmount = Math.round(motion);\n\n        var sensitivity = options.sensitivity || options.SensitivityAmount;\n        if (sensitivity) params.SensitivityAmount = Math.round(sensitivity);\n\n        var cpu = options.cpu || options.CPUImpactAmount;\n        if (cpu) params.CPUImpactAmount = Math.round(cpu);\n\n        var grid = options.grid || options.RegionGrid;\n        if (/^\\d+x\\d+(;\\d+)+$/.test(grid)) params.RegionGrid = grid;\n\n        return self.ChangeStream(params);\n    };\n\n    /**\n     * Sends a GetPtzPresets command to the server. \n     * \n     * @method getPtzPresets\n     * @param {GUID} cameraId: the current camera related to the presets this request will return\n     * @param {Function} successCallback, failCallback: failCallback\n     */\n    this.getPtzPresets = function (cameraId, successCallback, failCallback) {\n\n        var params = {\n            CameraId: cameraId\n        };\n\n        return self.sendCommand('GetPtzPresets', params, { successCallback: successCallback }, getPtzPresetsCallback, failCallback);\n    };\n\n    var getPtzPresetsCallback = function (connectionRequest) {\n        callbackAfterRequest(connectionRequest, 'Error getting PTZ presets.', function () {\n            delete connectionRequest.response.outputParameters.Challenge;\n            connectionRequest.options.successCallback && connectionRequest.options.successCallback(connectionRequest.response.outputParameters);\n        });\n    };\n\n    /**\n     * Closes a stream by the given videoId.\n     * \n     * @method closeStream\n     * @param {String} videoId\n     */\n    this.closeStream = function (videoId) {\n        return self.CloseStream({ VideoId: videoId });\n    };\n\n    /**\n         * Closes a stream by the given videoId.\n         * \n         * @method closeStream\n         * @param {String} videoId\n         */\n    this.closeAudioStream = function (videoId) {\n        return self.sendCommand('CloseStream', { VideoId: videoId }, { successCallback: null }, closeAudioStreamCallback);\n    };\n\n    /**\n     * Sends a CloseStream command to the server.\n     * \n     * @param {Object} params: Parameters to sent to the server\n     * @param {Function} successCallback: function that is called when the command execution was successful and the result is passed as a parameter.\n     * @param {Function} failCallback: function that is called when the command execution has failed and the error is passed as a parameter.\n     * \n     * @return the request object\n     */\n    this.CloseStream = function (params, successCallback, failCallback) {\n        return self.sendCommand('CloseStream', params, { successCallback: successCallback }, closeStreamCallback, failCallback);\n    };\n\n    var closeStreamCallback = function (connectionRequest) {\n        closeStreamGeneralCallback(connectionRequest);\n        callMethodOnObservers('closeStreamFinished');\n    };\n\n    var closeAudioStreamCallback = function (connectionRequest) {\n        closeStreamGeneralCallback(connectionRequest);\n    };\n\n    var closeStreamGeneralCallback = function (connectionRequest) {\n        requestFinished(connectionRequest);\n\n        var connectionResponse = connectionRequest.response;\n\n        if (!connectionResponse || connectionResponse.isError) {\n            if (connectionRequestResponseIsTerminal(connectionRequest)) {\n                lostConnection();\n            }\n        }\n    };\n\n    /**\n     * This singleton manages the FPS of all Cameras in the VideoConnectionPool (increasing/decreasing FPS), but never dropping bellow minFps and not exceeding the maxFps.\n     * It is triggered by the LiveMessage in push mode, when the message has difficulties receiving its response from the server due to low bandwidth and heavy incoming traffic for the VideoConnections.\n     */\n    var fps = new function () {\n\n        var decreasing = false;\n        var increasing = false;\n        var current = maxFps;\n        var stable = minFps;\n        var queueEmptyCount = 0;\n\n        /**\n         * Manages FPS increase/decrease depending on the given queue length, as well as the number of consecutive zero queue lengths.\n         * e.g. If the LiveMessage queue length parameter reaches 2 (meaning that by the sending of the third LiveMessage the previous 2 are still waiting for response), the FPS has to be dropped so, \n         * that the LiveMessage responses can be received from the server. The drop is to a safe FPS level we know of, bellow the current one, or to 1 FPS (in order to free the communication channel ASAP).\n         * e.g. If the LiveMessage queue length is zero and was zero for the past 5 consecutive LiveMessages, there will be an attempt to recover the FPS (if bellow maximum) up to its maximum by increasing it with 1 FPS at a time.\n         * \n         * @param {Number} queueLength: current queue size\n         */\n        this.manage = function (queueLength) {\n\n            if (queueLength) {\n                queueEmptyCount = 0;\n                if (queueLength > 1) {\n                    this.decrease();\n                }\n            }\n            else {\n                queueEmptyCount++;\n                if (queueEmptyCount > 5) {\n                    this.increase();\n                    queueEmptyCount = 0;\n                }\n            }\n\n        }.bind(this);\n\n        /**\n         * Decreases the FPS within the given boundies.\n         */\n        this.decrease = function () {\n\n            if (decreasing || current === minFps) return;\n\n            decreasing = true;\n            current = current > stable ? stable : minFps;\n\n            logger.warn('Decreasing FPS to ' + current);\n            change(current, function () { decreasing = false; }.bind(this));\n\n        }.bind(this);\n\n        /**\n         * Increases the FPS within the given boundies.\n         */\n        this.increase = function () {\n\n            if (increasing || current === maxFps) return;\n\n            increasing = true;\n            stable = current++;\n\n            logger.warn('Increasing FPS to ' + current);\n            change(current, function () { increasing = false; }.bind(this));\n\n        }.bind(this);\n\n\n        /**\n         * Changes the FPS to a given level.\n         *\n         * @param {Number} fps: target FPS level.\n         * @param {Function} successCallback: function that is called when the command execution was successful and the result is passed as a parameter.\n         * @param {Function} failCallback: function that is called when the command execution has failed and the error is passed as a parameter.\n         */\n        var change = function (fps, successCallback, failCallback) {\n\n            for (var i = 0, camera; i < XPMobileSDK.library.VideoConnectionPool.cameras.length; i++) {\n                camera = XPMobileSDK.library.VideoConnectionPool.cameras[i];\n\n                if (!camera.videoConnection || !camera.videoConnection.videoId) continue;\n\n                var params = {\n                    VideoId: camera.videoConnection.videoId,\n                    Fps: fps,\n                    VideoConnection: camera.videoConnection\n                };\n                self.ChangeStream(params, successCallback, failCallback);\n\n            }\n\n        }.bind(this);\n\n    };\n\n    /**\n     * Sends a ControlPTZ command to the server. Controls PTZ Preset. The parameter needs to be a valid preset name, otherwise nothing will happen.\n     * \n     * @method ptzPreset\n     * @param {VideoConnection} videoConnection: the current stream related to the preset this request will activate\n     * @param {String} presetName: the name of the preset to be activated\n     */\n    this.ptzPreset = function (videoConnection, presetName) {\n\n        var params = {\n            CameraId: videoConnection.cameraId,\n            PtzPreset: presetName\n        };\n\n        return self.sendCommand('ControlPTZ', params, null, controlPTZCallback);\n    };\n\n    /**\n     * Sends a ControlPTZ command to the server. Controls PTZMove. Directions are: 'Up', 'Down', 'Left', 'Right', 'UpLeft', 'UpRight', 'DownLeft', 'DownRight', 'ZoomIn', 'ZoomOut', 'Home'.\n     * The camera needs to support PTZ, otherwise nothing will happen.\n     * \n     * @method ptzMove\n     * @param {VideoConnection} videoConnection: the current stream related to the PTZ this request will activate\n     * @param {String} direction: 'Up', 'Down', 'Left', 'Right', 'UpLeft', 'UpRight', 'DownLeft', 'DownRight', 'ZoomIn', 'ZoomOut', 'Home'\n     */\n    this.ptzMove = function (videoConnection, direction) {\n\n        var params = {\n            CameraId: videoConnection.cameraId,\n            PtzMove: direction,\n            VideoConnection: videoConnection\n        };\n\n        return self.sendCommand('ControlPTZ', params, null, controlPTZCallback);\n    };\n\n    /**\n     * It is used to change the camera orientation by moving it in the direction of the tap.\n     * The reference point of the movement is the center of the screen.\n     * The tap and the reference points are used to calculate the direction and the speed of the camera movement.\n     *\n     * @method tapAndHold\n     * @param params:\n     *          \t\t- CameraId: String\n     *          \t\t- GestureXPercent: the percentage of distance between start and finish [-100:100]\n     *          \t\t- GestureYPercent: the percentage of distance between start and finish [-100:100]\n     */\n    this.ptzTapAndHold = function (params, successCallback, failCallback) {\n        params['Type'] = 'TapAndHold';\n        params['GestureTimeout'] = 2000;\n\n        return self.sendCommand('ControlPTZ', params, { successCallback: successCallback }, ptzTapAndHoldCallback, failCallback);\n    };\n\n    var ptzTapAndHoldCallback = function (connectionRequest) {\n        callbackAfterRequest(connectionRequest, 'Error controlling PTZ', function () {\n            connectionRequest.options.successCallback && connectionRequest.options.successCallback();\n        });\n    };\n\n    /**\n     * It is used to change the camera orientation by moving it in the direction of the swipe.\n     * The swipe direction and length are calculated based on the start and end points of the gesture.\n     * The swipe speed is calculated based on the time it took to perform the gesture from the start point to the end point.\n     * The calculated direction defines the direction of the PTZ movement, whereas the length and the speed are used to determine the amount of the PTZ movement.\n     *\n     * @method swipe\n     * @param params:\n     * <pre>\n     *    - CameraId: String\n     *    - GestureXPercent: the percentage of distance between start and finish [-100:100]\n     *    - GestureYPercent: the percentage of distance between start and finish [-100:100]\n     * </pre>\n     */\n    this.ptzSwipe = function (params, gestureDuration) {\n        params['Type'] = 'Swipe';\n        params['GestureDuration'] = gestureDuration;\n\n        return self.sendCommand('ControlPTZ', params, null, controlPTZCallback);\n    };\n\n    /**\n     * Called after ptzMove and ptzPreset response is returned.\n     */\n    var controlPTZCallback = function (connectionRequest) {\n        callbackAfterRequest(connectionRequest, 'Error controlling PTZ');\n    };\n\n    /**\n     * Sends a ChangeStream command to the server. Controls playback speed as a float. Negative number means backwards. 1.0 means normal speed.\n     * \n     * @method playbackSpeed\n     * @param {VideoConnection} videoConnection\n     * @param {Number} speed\n     */\n    this.playbackSpeed = function (videoConnection, speed) {\n\n        var params = {\n            VideoId: videoConnection.videoId,\n            Speed: speed,\n            VideoConnection: videoConnection\n        };\n\n        return self.ChangeStream(params);\n    };\n\n    /**\n     * Sends a ChangeStream command to the server. Seeks to either of: 'DbStart', 'DbEnd', 'PrevSeq', 'NextSeq', 'PrevFrame' or 'NextFrame'.\n     * \n     * @method playbackSeek\n     * @param {VideoConnection} videoConnection\n     * @param {String} seekType: 'DbStart', 'DbEnd', 'PrevSeq', 'NextSeq', 'PrevFrame' or 'NextFrame'\n     */\n    this.playbackSeek = function (videoConnection, seekType) {\n\n        var params = {\n            VideoId: videoConnection.videoId,\n            SeekType: seekType,\n            VideoConnection: videoConnection\n        };\n\n        return self.ChangeStream(params);\n    };\n\n    /**\n     * Sends a ChangeStream command to the server. Goes to the closest possible match of specific time.\n     * \n     * @method playbackGoTo\n     * @param {VideoConnection} videoConnection\n     * @param {Number} millisecondsSinceUnixEpoch\n     * @param {String} seekType: optional, 'Time' (default), 'TimeOrBefore', 'TimeOrAfter'\n     * @param {Function} successCallback: function that is called when the command execution was successful and the result is passed as a parameter.\n     * @param {Function} failCallback: function that is called when the command execution has failed and the error is passed as a parameter.\n     */\n    this.playbackGoTo = function (videoConnection, millisecondsSinceUnixEpoch, seekType, successCallback, failCallback) {\n\n        // TODO reverse the arguments\n\n        var params = {\n            VideoId: videoConnection.videoId,\n            SeekType: seekType || 'Time',\n            Time: millisecondsSinceUnixEpoch,\n            VideoConnection: videoConnection\n        };\n\n        return self.ChangeStream(params, successCallback, failCallback);\n    };\n\n    /**\n     * Sends a GetThumbnail command to the server in order to obtain an image representation for a given camera.\n     * \n     * @method getThumbnail\n     * @param {String} cameraId: the unique GUID of the camera\n     * @param {Function} successCallback: function that is called when the command execution was successful and the result is passed as a parameter.\n     * @param {Function} failCallback: function that is called when the command execution has failed and the error is passed as a parameter.\n     */\n    this.getThumbnail = function (cameraId, successCallback, failCallback) {\n\n        var params = {\n            CameraId: cameraId,\n            ComprLevel: 70\n        };\n\n        return self.sendCommand('GetThumbnail', params, { successCallback: successCallback }, getThumbnailCallback, failCallback);\n    };\n\n    var getThumbnailCallback = function (connectionRequest) {\n        callbackAfterRequest(connectionRequest, 'Error getting thumbnail.', function () {\n\n            if (connectionRequest.response.thumbnailBase64) {\n                connectionRequest.options.successCallback && connectionRequest.options.successCallback(connectionRequest.response.thumbnailBase64);\n            }\n        });\n    };\n\n    /**\n     * Gets thumbnail by the given camera id and time. \n     * \n     * @param {Object} params - Object containing the following properties:\n     * <pre>\n     * - {String} cameraId - Id of the requested camera thumbnail\n     * - {Number} time - Miliseconds since start of UNIX epoch, in UTC.\n     * - {Number} width - Max width of the requested camera thumbnail\n     * - {Number} height - Max height of the requested camera thumbnail\n     * </pre>\n     * @param {Function} successCallback: function that is called when the command execution was successful and the result is passed as a parameter.\n     * @param {Function} failCallback: function that is called when the command execution has failed and the error is passed as a parameter.\n     */\n    this.getThumbnailByTime = function (params, successCallback, failCallback) {\n\n        var commandParams = {\n            CameraId: params.cameraId,\n            Time: params.time,\n            SeekType: 'Time'\n        };\n\n        if (params.width) {\n            commandParams.DestWidth = params.width;\n        }\n\n        if (params.height) {\n            commandParams.DestHeight = params.height;\n        }\n\n        return self.sendCommand('GetThumbnailByTime', commandParams, { successCallback: successCallback }, getThumbnailByTimeCallback, failCallback);\n    }\n\n    /**\n     * Called after getThumbnailByTime response is returned.\n     */\n    var getThumbnailByTimeCallback = function (connectionRequest) {\n        callbackAfterRequest(connectionRequest, 'Error getting thumbnail by time', function () {\n            connectionRequest.options.successCallback &&\n                connectionRequest.options.successCallback(connectionRequest.response.outputParameters.Thumbnail,\n                    connectionRequest.response.outputParameters.Timestamp);\n        });\n    };\n\n    /**\n     * Gets the start time of the recordings for a particular camera.\n     * \n     * @method getDBStartTime\n     * @param {String} cameraId\n     * @param {Function} successCallback: function that is called when the command execution was successful and the result is passed as a parameter.\n     * @param {Function} failCallback: function that is called when the command execution has failed and the error is passed as a parameter.\n     */\n    this.getDBStartTime = function (cameraId, successCallback, failCallback) {\n\n        var params = {\n            CameraId: cameraId,\n            SeekType: 'DbStart'\n        };\n\n        return self.sendCommand('GetRecordingTime', params, { successCallback: successCallback }, getDBStartTimeCallback, failCallback);\n    };\n\n    /**\n     * Called after getDBStartTime response is returned.\n     */\n    var getDBStartTimeCallback = function (connectionRequest) {\n        callbackAfterRequest(connectionRequest, 'Error getting recording time', function () {\n            connectionRequest.options.successCallback && connectionRequest.options.successCallback(connectionRequest.response.outputParameters.Time);\n        });\n    };\n\n    /**\n     * Gets the next sequence by given time for the given cameraId. \n     * \n     * @method getNextSequence\n     * @param {String} itemId - (Multiple items possible) ID of the item (camera) (GUID) for which are retrieved Sequences.\n     * @param {Number} timestamp: milliseconds in UTC, a sequence after this moment will be returned\n     * @param {Function} successCallback: function that is called when the command execution was successful and the result is passed as a parameter.\n     * @param {Function} failCallback: function that is called when the command execution has failed and the error is passed as a parameter.\n     */\n    this.getNextSequence = function (itemId, timestamp, successCallback, failCallback) {\n\n        var afterTime = parseInt((new Date().getTime() - timestamp) / 1000);\n        afterTime = afterTime < 0 ? 0 : afterTime;\n\n        var params = {\n            ItemId: itemId,\n            SeqType: 'Recording',\n            Time: timestamp,\n            AfterTime: afterTime,\n            AfterCount: 1,\n            ItemKind: \"Camera\"\n        };\n\n        // debuger.getSequences(params);\n        return self.sendCommand('GetSequences', params, { successCallback: successCallback }, getNextSequenceCallback, failCallback);\n    };\n\n    var getNextSequenceCallback = function (connectionRequest) {\n        callbackAfterRequest(connectionRequest, 'Error getting sequences', function () {\n            if (connectionRequest.response.sequences.length > 0) {\n                connectionRequest.options.successCallback && connectionRequest.options.successCallback(connectionRequest.response.sequences[0]);\n            } else {\n                connectionRequest.options.successCallback && connectionRequest.options.successCallback(null);\n            }\n        });\n        // debuger.result(connectionRequest.response.sequences);\n    };\n\n    /**\n     * Gets the previous sequence by given time. \n     * \n     * @method getPrevSequence\n     * @param {String}  itemId - (Multiple items possible) ID of the item (camera) (GUID) for which are retrieved Sequences.\n     * @param {Number} timestamp: milliseconds in UTC, a sequence before this moment will be returned\n     * @param {Function} successCallback: function that is called when the command execution was successful and the result is passed as a parameter.\n     * @param {Function} failCallback: function that is called when the command execution has failed and the error is passed as a parameter.\n     */\n    this.getPrevSequence = function (itemId, timestamp, successCallback, failCallback) {\n\n        var params = {\n            ItemId: itemId,\n            SeqType: 'Recording',\n            Time: timestamp,\n            BeforeTime: Date.daysToSeconds(30),\n            BeforeCount: 1,\n            ItemKind: \"Camera\"\n        };\n\n        // debuger.getSequences(params);\n        return self.sendCommand('GetSequences', params, { successCallback: successCallback }, getPrevSequenceCallback, failCallback);\n    };\n\n    var getPrevSequenceCallback = function (connectionRequest) {\n        callbackAfterRequest(connectionRequest, 'Error getting sequences', function () {\n            if (connectionRequest.response.sequences.length > 0) {\n                connectionRequest.options.successCallback && connectionRequest.options.successCallback(connectionRequest.response.sequences[0]);\n            } else {\n                connectionRequest.options.successCallback && connectionRequest.options.successCallback(null);\n            }\n        });\n        // debuger.result(connectionRequest.response.sequences);\n    };\n\n    /**\n     * Gets all the sequences in the given interval of time.\n     * \n     * @method getSequenceInInterval\n     * @param {String} itemId - (Multiple items possible) ID of the item (camera) (GUID) for which are retrieved Sequences.\n     * @param {Number} startTime: milliseconds in UTC, the start time of the interval\n     * @param {Number} endTime: milliseconds in UTC, the end time of the interval\n     * @param {String} investigationId - The id of the investigation (export) to be used for extracting the sequences.\n     * @param {Function} successCallback: function that is called when the command execution was successful and the result is passed as a parameter.\n     * @param {Function} failCallback: function that is called when the command execution has failed and the error is passed as a parameter.\n     */\n    this.getSequencesInInterval = function (itemId, startTime, endTime, investigationId, successCallback, failCallback) {\n\n        var params = {\n            ItemId: itemId,\n            SeqType: 'Recording',\n            Time: startTime,\n            AfterTime: parseInt((endTime - startTime) / 1000),\n            AfterCount: 10000,\n            ItemKind: \"Camera\"\n        };\n\n        if (investigationId) {\n            params.InvestigationId = investigationId;\n        }\n\n        return self.sendCommand('GetSequences', params, { successCallback: successCallback }, getSequencesInIntervalCallback, failCallback);\n\n    };\n\n    var getSequencesInIntervalCallback = function (connectionRequest) {\n        callbackAfterRequest(connectionRequest, 'Error getting sequences', function () {\n            connectionRequest.options.successCallback && connectionRequest.options.successCallback(connectionRequest.response.sequences);\n        });\n    };\n\n    /**\n     * Gets all the sequences for the view.\n     * \n     * @method getSequencesForView\n     * @param {Array} itemId - (Multiple items possible) ID of the item (camera) (GUID) for which are retrieved Sequences.\n     * @param {Number} startTime: milliseconds in UTC, the start time of the interval\n     * @param {Number} endTime: milliseconds in UTC, the end time of the interval\n     * @param {Number} minTimeBetweenSequences: (optional) If sequences have time gap lower than this value (in seconds), they will be merged in one big sequence. Default value is 0\n     * @param {Function} successCallback: function that is called when the command execution was successful and the result is passed as a parameter.\n     * @param {Function} failCallback: function that is called when the command execution has failed and the error is passed as a parameter.\n     * @param {SeqType} seqType - Type of the sequences requests � enumeration (Motion, Recording, RecordingWithTrigger).\n     * @param {String} itemKind - The kind of item for which the sequences are being requested (Camera, Microphone).\n     */\n    this.getSequencesForView = function (itemId, startTime, endTime, minTimeBetweenSequences, successCallback, failCallback, seqType = \"Recording\", itemKind = \"Camera\") {\n\n        var params = {\n            ItemId: itemId,\n            SeqType: seqType,\n            Time: startTime,\n            AfterTime: parseInt((endTime - startTime) / 1000),\n            AfterCount: 10000,\n            ItemKind: itemKind,\n            MinTimeBetweenSequences: minTimeBetweenSequences || 1\n        };\n        return self.sendCommand('GetSequences', params, { successCallback: successCallback }, getSequencesForViewCallback, failCallback);\n    };\n\n    var getSequencesForViewCallback = function (connectionRequest) {\n        callbackAfterRequest(connectionRequest, 'Error getting sequences', function () {\n            connectionRequest.options.successCallback && connectionRequest.options.successCallback(connectionRequest.response.sequences);\n        });\n    };\n\n    /**\n     * Gets the exports for the currently logged user.\n     *\n     * @method getUserExports\n     * @param {Function} successCallback: function that is called when the command execution was successful and the result is passed as a parameter.\n     * @param {Function} failCallback: function that is called when the command execution has failed and the error is passed as a parameter.\n     */\n    this.getUserExports = function (successCallback, failCallback) {\n\n        var params = {\n            ExportId: '00000000-0000-0000-0000-000000000000'\n        };\n\n        return self.sendCommand('GetExport', params, { successCallback: successCallback }, getUserExportsCallback, failCallback);\n    };\n\n    /**\n     * Called after getUserExports response is returned.\n     */\n    var getUserExportsCallback = function (connectionRequest) {\n        callbackAfterRequest(connectionRequest, 'Error getting user exports', function () {\n            connectionRequest.options.successCallback && connectionRequest.options.successCallback(connectionRequest.response.exports);\n        });\n    };\n\n    /**\n     * Gets all exports.\n     * \n     * @method getAllExports\n     * @param {Function} successCallback: function that is called when the command execution was successful and the result is passed as a parameter.\n     * @param {Function} failCallback: function that is called when the command execution has failed and the error is passed as a parameter.\n     */\n    this.getAllExports = function (successCallback, failCallback) {\n\n        var params = {\n            ExportId: '{A3B9C5FB-FAAD-42C8-AB73-B79D6FFFDBC1}'\n        };\n\n        return self.sendCommand('GetExport', params, { successCallback: successCallback }, getAllExportsCallback, failCallback);\n    };\n\n    /**\n     * Called after getAllExports response is returned.\n     */\n    var getAllExportsCallback = function (connectionRequest) {\n        callbackAfterRequest(connectionRequest, 'Error getting all exports', function () {\n            connectionRequest.options.successCallback && connectionRequest.options.successCallback(connectionRequest.response.exports);\n        });\n    };\n\n    /**\n     * Create a temporary disposable download link.\n     * \n     * @method createExportDownloadLink\n     * \n     * @param {String} exportId: the uniq id of the export.\n     * @param {String} investigationId: the uniq id of the investigation.\n     * @param {String} exportType: the type of the export: DB, AVI, MKV\n     * @param {Function} successCallback: function that is called when the command execution was successful and the result is passed as a parameter.\n     * @param {Function} failCallback: function that is called when the command execution has failed and the error is passed as a parameter.\n     */\n    this.createExportDownloadLink = function (exportId, investigationId, exportType, successCallback, failCallback) {\n\n        var params = {\n            ExportId: exportId,\n            InvestigationId: investigationId,\n            Type: exportType\n        };\n\n        return self.sendCommand('CreateExportDownloadLink', params, { successCallback: successCallback }, createExportDownloadLinkCallback, failCallback);\n    };\n\n    /**\n     * Called after createExportDownloadLink response is returned.\n     */\n    var createExportDownloadLinkCallback = function (connectionRequest) {\n        callbackAfterRequest(connectionRequest, 'Error getting export download link', function () {\n            connectionRequest.options.successCallback && connectionRequest.options.successCallback(connectionRequest.response.outputParameters.ExportLink);\n        });\n    };\n\n    /**\n     * Gets and export by id.\n     * \n     * @method getExport\n     * @param {String} id: the uniq id of the export.\n     * @param {Function} successCallback: function that is called when the command execution was successful and the result is passed as a parameter.\n     * @param {Function} failCallback: function that is called when the command execution has failed and the error is passed as a parameter.\n     */\n    this.getExport = function (id, successCallback, failCallback) {\n\n        var params = {\n            ExportId: id\n        };\n\n        return self.sendCommand('GetExport', params, { successCallback: successCallback }, getExportCallback, failCallback);\n    };\n\n    /**\n     * Called after getExport response is returned.\n     */\n    var getExportCallback = function (connectionRequest) {\n        callbackAfterRequest(connectionRequest, 'Error getting export', function () {\n\n            if (connectionRequest.response.exports.length === 0) {\n                connectionRequest.options.successCallback && connectionRequest.options.successCallback(null);\n                return;\n            }\n            connectionRequest.options.successCallback && connectionRequest.options.successCallback(connectionRequest.response.exports[0]);\n        });\n    };\n\n    /**\n     * Sends a GetOutputsAndEvents command to the server. \n     * \n     * @method getOutputsAndEvents\n     * @param {Function} successCallback: function that is called when the command execution was successful and the result is passed as a parameter.\n     * @param {Function} failCallback: function that is called when the command execution has failed and the error is passed as a parameter.\n     */\n    this.getOutputsAndEvents = function (successCallback, failCallback) {\n\n        var params = {\n            CameraId: '' // empty string for all cameras\n        };\n\n        return self.sendCommand('GetOutputsAndEvents', params, { successCallback: successCallback }, getOutputsAndEventsCallback, failCallback);\n    };\n\n    var getOutputsAndEventsCallback = function (connectionRequest) {\n        callbackAfterRequest(connectionRequest, 'Error getting outputs and events', function () {\n            connectionRequest.options.successCallback && connectionRequest.options.successCallback(connectionRequest.response.actions);\n        });\n    };\n\n    /**\n     * Gets server statistic (CPU load, network trafic etc.)\n     * \n     * @method getServerStatus\n     * @param {Function} successCallback: function that is called when the command execution was successful and the result is passed as a parameter.\n     * @param {Function} failCallback: function that is called when the command execution has failed and the error is passed as a parameter.\n     */\n    this.getServerStatus = function (successCallback, failCallback) {\n\n        return self.sendCommand('GetServerStatus', {}, { successCallback: successCallback }, getServerStatusCallback, failCallback);\n    };\n\n    /**\n     * Called after getServerStatus command is executed\n     * \n     * @param \t\tconnectionRequest\t\tobject\t\tResponse from AXAJ call\n     */\n    var getServerStatusCallback = function (connectionRequest) {\n        callbackAfterRequest(connectionRequest, 'Error getting server status', function () {\n            connectionRequest.options.successCallback && connectionRequest.options.successCallback(connectionRequest.response.ServerStatus);\n        });\n    };\n\n    /**\n     * Triggers an output or event.\n     * \n     * @method {triggerOutputOrEvent}\n     * @param {String} objectId: the objectId of the item\n     * @param {String} triggerType: 'TriggerOutput' or 'TriggerEvent'\n     * @param {Function} successCallback: function that is called when the command execution was successful and the result is passed as a parameter.\n     * @param {Function} failCallback: function that is called when the command execution has failed and the error is passed as a parameter.\n     */\n    this.triggerOutputOrEvent = function (objectId, triggerType, successCallback, failCallback) {\n\n        var params = {\n            ObjectId: objectId,\n            TriggerType: triggerType\n        };\n\n        return self.sendCommand('RequestActivation', params, { successCallback: successCallback }, triggerOutputOrEventCallback, failCallback);\n    };\n\n    /**\n     * If the command succeeded, the connectionRequest.options.successCallback is called without arguments if defined.\n     * If the command failed, the connectionRequest.options.successCallback is called with the error code if defined.\n     */\n    var triggerOutputOrEventCallback = function (connectionRequest) {\n        callbackAfterRequest(connectionRequest, 'Error triggering output or event.', function () {\n            connectionRequest.options.successCallback && connectionRequest.options.successCallback();\n        });\n    };\n\n    /**\n     * Gets the camera capabilities - export, live, playback, ptz, presets.\n     * \n     * @method getCameraCapabilities\n     * \n     * @param {String} cameraId: unique ID of the camera\n     * @param {Function} successCallback: function that is called when the command execution was successful and the result is passed as a parameter.\n     * @param {Function} failCallback: function that is called when the command execution has failed and the error is passed as a parameter.\n     */\n    this.getCameraCapabilities = function (cameraId, successCallback, failCallback) {\n\n        var params = {\n            CameraId: cameraId\n        };\n\n        return self.sendCommand('GetCapabilities', params, { successCallback: successCallback }, getCameraCapabilitiesCallback, failCallback);\n    };\n\n    /**\n     * Called after getCameraCapabilities response is returned.\n     */\n    var getCameraCapabilitiesCallback = function (connectionRequest) {\n        callbackAfterRequest(connectionRequest, 'Error getting camera capabilities', function () {\n            connectionRequest.options.successCallback && connectionRequest.options.successCallback(connectionRequest.response.outputParameters);\n        });\n    };\n\n    /**\n     * Get new challenges from server\n     * \n     * @param {Object} params: Parameters to sent to the server\n     * @param {Function} successCallback: function that is called when the command execution was successful and the result is passed as a parameter.\n     * @param {Function} failCallback: function that is called when the command execution has failed and the error is passed as a parameter.\n     */\n    this.requestChallenges = function (params, successCallback, failCallback) {\n        return self.sendCommand('RequestChallenges', params, { successCallback: successCallback }, requestChallengesCallback, failCallback);\n    };\n\n    /**\n    * Called after RequestChallenges command is executed\n    * \n    * @param \t\tconnectionRequest\t\tobject\t\tResponse from AXAJ call\n    */\n    var requestChallengesCallback = function (connectionRequest) {\n        callbackAfterRequest(connectionRequest, 'Error getting challenges.', function () {\n            connectionRequest.options.successCallback && connectionRequest.options.successCallback(connectionRequest.response.outputParameters);\n        });\n    };\n\n    /**\n     * Create playback controller\n     * \n     * @param {Object} params: Parameters to sent to the server\n     * @param {Function} successCallback: function that is called when the command execution was successful and the result is passed as a parameter.\n     * @param {Function} failCallback: function that is called when the command execution has failed and the error is passed as a parameter.\n     */\n    this.createPlaybackController = function (params, successCallback, failCallback) {\n        params.MethodType = 'Push';\n        if (!params.CloseOldControllers) {\n            params.CloseOldControllers = 'Yes';\n        }\n        return self.sendCommand('CreatePlaybackController', params, { successCallback: successCallback }, createPlaybackControllerCallback, failCallback);\n    };\n\n    /**\n     * Called when CreatePlaybackController reposne is received\n     * \n     * @param \t\tconnectionRequest\t\tobject\t\tResponse from AXAJ call\n     */\n    var createPlaybackControllerCallback = function (connectionRequest) {\n\n        var connectionResponse = connectionRequest.response;\n        var videoConnection = new XPMobileSDK.library.VideoConnection(\n            connectionResponse.outputParameters.PlaybackControllerId,\n            connectionRequest,\n            {\n                onClose: function () { },\n                onRestart: function () { },\n                onPushFailed: function () { }\n            }\n        );\n        callbackAfterRequest(connectionRequest, 'Error creating playback controller', function () {\n            connectionRequest.options.successCallback && connectionRequest.options.successCallback(videoConnection);\n        });\n    };\n\n    /**\n     * Change several streams at a time\n     * \n     * @param {Object} params: Parameters to sent to the server\n     * @param {Function} successCallback: function that is called when the command execution was successful and the result is passed as a parameter.\n     * @param {Function} failCallback: function that is called when the command execution has failed and the error is passed as a parameter.\n     */\n    this.changeMultipleStreams = function (params, successCallback, failCallback) {\n        return self.sendCommand('ChangeMultipleStreams', params, { successCallback: successCallback }, changeMultipleStreamsCallback, failCallback);\n    };\n\n    /**\n    * Called when ChangeMultipleStreams reposne is received\n    * \n    * @param \t\tconnectionRequest\t\tobject\t\tResponse from AXAJ call\n    */\n    var changeMultipleStreamsCallback = function (connectionRequest) {\n        callbackAfterRequest(connectionRequest, 'Error getting multiple stream data', function () {\n            connectionRequest.options.successCallback && connectionRequest.options.successCallback(connectionRequest.response.outputParameters);\n        });\n    };\n\n    /**\n     * Get all investigations from server\n     * \n     * @param {Function} successCallback: function that is called when the command execution was successful and the result is passed as a parameter.\n     * @param {Function} failCallback: function that is called when the command execution has failed and the error is passed as a parameter.\n     */\n    this.getAllInvestigations = function (successCallback, failCallback) {\n        var params = {\n            ItemId: '{A3B9C5FB-FAAD-42C8-AB73-B79D6FFFDBC1}'\n        };\n        return self.sendCommand('GetInvestigation', params, { successCallback: successCallback }, getInvestigationsCallback, failCallback);\n    };\n\n    /**\n     * Get user investigations from server\n     * \n     * @param {Function} successCallback: function that is called when the command execution was successful and the result is passed as a parameter.\n     * @param {Function} failCallback: function that is called when the command execution has failed and the error is passed as a parameter.\n     */\n    this.getUserInvestigations = function (successCallback, failCallback) {\n        var params = {\n            ItemId: '00000000-0000-0000-0000-000000000000'\n        };\n        return self.sendCommand('GetInvestigation', params, { successCallback: successCallback }, getInvestigationsCallback, failCallback);\n    };\n\n    /**\n     * Called when getAllInvestigations or getUserInvestigations reponse is received\n     * \n     * @param \t\tconnectionRequest\t\tobject\t\tResponse from AXAJ call\n     */\n    var getInvestigationsCallback = function (connectionRequest) {\n        callbackAfterRequest(connectionRequest, 'Error getting investigations', function () {\n            connectionRequest.options.successCallback && connectionRequest.options.successCallback(connectionRequest.response.items);\n        });\n    };\n\n    /**\n     * Gets a specific investigation by its id\n     * \n     * @param id: string, the investigation id\n     * @param {Function} successCallback: function that is called when the command execution was successful and the result is passed as a parameter.\n     * @param {Function} failCallback: function that is called when the command execution has failed and the error is passed as a parameter.\n     */\n    this.getInvestigation = function (id, successCallback, failCallback) {\n        var params = {\n            ItemId: id\n        };\n        return self.sendCommand('GetInvestigation', params, { successCallback: successCallback }, getInvestigationCallback, failCallback);\n    };\n\n    /**\n     * Called when getInvestigation reponse is received\n     * \n     * @param \t\tconnectionRequest\t\tobject\t\tResponse from AXAJ call\n     */\n    var getInvestigationCallback = function (connectionRequest) {\n        callbackAfterRequest(connectionRequest, 'Error getting investigation', function () {\n            connectionRequest.options.successCallback && connectionRequest.options.successCallback(connectionRequest.response.items[0]);\n        });\n    };\n\n    /**\n     * Create investigation to the server\n     * \n     * @param {Object} params: Parameters to sent to the server\n     * @param {Function} successCallback: function that is called when the command execution was successful and the result is passed as a parameter.\n     * @param {Function} failCallback: function that is called when the command execution has failed and the error is passed as a parameter.\n     */\n    this.createInvestigation = function (params, successCallback, failCallback) {\n        return self.sendCommand('CreateInvestigation', params, { successCallback: successCallback }, createInvestigationCallback, failCallback);\n    };\n\n    /**\n    * Called when CreateInvestigation reposne is received\n    * \n    * @param \t\tconnectionRequest\t\tobject\t\tResponse from AXAJ call\n    */\n    var createInvestigationCallback = function (connectionRequest) {\n        callbackAfterRequest(connectionRequest, 'Error creating investigation to the server.', function () {\n            connectionRequest.options.successCallback && connectionRequest.options.successCallback(connectionRequest.response.outputParameters);\n        });\n    };\n\n    /**\n     * Update investigation on the server\n     * \n     * @param {Object} params: Parameters to sent to the server\n     * @param {Function} successCallback: function that is called when the command execution was successful and the result is passed as a parameter.\n     * @param {Function} failCallback: function that is called when the command execution has failed and the error is passed as a parameter.\n     */\n    this.updateInvestigation = function (params, successCallback, failCallback) {\n        return self.sendCommand('UpdateInvestigation', params, { successCallback: successCallback }, updateInvestigationCallback, failCallback);\n    };\n\n    /**\n     * Update investigation data on the server (avoids reexport).\n     * \n     * @param {Object} params: Parameters to sent to the server\n     * @param {Function} successCallback: function that is called when the command execution was successful and the result is passed as a parameter.\n     * @param {Function} failCallback: function that is called when the command execution has failed and the error is passed as a parameter.\n     */\n    this.updateInvestigationData = function (params, successCallback, failCallback) {\n        return self.sendCommand('UpdateInvestigationData', params, { successCallback: successCallback }, updateInvestigationCallback, failCallback);\n    };\n\n    /**\n    * Called when CreateInvestigation reposne is received\n    * \n    * @param \t\tconnectionRequest\t\tobject\t\tResponse from AXAJ call\n    */\n    var updateInvestigationCallback = function (connectionRequest) {\n        callbackAfterRequest(connectionRequest, 'Error updating investigation to the server.', function () {\n            connectionRequest.options.successCallback && connectionRequest.options.successCallback(connectionRequest.response.outputParameters);\n        });\n    };\n\n    /**\n     * Delete investigation from the server\n     * \n     * @param {String} investigationId: Id of investigation to delete\n     * @param {Function} successCallback: function that is called when the command execution was successful and the result is passed as a parameter.\n     * @param {Function} failCallback: function that is called when the command execution has failed and the error is passed as a parameter.\n     */\n    this.deleteInvestigation = function (investigationId, successCallback, failCallback) {\n        return self.sendCommand('DeleteInvestigation', { ItemId: investigationId }, { successCallback: successCallback }, deleteInvestigationCallback, failCallback);\n    };\n\n    /**\n    * Called when DeleteInvestigation reposne is received\n    * \n    * @param \t\tconnectionRequest\t\tobject\t\tResponse from AXAJ call\n    */\n    var deleteInvestigationCallback = function (connectionRequest) {\n        callbackAfterRequest(connectionRequest, 'Error deleteing investigation from the server.', function () {\n            connectionRequest.options.successCallback && connectionRequest.options.successCallback(!connectionRequest.response.isError);\n        });\n    };\n\n    /**\n     * Cancels investigation creation when in progress.\n     * \n     * @param \t\tinvestigationId\t\t\tobject\t\tId of investigation to delete\n     */\n    this.cancelInvestigation = function (investigationId) {\n        return self.sendCommand('CancelInvestigationUpdate', { ItemId: investigationId }, null, cancelInvestigationCallback);\n    };\n\n    /**\n     * Called when CancelInvestigationUpdate reposne is received\n     * \n     * @param \t\tconnectionRequest\t\tobject\t\tResponse from AXAJ call\n     */\n    var cancelInvestigationCallback = function (connectionRequest) {\n        callbackAfterRequest(connectionRequest, 'Error canceling investigation update');\n    };\n\n    /**\n     * Starts an investigation export.\n     * \n     * @method startInvestigationExport\n     * @param {String} investigationId: the uniq id of the investigation.\n     * @param {String} exportType: the type of the export: DB, AVI, MKV\n     * @param {String} includeAudio - YES/NO - flag whether to include audio in the investigation export\n     * @param {String} password - password used to encrypt exported video\n     * @param {Function} successCallback: function that is called when the command execution was successful and the result is passed as a parameter.\n     * @param {Function} failCallback: function that is called when the command execution has failed and the error is passed as a parameter.\n     */\n    this.startInvestigationExport = function (investigationId, exportType, includeAudio, password, successCallback, failCallback) {\n\n        var params = {\n            InvestigationId: investigationId,\n            ExportType: exportType,\n            IncludeAudio: includeAudio\n        };\n        if (password) {\n            params.Password = password;\n        }\n\n        return self.sendCommand('StartInvestigationExport', params, { successCallback: successCallback }, startInvestigationExportCallback, failCallback);\n    };\n\n    /**\n     * Called when startInvestigationExport response is returned\n     * \n     * @param \t\tconnectionRequest\t\tobject\t\tResponse from AXAJ call\n     */\n    var startInvestigationExportCallback = function (connectionRequest) {\n        callbackAfterRequest(connectionRequest, 'Error starting investigation export.', function () {\n            connectionRequest.options.successCallback && connectionRequest.options.successCallback(connectionRequest.response.outputParameters.ExportId);\n        });\n    };\n\n    this.deleteInvestigationExport = function (investigationId, exportType, successCallback, failCallback) {\n\n        var params = {\n            InvestigationId: investigationId,\n            ExportType: exportType\n        };\n\n        return self.sendCommand('DeleteInvestigationExport', params, { successCallback: successCallback }, deleteInvestigationExportCallback, failCallback);\n    };\n\n    /**\n     * Called when deleteInvestigationExport response is returned\n     * \n     * @param \t\tconnectionRequest\t\tobject\t\tResponse from AXAJ call\n     */\n    var deleteInvestigationExportCallback = function (connectionRequest) {\n        callbackAfterRequest(connectionRequest, 'Error deleting investigation export.', connectionRequest.options.successCallback);\n    };\n\n    /**\n     * Get alarms from server.\n     *\n     * @param {Object} params: Parameters to sent to the server\n     * @param {Function} successCallback: function that is called when the command execution was successful and the result is passed as a parameter.\n     * @param {Function} failCallback: function that is called when the command execution has failed and the error is passed as a parameter.\n     */\n    this.getAlarmList = function (params, successCallback, failCallback) {\n\n        params = {\n            MyAlarms: params.MyAlarms || 'No',\n            Timestamp: params.Timestamp,\n            Operator: 'LessThan',\n            Count: params.Count,\n            Priority: params.Priority,\n            State: params.State\n        };\n\n        return self.sendCommand('GetAlarmList', params, { successCallback: successCallback }, getAlarmsCallback, failCallback);\n    };\n\n    /**\n     * Called when GetAlarmList reponse is received\n     * \n     * @param \t\tconnectionRequest\t\tobject\t\tResponse from AXAJ call\n     */\n    var getAlarmsCallback = function (connectionRequest) {\n        callbackAfterRequest(connectionRequest, 'Error getting alarms', function () {\n            connectionRequest.options.successCallback && connectionRequest.options.successCallback(connectionRequest.response.items);\n        });\n    };\n\n    /**\n     * Gets a single alarm. \n     *\n     * @param {Object} params: Parameters to sent to the server\n     * @param {Function} successCallback: function that is called when the command execution was successful and the result is passed as a parameter.\n     * @param {Function} failCallback: function that is called when the command execution has failed and the error is passed as a parameter.\n     */\n    this.getAlarm = function (alarmId, successCallback, failCallback) {\n\n        var params = {\n            AlarmId: alarmId\n        };\n\n        return self.sendCommand('GetAlarmList', params, { successCallback: successCallback }, getAlarmCallback, failCallback);\n    };\n\n    /**\n     * Called when GetAlarmList reponse is received\n     * \n     * @param \t\tconnectionRequest\t\tobject\t\tResponse from AXAJ call\n     */\n    var getAlarmCallback = function (connectionRequest) {\n        callbackAfterRequest(connectionRequest, 'Error getting alarm', function () {\n            connectionRequest.options.successCallback && connectionRequest.options.successCallback(connectionRequest.response.items[0]);\n        });\n    };\n\n    /**\n     * Updates an alarm.\n     *\n     * @param params\n     * @param {Function} successCallback: function that is called when the command execution was successful and the result is passed as a parameter.\n     * @param {Function} failCallback: function that is called when the command execution has failed and the error is passed as a parameter.\n     */\n    this.updateAlarm = function (params, successCallback, failCallback) {\n        return self.sendCommand('UpdateAlarm', params, { successCallback: successCallback }, updateAlarmCallback, failCallback);\n    };\n\n    /**\n     * Called when UpdateAlarm reponse is received\n     * \n     * @param \t\tconnectionRequest\t\tobject\t\tResponse from AXAJ call\n     */\n    var updateAlarmCallback = function (connectionRequest) {\n        callbackAfterRequest(connectionRequest, 'Error updating alarms', function () {\n            connectionRequest.options.successCallback && connectionRequest.options.successCallback();\n        });\n    };\n\n    /**\n     * Gets settings for alarms (Priority, State).\n     * \n     * @param {Function} successCallback: function that is called when the command execution was successful and the result is passed as a parameter.\n     * @param {Function} failCallback: function that is called when the command execution has failed and the error is passed as a parameter.\n     */\n    this.getAlarmDataSettings = function (successCallback, failCallback) {\n        return self.sendCommand('GetAlarmDataSettings', {}, { successCallback: successCallback }, getAlarmDataSettingsCallback, failCallback);\n    };\n\n    /**\n     * Called when GetAlarmList reponse is received\n     * \n     * @param \t\tconnectionRequest\t\tobject\t\tResponse from AXAJ call\n     */\n    var getAlarmDataSettingsCallback = function (connectionRequest) {\n        callbackAfterRequest(connectionRequest, 'Error getting alarm data settings', function () {\n            connectionRequest.options.successCallback && connectionRequest.options.successCallback(connectionRequest.response.items);\n        });\n    };\n\n    /**\n     * Gets list of users for the specified alarm. The alarm can be assigned to any one of these users. \n     *\n     * @param {String} alarmId: Unique ID of the alarm\n     * @param {Function} successCallback: function that is called when the command execution was successful and the result is passed as a parameter.\n     * @param {Function} failCallback: function that is called when the command execution has failed and the error is passed as a parameter.\n     */\n    this.getAlarmUsers = function (alarmId, successCallback, failCallback) {\n        return self.sendCommand('GetPermittedUsers', { SourceId: alarmId }, { successCallback: successCallback }, getAlarmUsersCallback, failCallback);\n    }\n\n    /**\n     * Called when GetPermittedUsers reponse is received\n     * \n     * @param \t\tconnectionRequest\t\tobject\t\tResponse from AXAJ call\n     */\n    var getAlarmUsersCallback = function (connectionRequest) {\n        callbackAfterRequest(connectionRequest, 'Error getting permitted users for alarm', function () {\n            connectionRequest.options.successCallback && connectionRequest.options.successCallback(connectionRequest.response.items);\n        });\n    };\n\n    /**\n     * Acknowledges the given alarm.\n     *\n     * @param {String} alarmId: Unique ID of the alarm\n     * @param {Function} successCallback: function that is called when the command execution was successful and the result is passed as a parameter.\n     * @param {Function} failCallback: function that is called when the command execution has failed and the error is passed as a parameter.\n     */\n    this.acknowledgeAlarm = function (alarmId, successCallback, failCallback) {\n        return self.sendCommand('AcknowledgeAlarm', { Id: alarmId }, { successCallback: successCallback }, acknowledgeAlarmCallback, failCallback);\n    }\n\n    /**\n     * Called when GetPermittedUsers reponse is received\n     * \n     * @param \t\tconnectionRequest\t\tobject\t\tResponse from AXAJ call\n     */\n    var acknowledgeAlarmCallback = function (connectionRequest) {\n        callbackAfterRequest(connectionRequest, 'Error acknowledging alarm', function () {\n            connectionRequest.options.successCallback && connectionRequest.options.successCallback();\n        });\n    };\n\n    /**\n     * Gets a list of bookmarks. There are 3 valid usages of the command.\n     * The first one is to provide Count in order to retrieve only the latest bookmarks.\n     * The second one is to provide BookmarkId in order to retrieve a single bookmark.\n     * And the last one is to get a list of bookmarks searching from specified bookmark - than BookmarkId and Count should be provided.\n     *\n     * @method GetBookmarks\n     * @param {Object} params - Parameters to sent to the server.  May contain:\n     * <pre>\n     * - {String} BookmarkId - GUID of the Bookmark.\n     *\t\t\t\t\t\t   If specified along with Count, StartTime will be ignored and the Bookmark will be considered as a start time of the search interval.\n     *\t\t\t\t\t\t   If only BookmarkId is specified than single bookmark will be returned as a result\n     * - {Number} Count - Maximum number of bookmarks to be returned in the result. If you want to retrieve a specific bookmark you should not specify the count, but provide the BookmarkId only.\n     * - {String} StartTime - (Optional) Start time of the search interval. It specifies from where the search of bookmark will begin. If not specified current time will be considered as a start time.\n     * - {String} EndTime - (Optional) End time of the search interval. If the EndTime is set before the StartTime than the bookmarks will be returned in reversed order again starting to search from StartTime to EndTime.\n     * - {String} MyBookmarks - (Optional)YES/NO - flag whether to send only my Bookmarks\n     * - {String} Keyword - (Optional)Search string to appear in either of the fields 'Reference', 'Header', 'Description'\n     * - {String} SearchCameraIds - (Optional) Included cameras GUIDs in a comma separated string\n     * </pre>\n     * @param {Function} successCallback - function that is called when the command execution was successful and the result is passed as a parameter.\n     * @param {Function} failCallback - function that is called when the command execution has failed and the error is passed as a parameter.\n     */\n    this.GetBookmarks = function (params, successCallback, failCallback) {\n        return self.sendCommand('GetBookmarks', params, { successCallback: successCallback }, getBookmarksCallback, failCallback);\n    };\n\n    /**\n     * Get bookmarks from server.\n     *\n     * @param {Object} params: Parameters to sent to the server\n     * @param {Function} successCallback: function that is called when the command execution was successful and the result is passed as a parameter.\n     * @param {Function} failCallback: function that is called when the command execution has failed and the error is passed as a parameter.\n     */\n    this.getBookmarks = function (params, successCallback, failCallback) {\n\n        var data = {\n            MyBookmarks: params.MyBookmarks || 'No',\n            BookmarkId: params.BookmarkId,\n        };\n\n        if (params.Count) {\n            data['Count'] = params.Count;\n        }\n\n        if (params.StartTime) {\n            data['StartTime'] = params.StartTime;\n        }\n\n        if (params.EndTime) {\n            data['EndTime'] = params.EndTime;\n        }\n\n        if (params.Keyword) {\n            data['Keyword'] = params.Keyword;\n        }\n\n        if (params.SearchCameraIds) {\n            data['SearchCameraIds'] = params.SearchCameraIds;\n        }\n\n        return self.sendCommand('GetBookmarks', data, { successCallback: successCallback }, getBookmarksCallback, failCallback);\n    };\n\n    /**\n     * Called when GetAlarmList reponse is received\n     * \n     * @param \t\tconnectionRequest\t\tobject\t\tResponse from AXAJ call\n     */\n    var getBookmarksCallback = function (connectionRequest) {\n        callbackAfterRequest(connectionRequest, 'Error getting bookmarks', function () {\n            connectionRequest.options.successCallback && connectionRequest.options.successCallback(connectionRequest.response.items);\n        });\n    };\n\n    /**\n     * Deletes bookmark by id. \n     * \n     * @method deleteBookmark\n     * @param {String} id: the unique id of the bookmark.\n     * @param {Function} successCallback: function that is called when the command execution was successful and the result is passed as a parameter.\n     * @param {Function} failCallback: function that is called when the command execution has failed and the error is passed as a parameter.\n     */\n    this.deleteBookmark = function (id, successCallback, failCallback) {\n\n        var params = {\n            BookmarkId: id\n        };\n\n        return self.sendCommand('DeleteBookmark', params, { successCallback: successCallback }, deleteBookmarkCallback, failCallback);\n    };\n\n    /**\n     * Called after deleteBookmark response is returned.\n     */\n    var deleteBookmarkCallback = function (connectionRequest) {\n        callbackAfterRequest(connectionRequest, 'Error deleting bookmark.', function () {\n            connectionRequest.options.successCallback && connectionRequest.options.successCallback();\n        });\n    };\n\n    /**\n     * Request the next camera for the given carousel.\n     * \n     * @param videoId: string\n     */\n    this.prevCarouselCamera = function (videoId) {\n        return self.sendCommand('ControlCarousel', { VideoId: videoId, CarouselCommand: 'PreviousCamera' }, null, prevCarouselCameraCallback);\n    };\n\n    /**\n     * Called when prevCarouselCamera response is returned\n     * \n     * @param \t\tconnectionRequest\t\tobject\t\tResponse from AXAJ call\n     */\n    var prevCarouselCameraCallback = function (connectionRequest) {\n        callbackAfterRequest(connectionRequest, 'Error getting prev camera from carousel');\n    };\n\n    /**\n     * Request the next camera for the given carousel.\n     * \n     * @param {String} videoId: Id of the video\n     */\n    this.nextCarouselCamera = function (videoId) {\n        return self.sendCommand('ControlCarousel', { VideoId: videoId, CarouselCommand: 'NextCamera' }, null, nextCarouselCameraCallback);\n    };\n\n    /**\n     * Called when prevCarouselCamera response is returned\n     * \n     * @param \t\tconnectionRequest\t\tobject\t\tResponse from AXAJ call\n     */\n    var nextCarouselCameraCallback = function (connectionRequest) {\n        callbackAfterRequest(connectionRequest, 'Error getting next camera from carousel');\n    };\n\n    /**\n     * Pauses a carousel.\n     * \n     * @param videoId: string\n     */\n    this.pauseCarousel = function (videoId) {\n        return self.sendCommand('ControlCarousel', { VideoId: videoId, CarouselCommand: 'PauseCarousel' }, null, pauseCarouselCallback);\n    };\n\n    /**\n     * Called when pauseCarousel response is returned\n     * \n     * @param \t\tconnectionRequest\t\tobject\t\tResponse from AXAJ call\n     */\n    var pauseCarouselCallback = function (connectionRequest) {\n        callbackAfterRequest(connectionRequest, 'Error pausing carousel');\n    };\n\n    /**\n     * Pauses a carousel.\n     * \n     * @method resumeCarousel\n     * \n     * @param {String} videoId: ID of the video\n     */\n    this.resumeCarousel = function (videoId) {\n        return self.sendCommand('ControlCarousel', { VideoId: videoId, CarouselCommand: 'ResumeCarousel' }, null, resumeCarouselCallback);\n    };\n\n    /**\n     * Called when resumeCarousel response is returned\n     * \n     * @param \t\tconnectionRequest\t\tobject\t\tResponse from AXAJ call\n     */\n    var resumeCarouselCallback = function (connectionRequest) {\n        callbackAfterRequest(connectionRequest, 'Error resuming carousel');\n    };\n\n    this.registerForNotifications = function (setting, successCallback, failCallback) {\n        var browser = $.getBrowser();\n        var deviceName = browser.name + \" \" + browser.version + \", \" + browser.os;\n        var params = {\n            Settings: setting,\n            DeviceName: XPMobileSDK.library.Connection.dh.encodeString(deviceName),\n            DeviceId: XPMobileSDK.library.Connection.connectionId\n        };\n        return self.RegisterForNotifications(params, successCallback, failCallback);\n    };\n\n    this.RegisterForNotifications = function (params, successCallback, failCallback) {\n        return self.sendCommand('RegisterForNotifications', params, { successCallback: successCallback }, registerForNotificationsCallback, failCallback);\n    };\n\n    var registerForNotificationsCallback = function (connectionRequest) {\n        callbackAfterRequest(connectionRequest, 'Error register for notifications.', function () {\n            connectionRequest.options.successCallback && connectionRequest.options.successCallback(connectionRequest.response.items);\n        });\n    };\n\n    this.CreateBookmark = function (params, successCallback, failCallback) {\n        return self.sendCommand('CreateBookmark', params, { successCallback: successCallback }, createBookmarkCallback, failCallback);\n    };\n\n    var createBookmarkCallback = function (connectionRequest) {\n        callbackAfterRequest(connectionRequest, 'Error creating a bookmark.', function () {\n            connectionRequest.options.successCallback && connectionRequest.options.successCallback(connectionRequest.response.items);\n        });\n    };\n\n    this.RequestBookmarkCreation = function (params, successCallback, failCallback) {\n        return self.sendCommand('RequestBookmarkCreation', params, { successCallback: successCallback }, requestBookmarkCreationCallback, failCallback);\n    };\n\n    var requestBookmarkCreationCallback = function (connectionRequest) {\n        callbackAfterRequest(connectionRequest, 'Error requesting a bookmark.', function () {\n            connectionRequest.options.successCallback && connectionRequest.options.successCallback(connectionRequest.response.outputParameters);\n        });\n    };\n\n    this.UpdateBookmark = function (params, successCallback, failCallback) {\n        return self.sendCommand('UpdateBookmark', params, { successCallback: successCallback }, updateBookmarkCallback, failCallback);\n    };\n\n    var updateBookmarkCallback = function (connectionRequest) {\n        callbackAfterRequest(connectionRequest, 'Error update a bookmark.', function () {\n            connectionRequest.options.successCallback && connectionRequest.options.successCallback(connectionRequest.response.items);\n        });\n    };\n\n    /**\n     * A general callback to be called after a request operation. \n     * Notifies that the request is finished, checks the response for errors, print error message if necessary and calls the callee callback with the appropriate argument(s).\n     *\n     * @param connectionRequest.\n     * @param errorMessage: logged in the console in case of an error.\n     * @param callback\n     */\n    var callbackAfterRequest = function (connectionRequest, errorMessage, callback) {\n\n        requestFinished(connectionRequest);\n\n        var connectionResponse = connectionRequest.response;\n\n        if (!connectionResponse || connectionResponse.isError) {\n            if (connectionRequestResponseIsTerminal(connectionRequest)) {\n                logger.error(\"The application has lost connection due to connectionRequestResponseIsTerminal\");\n                logger.log(errorMessage);\n                lostConnection();\n            }\n            else {\n                if (errorMessage) {\n                    logger.error(errorMessage);\n                }\n\n                if (connectionRequest.options.failCallback) {\n                    connectionRequest.options.failCallback(connectionResponse.error, connectionResponse);\n                }\n                else if (connectionRequest.options.successCallback) {\n                    connectionRequest.options.successCallback(null, connectionResponse.error, connectionResponse);\n                }\n            }\n        }\n        else if (callback) {\n            callback();\n        }\n    };\n\n    /**\n     * Sends requests to the server. Creates ConnectionRequest instances. \n     * \n     * @method sendCommand\n     * \n     * @param commandName: string, the name of the command\n     * @param requestParams: json object, the parameters of the command\n     * @param options: object, optional, can contain:\n     * \t\t\t\t- timeout: integer, time interval in milliseconds after which the request will be aborted\n     * \t\t\t\t- reuseConnection: boolean, flag to reuse connection or not\n     * \t\t\t\t- viewId: string, the unique GUID of the view that we will work on\n     * \t\t\t\t- cameraId: String, the unique GUID of the camera that should be started\n     * \t\t\t\t- successCallback: function, callback that is provided by the client code of the Network API which will be called during the execution of the callback parameter.\n     * @param successCallback: function, the callback to be called after the response is returned and parsed\n     * @param failCallback: function, callback that is provided by the client code of the Network API which will be called if something is wrong with the command.\n     */\n    this.sendCommand = function (commandName, requestParams, options, successCallback, failCallback) {\n\n        requestParams = requestParams || {};\n\n        if (XPMobileSDKSettings.supportsCHAP && self.SecurityEnabled === 'Yes' && self.CHAPSupported === 'Yes') {\n            var challenge = XPMobileSDK.library.CHAP.calculate();\n            if (challenge.Challenge && challenge.ChalAnswer) {\n                requestParams.Challenge = challenge.Challenge;\n                requestParams.ChalAnswer = challenge.ChalAnswer;\n            } else if (XPMobileSDK.library.Connection.state === XPMobileSDK.library.ConnectionStates.working) {\n                logger.error('No challenges to perform the action');\n                return;\n            }\n        }\n\n        options = options || {};\n        if (failCallback) {\n            options.failCallback = failCallback;\n        }\n\n        logger.log('Sending ' + commandName + ' on ' + (new Date()) + 'with ', requestParams);\n\n        var connectionRequest = new XPMobileSDK.library.ConnectionRequest(commandName, getNextSequenceID(), requestParams, options, successCallback);\n\n        requests.push(connectionRequest);\n        return connectionRequest;\n    };\n\n    var requestFinished = function (connectionRequest) {\n        var index = requests.indexOf(connectionRequest);\n        if (index > -1) {\n            requests.splice(index, 1);\n        }\n        var request = {\n            parameters: connectionRequest.params,\n            options: connectionRequest.options\n        };\n        var response = connectionRequest.response && {\n            parameters: connectionRequest.response.outputParameters\n        };\n        callMethodOnObservers('connectionRequestSucceeded', request, response);\n    };\n\n    /**\n     * Each command send to the server has a sequenceID which starts from 1 and is increased with every next request.\n     */\n    var getNextSequenceID = function () {\n        return ++sequenceID;\n    };\n\n    var setState = function (state) {\n        self.state = state;\n        // inform observers of state change\n        callMethodOnObservers('connectionStateChanged');\n    };\n\n    var callMethodOnObservers = function () {\n        if (arguments.length < 1) return;\n        var methodName = arguments[0];\n        var args = Array.prototype.slice.call(arguments, 1);\n\n        observers.filter(observer => observer[methodName]).forEach(function (object) {\n              try {\n                  object[methodName].apply(object, args);\n              } catch (e) {\n                  logger.error(e);\n                  logger.log(e.stack);\n              }\n        });\n    };\n\n    /**\n     * Live message\n     * Live message methods are used to \"ping\" the server with LiveMessage commands to keep the connection ID alive.\n     * All commands sent to the server should cancel the live message and schedule it again on response. The idea is that if\n     * there is a constant stream of communication going on with the server there is no point in sending live messages. Instead\n     * we send it only if there is some period of time that we haven't sent any commands.\n     * \n     * TODO possible bug: when we have video connections they consume a lot of AJAX calls. And the live messages may get queued. \n     * If that happens it is possible to timeout the connection even though the video is still properly running and everything.\n     * \n     * All these methods are private!\n     */\n    var scheduleLiveMessage = function () {\n\n        if (self.liveMessageTimer) return;\n\n        // serverTimeout is in seconds and setTimeout accepts milliseconds so we have to multiple by 1000. However\n        // we shouldn't wait for the entire period but send the live message earlier. Hence the multiplier is smaller\n        self.liveMessageTimer = setInterval(self.sendLiveMessage, self.serverTimeout * 1000 / 3);\n\n    };\n\n    this.updateLiveMessageTimer = function (minInterval) {\n        // serverTimeout is in seconds and setTimeout accepts milliseconds so we have to multiple by 1000. However\n        // we shouldn't wait for the entire period but send the live message earlier. Hence the multiplier is smaller\n        var interval = self.serverTimeout * 1000 / 3;\n\n        if (minInterval && typeof minInterval === \"number\") {\n            interval = Math.min(interval, minInterval);\n        }\n\n        clearTimeout(self.liveMessageTimer);\n\n        self.liveMessageTimer = setInterval(self.sendLiveMessage, interval);\n    };\n\n    var cancelLiveMessage = function () {\n\n        if (!self.liveMessageTimer) return;\n\n        clearTimeout(self.liveMessageTimer);\n        self.liveMessageTimer = null;\n\n    };\n\n    this.sendLiveMessage = function () {\n\n        self.LiveMessage();\n\n        if (self.webSocketServer && self.webSocketBrowser) {\n            fps.manage(liveMessagesWaiting);\n        }\n\n        liveMessagesWaiting++;\n\n    };\n\n    var scheduledDisconnectOnFail;\n\n    var disconnectOnFail = function () {\n        cancelLiveMessage();\n        setState(XPMobileSDK.library.ConnectionStates.idle);\n        XPMobileSDK.library.VideoConnectionPool.clear();\n        callMethodOnObservers('connectionProcessingDisconnect');\n        self.connectionId = null;\n        callMethodOnObservers('connectionDidDisconnect');\n        self.destroy();\n    };\n\n    var liveMessageFailCallback = function () {\n        if (scheduledDisconnectOnFail) {\n            return;\n        }\n\n        scheduledDisconnectOnFail = setTimeout(disconnectOnFail, self.serverTimeout * 1000);\n    };\n\n    /**\n     * Sends a LiveMessage command to the server.\n     * \n     * @method LiveMessage\n     * \n     * @param {Object} params: Parameters to sent to the server\n     * @param {Function} successCallback: function that is called when the command execution was successful and the result is passed as a parameter.\n     * @param {Function} failCallback: function that is called when the command execution has failed and the error is passed as a parameter.\n     * \n     */\n    this.LiveMessage = function (params, successCallback, failCallback) {\n        params = params || {};\n        failCallback = failCallback || liveMessageFailCallback;\n\n        self.sendCommand('LiveMessage', params, { successCallback: successCallback }, liveMessageCallback, failCallback);\n    };\n\n    var liveMessageCallback = function (connectionRequest) {\n\n        liveMessagesWaiting--;\n\n        requestFinished(connectionRequest);\n\n        clearTimeout(scheduledDisconnectOnFail);\n        scheduledDisconnectOnFail = undefined;\n\n        var connectionResponse = connectionRequest.response;\n\n        if (!connectionResponse || connectionResponse.isError) {\n            if (connectionRequestResponseIsTerminal(connectionRequest)) {\n                if (self.connectingViaExternalConnectionID) {\n                    self.connectingViaExternalConnectionID = false;\n                    logger.warn('Old connection ID has expired');\n                    callMethodOnObservers('connectionFailedToConnectWithId', connectionResponse && connectionResponse.error);\n                    self.connectionId = null;\n                } else {\n                    lostConnection();\n                }\n                cancelLiveMessage();\n                return;\n            }\n        }\n\n        if (self.connectingViaExternalConnectionID) {\n            self.connectingViaExternalConnectionID = false; // reset the flag\n            logger.log('Started connection from external connection ID');\n            setState(XPMobileSDK.library.ConnectionStates.working);\n            callMethodOnObservers('connectionDidLogIn'); // do we need another method?\n            callMethodOnObservers('connectionDidConnectWithId');\n        }\n\n        if (connectionResponse.outputParameters.FolderDefinitionsChanged === 'Yes' ||\n            connectionResponse.outputParameters.ViewDefinitionsChanged === 'Yes') {\n            callMethodOnObservers('connectionReloadConfiguration');\n        }\n\n        if (connectionResponse.outputParameters.CameraDefinitionsChanged === 'Yes') {\n            callMethodOnObservers('connectionReloadCameraConfiguration');\n        }\n        if (connectionResponse.items && connectionResponse.items.length > 0) {\n            for (var i = 0; i < connectionResponse.items.length; i++) {\n                if (connectionResponse.items[i].Type === \"Notification\") {\n                    callMethodOnObservers('receivedNotification', connectionResponse.items[i]);\n                }\n\n            }\n\n        }\n\n        scheduleLiveMessage();\n\n    };\n\n    /**\n     * Parses the features that are returned from server and puts them in local storage\n     * \n     * @param \t\tfeatures\t\tobject\t\tFeatures that the server is supporting\n     */\n    var getFeatures = function (features) {\n\n        if (!features) return;\n\n        var data = {};\n        for (i in features) {\n            switch (i) {\n                case 'Challenge':\n                    data['CHAPSupported'] = true;\n                    break;\n                case 'ServerType':\n                    XPMobileSDKSettings.ServerType = features[i];\n                    break;\n                case 'ServerDescription':\n                    XPMobileSDKSettings.ServerDescription = features[i];\n                    break;\n                default:\n                    var value = isNaN(Number(features[i])) ? features[i] === 'Yes' : Number(features[i]);\n                    data[i] = value;\n                    break;\n            };\n        }\n\n        addDirectStreamingStatus(data);\n        self.storage && self.storage.setItem('features', data);\n        XPMobileSDK.features = data;\n\n    };\n\n    /**\n     * Adds the status of the Direct streaming to the XPMobileSDK.features object.\n     * \n     *  XPMobileSDK.features.DirectStreaming == 0 - DS not available\n     *  XPMobileSDK.features.DirectStreaming == 1 - do not enforce\n     *  XPMobileSDK.features.DirectStreaming == 2 - enforce whenever possible\n     *  XPMobileSDK.features.DirectStreaming == 3 - enforce for all clients\n     */\n    var addDirectStreamingStatus = function (data) {\n\n        if (!data.NativeStreamingAvailable) {\n            data.DirectStreaming = self.DSServerStatus.NotAvailable;\n            return;\n        }\n\n        if (!data.TranscodedStreamingAvailable) {\n            data.DirectStreaming = self.DSServerStatus.Enforce;\n            return;\n        }\n\n        if (data.NativeStreamingSuggested) {\n            data.DirectStreaming = self.DSServerStatus.EnforceWheneverPossible;\n            return;\n        }\n\n        data.DirectStreaming = self.DSServerStatus.DoNotEnforce;\n    };\n\n    /**\n     * Tests if response of a request contains an error that is terminal for the connection, such as connection timeout error!\n     */\n    var connectionRequestResponseIsTerminal = function (connectionRequest) {\n        var connectionResponse = connectionRequest.response;\n        if (connectionResponse === undefined\n            || connectionResponse.errorCode === XPMobileSDK.library.ConnectionError.WrongID\n            || connectionResponse.errorCode === XPMobileSDK.library.ConnectionError.ChallengesLimitReached\n            || connectionResponse.errorString === 'Wrong connection ID') {\n            return true;\n        }\n        return false;\n    };\n\n    var lostConnection = function () {\n        if (self.state !== XPMobileSDK.library.ConnectionStates.lostConnection) {\n            setState(XPMobileSDK.library.ConnectionStates.lostConnection);\n            self.connectionId = null;\n            XPMobileSDK.library.VideoConnectionPool.clear();\n            self.destroy();\n            callMethodOnObservers('connectionLostConnection');\n        }\n    };\n\n    /**\n     * Destructor. As much as there is such thing in JavaScript.\n     * \n     * @method destroy\n     */\n    this.destroy = function () {\n        requests = [];\n        if (self.storage) {\n            self.storage.removeItem('features');\n            self.storage.removeItem('webSocketServer');\n            self.storage.removeItem('directStreamingServer');\n        }\n    };\n};\n\n/**\n * List of connection error codes.\n */\nXPMobileSDK.library.ConnectionError = {\n    NotImplemented: 1,\n    NotFullyImplemented: 2,\n    BadCommandType: 10,\n    BadCommandKind: 11,\n    WrongID: 12,\n    MissingInputParameter: 13,\n    WrongInputParameter: 14,\n    InvalidCredentials: 15,\n    IncorrectPublicKey: 16,\n    SurveillanceServerDown: 17,\n    InvalidLicense: 18,\n    SecurityError: 19,\n    UnknownCameraID: 20,\n    UnknownItemID: 21,\n    NoPresetsAvailable: 22,\n    NotAllowedInThisState: 23,\n    FeatureIsDisabled: 24,\n    InsufficientUserRights: 25,\n    TooManySessions: 26,\n    NewConfigurationNotAvailable: 27,\n    AddressesNotReachable: 28,\n    PlaybackStreamsLimitReached: 29,\n    Redirection: 30,\n    MovingInvestigations: 31,\n    NoRecordingsFound: 32,\n    NoRecordingsInInterval: 33,\n    SecondStepAuthenticationRequired: 34,\n    SecondStepAuthenticationEnabledUsersOnly: 35,\n    SecondStepAuthenticationCodeError: 36,\n    SecondStepAuthenticationCodeExpired: 37,\n    InputParameterTooLong: 43,\n    ChallengesLimitReached: 51,\n\n    UknownIdOrInsufficientRightForSomeItems: 52,\n    UknownIdOrInsufficientRightForAllItems: 53,\n    ItemNotPlayable: 54,\n\n    ChangePassword: 60,\n    AccountLockedOut: 61,\n\n    Unknown: 0x7FFFFFFF,\n    IncorrectServerResponse: this.Unknown - 21,\n    SdkNotConnected: this.Unknown - 20,\n\n    HttpResponseError: this.Unknown - 11,\n    HttpRequestError: this.Unknown - 10,\n\n    CommandProcessingError: this.Unknown - 3,\n    CommandTimedOut: this.Unknown - 2,\n    InternalError: this.Unknown - 1\n};\n","; (function (undefined) {\n    var lastLiveMessageRequestTimestamp = 0;\n\n    /**\n     * The connection request class handles the sending of a single command to the server, generating the request XML and\n     * handling the response (via ConnectionResponse class), providing it back to the Connection class.\n     * Instances of the class should NEVER be created directly. The intended use is only to create them via the methods of \n     * the Connection class. It is its responsibility to create a connection request object and manage it.\n     * \n     * The only real external use of this class is to cancel a request via the cancel method. \n     * \n     * @class ConnectionRequest\n     */\n    var connectionRequest = function (command, sequenceID, params, options, callback) {\n\n        var self = this;\n\n        XPMobileSDK.addObserver(this);\n\n        self.options = options || {};\n        self.response = null;\n        if (params.VideoConnection) {\n            self.VideoConnection = params.VideoConnection;\n            delete params.VideoConnection;\n        }\n        self.params = params || {};\n\n        var finished = false;\n        var responseOffset = 0;\n        var requestXML = generateData();\n        var connectionURL = parseURL(XPMobileSDK.library.Connection.server) + XPMobileSDKSettings.communicationChanel;\n\n        var ajaxRequest, ajaxRequestTimeout;\n\n        var stopRestaringCommands = false;\n\n        initializeAjaxRequest();\n\n        /**\n         * Cancels the ajax request.\n         * \n         * @method cancel\n         */\n        this.cancel = function () {\n            if (ajaxRequestTimeout) {\n                clearTimeout(ajaxRequestTimeout);\n                ajaxRequestTimeout = null;\n            }\n            if (ajaxRequest) {\n                ajaxRequest.onreadystatechange = function () { };\n                ajaxRequest.abort();\n                ajaxRequest = null;\n                XPMobileSDK.library.Ajax.activeRequestCount--;\n            }\n\n            XPMobileSDK.removeObserver(self);\n        };\n\n        function parseURL(url) {\n\n            if (/^http(s)?:/i.test(url)) {\n                return url;\n            }\n            var protocol = window.location.protocol + '//';\n            var hostname = document.location.hostname;\n            var port = document.location.port && !/^:\\d+/.test(url) ? ':' + document.location.port : '';\n\n            return protocol + hostname + port + url;\n\n        };\n\n        function initializeAjaxRequest() {\n            if (command == 'LiveMessage') {\n                lastLiveMessageRequestTimestamp = Date.now();\n            }\n\n            logger.log(requestXML);\n\n            ajaxRequest = XPMobileSDK.library.Ajax.Request(connectionURL, {\n                contentType: 'text/xml',\n                postBody: requestXML,\n                onSuccess: onSuccess,\n                onComplete: onComplete,\n                onFailure: self.options.failCallback || function () { parseResponse(); },\n                timeout: options.timeout\n            });\n\n        };\n\n        function onComplete(response) {\n            if (response.readyState != 4 ||\n                response.status == 200 ||\n                // Do not flood the server with LiveMessage requests - US#206999\n                (command == 'LiveMessage' &&\n                (Date.now() - lastLiveMessageRequestTimestamp < XPMobileSDKSettings.liveMessageMinimumInterval))) {\n \n                XPMobileSDK.removeObserver(self);\n                return;\n            }\n            restartHighPriorityCommand();\n        }\n\n        function onSuccess() {\n\n            CommunicationStability.removeBreakDown(self);\n\n            if (ajaxRequestTimeout) {\n                clearTimeout(ajaxRequestTimeout);\n                ajaxRequestTimeout = null;\n            }\n            if (!finished) {\n                parseResponse();\n                finished = true;\n            }\n            ajaxRequest = null;\n        };\n\n        function parseResponse() {\n            var i = 0;\n            try {\n                var responseText = ajaxRequest.responseText;\n            } catch (error) {\n                return;\n            }\n\n            if (responseText.trim().substr(0, 5) != \"<?xml\") {\n\n                self.response = {\n                    isError: true,\n                    errorCode: \"The response from the server is not well-formatted\",\n                    outputParameters: []\n                };\n\n                callback && callback(self);\n            }\n\n            while ((i = responseText.indexOf(\"\\r\\n\\r\\n\", responseOffset)) > 0) {\n                var xml = responseText.substring(responseOffset, i);\n                if (xml) {\n                    var response = new XPMobileSDK.library.ConnectionResponse(xml);\n                    if (!response.isProcessing) {\n                        self.response = response;\n                        finished = true;\n                        callback && callback(self);\n                    }\n                }\n                responseOffset = i + 4; // 4 is the length of the XMLs separator\n            }\n        };\n\n        function restartHighPriorityCommand() {\n            if (stopRestaringCommands) {\n                return;\n            }\n\n            logger.error('Command ' + command + ' failed');\n\n            if (command == 'LiveMessage' || command == 'CloseStream' || command == 'RequestStream' || command == 'Disconnect') {\n                logger.warn('Restarting ' + command);\n\n                CommunicationStability.addBreakDown(self);\n\n                setTimeout(function () {\n                    finished = false;\n\n                    initializeAjaxRequest();\n                }.bind(this), 1000);\n            }\n        }\n\n        function generateData() {\n            var paramsXML = '';\n            for (key in params) {\n                var createProperty = function (key, value) {\n                    value = (value !== undefined && value.toString) ? value.toString() : '';\n                    value = value.replaceAll('&', '&amp;').replace(/(\\r\\n|\\r|\\n)/g, '&#10;').replaceAll('\"', '&quot;').replaceAll('<', '&lt;');\n                    return '<Param Name=\"' + key + '\" Value=\"' + value + '\" />';\n                };\n                if (params[key] !== undefined && params[key] instanceof Array) {\n                    params[key].forEach(function (value) {\n                        paramsXML += createProperty(key, value);\n                    });\n                }\n                else {\n                    paramsXML += createProperty(key, params[key]);\n                }\n            }\n            return '<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?>' +\n                '<Communication xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\">' +\n                (XPMobileSDK.library.Connection.connectionId ? '<ConnectionId>' + XPMobileSDK.library.Connection.connectionId + '</ConnectionId >' : '') +\n                '<Command SequenceId=\"' + sequenceID + '\">' +\n                '<Type>Request</Type>' +\n                '<Name>' + command + '</Name>' +\n                '<InputParams>' + paramsXML + '</InputParams>' +\n                //'<OutputParams />' +\n                '</Command>' +\n                '</Communication>\\r\\n\\r\\n';\n        };\n\n        this.connectionDidDisconnect = function () {\n            stopRestaringCommands = true;\n            XPMobileSDK.removeObserver(self);\n        };\n    };\n\n    XPMobileSDK.library.ConnectionRequest = connectionRequest;\n})();","XPMobileSDK.library.PullConnectionObserverInterface = {\r\n\t\r\n\tonError: function (request) {},\r\n\tonHTTPError: function (request) {},\r\n\tonPushFailed: function () {},\r\n\tnotifyChannel: function (status) {},\r\n\tnotifyObservers: function (item) {},\r\n\tvideoConnectionTemporaryDown: function (status) {},\r\n\trestart: function () {}\r\n};\r\n\r\nXPMobileSDK.library.PullConnection = function(videoURL, options) {\r\n\t\r\n\tvar frameRequestParams = {\r\n\t\tmethod: 'post',\r\n\t\tcontentType: 'text/xml', \r\n\t\tonLoading: onAjaxLoading,\r\n\t\tonSuccess: onAjaxSuccess,\r\n\t\tonFailure: onAjaxFailure\r\n\t};\r\n\t\r\n\tvar lastFrame = null; // Property that keeps the last frame received over the connection\r\n\t\r\n\tvar signalType = options.signalType || null;\r\n\t\r\n\t// If we have support for ArrayBuffer in the browser\r\n\tif (typeof ArrayBuffer !== 'undefined')\r\n\t\tframeRequestParams.responseType = 'arraybuffer';\r\n\t\r\n\tvar self = this;\r\n\tself.videoConnectionState = XPMobileSDK.library.VideoConnectionState.running;\r\n\t\r\n\tvar observers = [];\r\n\t\r\n\tvar frameInterval = 0;\r\n\t\r\n\t/**\r\n\t * Sends ajax request for the next frame\r\n\t */\r\n\tfunction requestNextFrame(timeout) {\r\n\t\tif(canRun() && communicationIsStable(timeout) && notWaiting()) {\r\n\t\t\tsendRequest(timeout);\r\n\t\t}\r\n\t};\r\n\t\r\n\tfunction sendRequest(timeout){\r\n\t\tself.nextFrameTimeout = setTimeout(function() {\r\n\t\t\tclearNextFrameTimeout();\r\n\t\t\tif (self.videoConnectionState != XPMobileSDK.library.VideoConnectionState.closed) {\r\n\t\t\t\tself.ajaxRequest = new XPMobileSDK.library.Ajax.Request(videoURL, frameRequestParams);\r\n\t\t\t}\r\n\t\t}, timeout || 1);\r\n\t};\r\n\t\r\n\tfunction communicationIsStable(timeout) {\r\n\t\tif (CommunicationStability.isBrokenDown()) {\r\n\t\t\tsetTimeout(function() {\r\n\t\t\t\trequestNextFrame(timeout);\r\n\t\t\t}, 200);\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\telse return true;\r\n\t};\r\n\t\r\n\tfunction notClosed() {\r\n\t\treturn self.videoConnectionState != XPMobileSDK.library.VideoConnectionState.closed;\r\n\t};\r\n\t\r\n\tfunction notSarted() {\r\n\t\treturn !self.ajaxRequest;\r\n\t};\r\n\t\r\n\tfunction notWaiting() {\r\n\t\treturn !self.nextFrameTimeout;\r\n\t}\r\n\t\r\n\tfunction canRun() {\r\n\t\treturn notSarted() || notClosed() || notWaiting();\r\n\t};\r\n\t\r\n\t/**\r\n\t * Aborts non-responsive requests waiting to timeout, thus stopping the frame request queue.\r\n\t */\r\n\tfunction onAjaxLoading (ajaxRequest) {\r\n\t\tif(notSarted()) {\t\r\n\t\t\tclearRequestTimeout();\r\n\t\t\t\r\n\t\t\tvar timeout = XPMobileSDKSettings.videoConnectionTimeout;\r\n\t\t\tself.ajaxRequestTimeout = setTimeout(function () {\r\n\t\t\t\tif (!ajaxRequest) return;\r\n\t\t\t\t\r\n\t\t\t\tlogger.warn('aborting video request for ' + self.videoId);\r\n\t\t\t\tajaxRequest.onreadystatechange = function () {};\r\n\t\t\t\tajaxRequest.abort();\r\n\t\t\t\tXPMobileSDK.library.Ajax.activeRequestCount--;\r\n\t\t\t\t\r\n\t\t\t\tcallMethodOnObservers('onError', ajaxRequest);\r\n\t\t\t}.bind(this), timeout);\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * Receives and parses the response from the server for the next frame.\r\n\t */\r\n\tfunction onAjaxSuccess (ajaxRequest) {\r\n\t\t\r\n\t\t// K2 2016: Broken AJAX responses - indicate observers!\r\n\t\tif (ajaxRequest.status == 0 && (!ajaxRequest.response || ajaxRequest.response.byteLength === 0)) {\r\n\t\t\tcallMethodOnObservers('onHTTPError', ajaxRequest);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t\r\n\t\tif(notClosed()){\r\n\t\t\t\r\n\t\t\tcallMethodOnObservers('notifyChannel', true);\r\n\t\t\tclearRequestTimeout();\r\n\t\t\t\r\n\t\t\ttry {\r\n\t\t\t\t\r\n\t\t\t\tvar res = ajaxRequest.response;\r\n\t\t\t\t\r\n\t\t\t\tvar currentData = new XPMobileSDK.library.VideoHeaderParser(res);\r\n\t\t\t\tif (currentData.duration) {\r\n\t\t\t\t\tvar delay = currentData.duration * 1000 * 0.8;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tcallMethodOnObservers('notifyObservers', currentData);\r\n\t\t\t\tclearRequestTimeout();\r\n\t\t\t\t\r\n\t\t\t\tif (self.videoConnectionState == XPMobileSDK.library.VideoConnectionState.running) {\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(currentData.stream && currentData.stream.timeBetweenFrames) {\r\n\t\t\t\t\t\t// give some time fo rthe download but don't flood the network in order to give time to other streams (6 simultanous request)\r\n\t\t\t\t\t\tframeInterval = (currentData.stream.timeBetweenFrames * 2) / 3;\r\n\t\t\t\t\t\tself.requestNextFrameInterval = frameInterval;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (frameInterval) {\r\n\t\t\t\t\t\tself.requestNextFrameInterval = frameInterval;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (!currentData.dataSize && self.signalType == XPMobileSDK.interfaces.VideoConnectionSignal.live) {\r\n\t\t\t\t\t\tself.requestNextFrameInterval = Math.min(NETWORK.MAX_REQUEST_TIME, self.requestNextFrameInterval * getRandomIntAround(NETWORK.REQUEST_TIME_GROW_PER_EMPTY_FRAME * 100) / 100);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tself.requestNextFrameInterval = delay || NETWORK.requestTime;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\trequestNextFrame(self.requestNextFrameInterval);\r\n\t\t\t\t\t\r\n\t\t\t\t}\r\n\t\t\t\tlastFrame = currentData;\r\n\t\t\t} \r\n\t\t\tcatch (e) {\r\n\t\t\t\tlogger.error('Exception in video connection ajax response', e);\r\n\t\t\t\tlogger.error(e.stack);\r\n\t\t\t\t\r\n\t\t\t\tcallMethodOnObservers('onHTTPError', ajaxRequest);\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\t\r\n\tfunction onAjaxFailure (request) {\r\n\t\tlogger.error('ERROR in ajax request for frame for video channel ' + videoURL);\r\n\t\tcallMethodOnObservers('onHTTPError', request);\r\n\t};\r\n\t\r\n\tthis.restartConnection = function (request) {\r\n\t\ttry {\r\n\t\t\tif (request) {\r\n\t\t\t\tcallMethodOnObservers('videoConnectionTemporaryDown', request.status);\r\n\t\t\t} else {\r\n\t\t\t\tcallMethodOnObservers('videoConnectionTemporaryDown', -2);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (self.videoConnectionState == XPMobileSDK.library.VideoConnectionState.closed) {\r\n\t\t\t    return;\r\n\t\t\t}\r\n\r\n\t\t\tcallMethodOnObservers('restart');\r\n\t\t}\r\n\t\tcatch (e) {\r\n\t\t\t// for some reason IE9 throws exception when trying to access request.status\r\n\t\t\tcallMethodOnObservers('videoConnectionTemporaryDown', -1);\r\n\t\t};\r\n\t};\r\n\t\r\n\tthis.cleanupCommunication = function() {\r\n\t\tclearNextFrameTimeout();\r\n\t\tclearRequestTimeout();\r\n\t\tclearRequest();\r\n\t\tframeInterval = 0;\r\n\t};\r\n\t\r\n\tfunction clearNextFrameTimeout() {\r\n\t\tif (self.nextFrameTimeout) {\r\n\t\t\tclearTimeout(self.nextFrameTimeout);\r\n\t\t\tself.nextFrameTimeout = null;\r\n\t\t}\r\n\t}\r\n\r\n\tfunction clearRequestTimeout() {\r\n\t\tif (self.ajaxRequestTimeout) {\r\n\t\t\tclearTimeout(self.ajaxRequestTimeout);\r\n\t\t\tself.ajaxRequestTimeout = null;\r\n\t\t}\r\n\t}\r\n\t\r\n\tfunction clearRequest() {\r\n\t\tif (self.ajaxRequest) {\r\n\t\t\tif (self.ajaxRequest.readyState != 4 || self.ajaxRequest.status != 200) { \r\n\t\t\t\tself.ajaxRequest.abort();\r\n\t\t\t}\r\n\t\t\tdelete self.ajaxRequest;\r\n\t\t\tself.ajaxRequest = null;\r\n\t\t}\r\n\t}\r\n\t\r\n\tthis.startCommunication = function (timeout) {\r\n\t\tthis.cleanupCommunication();\r\n\t\trequestNextFrame(timeout);\r\n\t};\r\n\t\r\n\tthis.videoConnectionChangedState = function(videoConnectionState){\r\n\t\tself.videoConnectionState = videoConnectionState;\r\n\t};\r\n\t\r\n\tthis.addObserver = function (observer) {\r\n\t\tobservers.push(observer);\r\n\t};\r\n\t\r\n\tthis.removeObserver = function(observer) {\r\n\t\tvar index = observers.indexOf(observer);\r\n\t\tindex != -1 && observers.splice(index, 1);\r\n\t};\r\n\t\r\n\tfunction getRandomIntAround(number) {\r\n\t\tvar min = number - 10;\r\n\t\tvar max = number + 10;\r\n\t\treturn Math.floor(Math.random() * (max - min + 1)) + min;\r\n\t}\r\n\t\r\n\tfunction callMethodOnObservers(method, arg) {\r\n\t\tobservers.forEach(function(observer) {\r\n\t\t\tif (observer && observer[method]) {\r\n\t\t\t\tobserver[method](arg);\r\n\t\t\t}\r\n\t\t});\r\n\t}\t\r\n};","XPMobileSDK.library.PushConnectionObserverInterface = {\r\n\r\n    onError: function (request) { },\r\n    onHTTPError: function (request) { },\r\n    onPushFailed: function () { },\r\n    notifyChannel: function (status) { },\r\n    notifyObservers: function (item) { },\r\n    videoConnectionTemporaryDown: function (status) { },\r\n    restart: function () { }\r\n};\r\n\r\nXPMobileSDK.library.PushConnection = function (videoURL, options) {\r\n\r\n    var socket;\r\n\r\n    var signalType = options.signalType || null;\r\n\r\n    var lastFrame = null; // Property that keeps the last frame received over the connection\r\n\r\n    this.videoConnectionState = XPMobileSDK.library.VideoConnectionState.notOpened;\r\n\r\n    var observers = [];\r\n\r\n    var socketFailedTimestamp = null;\r\n\r\n    this.startCommunication = function () {\r\n        if (socket) {\r\n            return;\r\n        }\r\n\r\n        if (socketFailedTimestamp) {\r\n\r\n            if (Date.now() - socketFailedTimestamp < XPMobileSDKSettings.videoStreamRestartMinimumInterval) {\r\n                setTimeout(function () {\r\n                    logger.warn(\"Restarting socket.\");\r\n                    createSocket();\r\n                }.bind(this), XPMobileSDKSettings.socketRestartMinimumInterval);\r\n            }\r\n            else {\r\n                callMethodOnObservers('restart');\r\n            }\r\n        } else {\r\n            createSocket();\r\n        }\r\n    }.bind(this);\r\n\r\n    var createSocket = function () {\r\n\r\n        try {\r\n            socket = new WebSocket(videoURL);\r\n        }\r\n        catch (exception) {\r\n            if (this.videoConnectionState == XPMobileSDK.library.VideoConnectionState.closed) {\r\n                return;\r\n            }\r\n            logger.error('WebSocket initialization failed. Falling back to AJAX...');\r\n            callMethodOnObservers('onPushFailed');\r\n            return;\r\n        }\r\n\r\n        socket.binaryType = \"arraybuffer\";\r\n        socket.onerror = function (exception) {\r\n            callMethodOnObservers('onError', socket);\r\n        };\r\n        socket.onopen = onOpen;\r\n        socket.onclose = function () {\r\n            var socketReadyState = { readyState: socket.readyState, status: socket.status };\r\n            socket = null;\r\n\r\n            if (!socketFailedTimestamp) {\r\n                socketFailedTimestamp = new Date();\r\n            }\r\n            \r\n            callMethodOnObservers('onError', socketReadyState);\r\n\r\n        }.bind(this);\r\n\r\n    }.bind(this);\r\n\r\n    this.restartConnection = function (request) {\r\n        logger.warn(\"Restarting socket.\");\r\n        this.startCommunication();\r\n    }.bind(this);\r\n\r\n    this.close = function () {\r\n\r\n        if (!socket) {\r\n            return;\r\n        }\r\n\r\n        socket.onopen = null;\r\n        socket.onmessage = null;\r\n        socket.onerror = null;\r\n        socket.onclose = null;\r\n\r\n        socket.close();\r\n        socket = null;\r\n\r\n        if (this.messageInterval) {\r\n            clearInterval(this.messageInterval);\r\n            this.messageInterval = null;\r\n        }\r\n\r\n        logger.log('WebSocket closed');\r\n\r\n    }.bind(this);\r\n\r\n\r\n    var onOpen = function (event) {\r\n\r\n        socket.onmessage = onMessage;\r\n        socket.onerror = onError;\r\n        socket.onclose = onClose;\r\n\r\n        // Firefox fix: Close the socket on page refresh - in most other browsers the socket is closed automatically.\r\n        // Without it the browser breaks and stops executing setTimeout/setInterval calls as well as CSS animations after refresh.\r\n        window.addEventListener('beforeunload', this.close);\r\n\r\n        this.messageInterval = setInterval(function () {\r\n            if (socket) {\r\n                socket.send(\"\");\r\n            }\r\n        }, NETWORK.websocketSendMessage);\r\n\r\n        callMethodOnObservers('notifyChannel', true);\r\n\r\n        logger.log('WebSocket open');\r\n\r\n    }.bind(this);\r\n\r\n    var onMessage = function (event) {\r\n\r\n        if (lastFrame) {\r\n            delete lastFrame;\r\n            lastFrame = null;\r\n        }\r\n\r\n        lastFrame = new XPMobileSDK.library.VideoHeaderParser(event.data);\r\n\r\n        callMethodOnObservers('notifyObservers', lastFrame);\r\n\r\n    }.bind(this);\r\n\r\n    var onError = function (error) {\r\n\r\n        logger.error('WebSocket error', error);\r\n\r\n        if (this.messageInterval) {\r\n            clearInterval(this.messageInterval);\r\n            this.messageInterval = null;\r\n        }\r\n\r\n    }.bind(this);\r\n\r\n    var onClose = function (event) {\r\n        socket.onopen = null;\r\n        socket.onmessage = null;\r\n        socket.onerror = null;\r\n        socket.onclose = null\r\n        socket = null;\r\n\r\n        if (this.messageInterval) {\r\n            clearInterval(this.messageInterval);\r\n            this.messageInterval = null;\r\n        }\r\n        if (this.videoConnectionState == XPMobileSDK.library.VideoConnectionState.running && XPMobileSDK.library.Connection.connectionId) {\r\n            this.restartConnection();\r\n            callMethodOnObservers('videoConnectionTemporaryDown');\r\n        }\r\n\r\n    }.bind(this);\r\n\r\n    this.cleanupCommunication = function () {\r\n        this.close();\r\n    };\r\n\r\n    this.videoConnectionChangedState = function (videoConnectionState) {\r\n        this.videoConnectionState = videoConnectionState;\r\n    };\r\n\r\n    this.addObserver = function (observer) {\r\n        observers.push(observer);\r\n    };\r\n\r\n    this.removeObserver = function (observer) {\r\n        var index = observers.indexOf(observer);\r\n        index != -1 && observers.splice(index, 1);\r\n    };\r\n\r\n    var callMethodOnObservers = function (method, arg) {\r\n        observers.forEach(function (observer) {\r\n            if (observer && observer[method]) {\r\n                observer[method](arg);\r\n            }\r\n        });\r\n    }.bind(this);\r\n\r\n};\r\n","// This file defines objects related to video connection - including the VideoConnection class. \n\n/**\n * Video connection signal - live or playback.\n */\nXPMobileSDK.library.VideoConnectionSignal = {\n    live: 1, // Live signal from the camera\n    playback: 2 // Playback signal from the camera\n};\n\n/**\n * The possible states of the video connection.\n */\nXPMobileSDK.library.VideoConnectionState = {\n    notOpened: 0, // Connection not opened yet\n    running: 1, // Connection started and receiving frames\n    closed: 2, // Connection has been closed and done with\n    closing: 3 // Connection is currently closing\n};\n\n/**\n * The possible states of the video connection stream type.\n */\nXPMobileSDK.library.VideoConnectionStream = {\n    \"native\": 1, // Native video stream\n    transcoded: 3, // Transcoded video stream\n    FragmentedMP4: 4 // Direct streaming video\n};\n\n/**\n * Interface description for the observers of the VideoConnection singleton.\n * \n * If an objects wants to be informed for a specific event (when a frame is received for example) they can register as an observer.\n * Registering an object as an observer for a VideoConnection instance is simple as calling videoConnection.addObserver(object).\n * Then, if the observer defines any of the methods described below, they will be called whenever it is appropriate.\n * \n * All methods are optional. Just implement those you need in your class and add it as observer. \n * \n * @class VideoConnectionObserverInterface\n */\nXPMobileSDK.library.VideoConnectionObserverInterface = {\n\n    /**\n\t * Called when new frame has arrived over the video connection\n\t * \n\t * @method videoConnectionReceivedFrame\n\t * @param {ItemHeaderParser} frame \n\t */\n    videoConnectionReceivedFrame: function (frame) { },\n\n    /**\n\t * Called when an error has occurred during video streaming or in one of the internal control commands which has \n\t * resulted in closing the connection completely.\n\t * \n\t * @method videoConnectionFailed\n\t */\n    videoConnectionFailed: function () { },\n\n    /**\n\t * Called when a HTTP error occurred\n\t * \n\t * @method videoConnectionTemporaryDown\n\t * @param {Number} errorCode - the HTTP error code returned from the server, or -1 if exception was thrown, or -2 if the request was aborted due to a missing response (happens more often on wireless networks)\n\t */\n    videoConnectionTemporaryDown: function (errorCode) { },\n\n    /**\n\t * Called after the connection is no longer down due to an HTTP error. \n\t */\n    videoConnectionRecovered: function () { },\n\n    /**\n\t * Called if the state property of the connection has changed value.\n\t * \n\t * @method videoConnectionChangedState\n\t */\n    videoConnectionChangedState: function () { },\n\n    /**\n\t * Called when the streaming technology is no longer available. \n\t */\n    videoConnectionStreamingError: function () { }\n};\n\n/**\n * Video connection.\n * This class manages an established connection and handles receiving and parsing frames via the ItemHeaderParser class.\n * Do not create instances of that class directly. Instead call XPMobileSDK.requestStream to first prepare the connection to the\n * camera. In the callback you will receive instance of the prepared VideoConnection object ready to be opened. Then set\n * an observer object to receive frames, events and etc and just open the connection.\n * Video connections cannot be reused. Once closed it cannot be reopened. \n * \n * @class VideoConnection\n */\nXPMobileSDK.library.VideoConnection = function (videoId, connectionRequest, callbacks) {\n\n    XPMobileSDK.library.VideoConnection.instances.push(this);\n\n    if (!callbacks) var callbacks = {};\n    callbacks.onClose = callbacks.onClose || function (videoConnection) { };\n    callbacks.onRestart = callbacks.onRestart || function (videoConnection) { };\n    callbacks.onPushFailed = callbacks.onPushFailed || function () { };\n\n    var self = this;\n\n    var observers = [];\n    var state = XPMobileSDK.library.VideoConnectionState.notOpened;\n\n    self.request = {\n        parameters: connectionRequest.params,\n        options: connectionRequest.options\n    };\n    self.response = {\n        parameters: connectionRequest.response.outputParameters\n    };\n\n    self.videoId = videoId;\n    if (self.request.options) {\n        self.cameraId = self.request.options.cameraId;\n        self.signalType = self.request.options.signal;\n        self.isReusable = self.request.options.reuseConnection;\n    }\n    self.isPush = self.request.parameters.MethodType == 'Push';\n    self.isDirectStreaming = self.request.parameters.StreamType == 'FragmentedMP4';\n\n    self.supportsPTZ = self.response.parameters.PTZ == 'Yes';\n    self.supportsPTZPresets = self.response.parameters.Preset == 'Yes';\n    self.supportsPlayback = self.response.parameters.Playback == 'Yes';\n    self.supportsExport = self.response.parameters.ExportAvi == 'Yes';\n\n    var lastData = null; // Property that keeps the last frame received over the connection\n    var channel = new Channel(self.response.parameters);\n\n    var connectionURL = channel.current;\n\n    var noVideoTimeout = null;\n\n    /**\n\t * Opens the connection to start receiving frames. \n\t * \n\t * @method open\n\t */\n    this.open = function () { \n        switch (state) {\n            case XPMobileSDK.library.VideoConnectionState.notOpened:\n                setState(XPMobileSDK.library.VideoConnectionState.running);\n                if (window.Worker && XPMobileSDKSettings.supportsMultiThreaded) {\n                    logger.info('Opening multithreaded video connection ' + self.videoId + ' with Web Worker');\n                    self.worker = new Worker(\"js/ThreadConnection.js\");\n                    self.worker.addEventListener('message', function (e) {\n                        if (e.data.message == 'onPushFailed') {\n                            callbacks.onPushFailed();\n                        } else {\n                            callMethodOnObservers(e.data.message, e.data.result);\n                        }\n                    }, false);\n                    self.worker.postMessage({\n                        'message': 'startCommunication',\n                        'arguments': {\n                            \"url\": connectionURL + '/' + self.videoId + '/',\n                            \"signalType\": self.signalType,\n                            \"isPush\": self.isPush\n                        }\n                    });\n                }\n                else {\n                    if (self.isPush) {\n                        logger.info('Opening WebSocket video connection ' + self.videoId);\n                        self.communication = new XPMobileSDK.library.PushConnection(connectionURL + '/' + self.videoId + '/', { 'signalType': self.signalType});\n                    }\n                    else {\n                        logger.info('Opening AJAX video connection ' + self.videoId);\n                        self.communication = new XPMobileSDK.library.PullConnection(connectionURL + '/' + self.videoId + '/', { 'signalType': self.signalType});\n                    }\n                    self.communication.addObserver({\n                        onError: onError,\n                        onHTTPError: onHTTPError,\n                        onPushFailed: onPushFailed,\n                        notifyChannel: notifyChannel,\n                        notifyObservers: notifyObservers,\n                        videoConnectionTemporaryDown: videoConnectionTemporaryDown,\n                        restart: self.restart\n                    });\n                    self.addObserver(self.communication);\n                    self.communication.startCommunication();\n                }\n                callMethodOnObservers('videoConnectionChangedState', state);\n\n                if (state == XPMobileSDK.library.VideoConnectionState.running) {\n                    resetNoVideoTimeout();\n                }\n\n                break;\n            case XPMobileSDK.library.VideoConnectionState.running:\n                if (self.isReusable) {\n                    logger.info('Opening a reusable video connection from the pool ' + self.videoId);\n                } else {\n                    logger.warn('WARNING: Attempting to open a running connection!');\n                }\n                resetNoVideoTimeout();\n                break;\n            case XPMobileSDK.library.VideoConnectionState.closed:\n                logger.warn('WARNING: Attempting to re-open a closed connection!');\n                stopNoVideoTimeout();\n                break;\n        }\n    };\n\n    var resetNoVideoTimeout = function () {\n        if (noVideoTimeout) {\n            clearTimeout(noVideoTimeout);\n        }\n\n        noVideoTimeout = setTimeout(function () {\n            callMethodOnObservers('noVideoTimeout');\n        }, XPMobileSDKSettings.NoVideoTimeout);\n    };\n\n    var stopNoVideoTimeout = function () {\n        if (noVideoTimeout) {\n            clearTimeout(noVideoTimeout);\n        }\n    };\n\n    /**\n\t * Restarts the connection.\n\t * \n\t * @method restart\n\t */\n    this.restart = function () {\n\n        if (state == XPMobileSDK.library.VideoConnectionState.closed) return;\n\n        logger.warn('Restarting video connection ' + self.videoId + ' for camera ' + self.cameraId);\n        setState(XPMobileSDK.library.VideoConnectionState.closed);\n        callbacks.onRestart(self);\n\n        cleanup();\n\n    };\n\n    /**\n\t * Closes the connection.\n\t * \n\t * @method close\n\t */\n    this.close = function () {\n\n        stopNoVideoTimeout();\n\n        if (state == XPMobileSDK.library.VideoConnectionState.closed ||\n            state == XPMobileSDK.library.VideoConnectionState.closing) return;\n\n        setState(XPMobileSDK.library.VideoConnectionState.closing);\n\n\n        if (self.worker && XPMobileSDKSettings.supportsMultiThreaded) {\n            self.worker.terminate();\n        }\n        logger.log('Closing video connection ' + self.videoId + ' for camera ' + self.cameraId);\n        setState(XPMobileSDK.library.VideoConnectionState.closed);\n        callbacks.onClose(self);\n\n        cleanup();\n\n    };\n\n    /**\n\t * Adds an observer for the video connection.\n\t * \n\t * @method addObserver\n\t * @param observer Any object. Should implement methods from the VideoConnectionObserverInterface.\n\t */\n    this.addObserver = function (observer) {\n        observers.push(observer);\n    };\n\n    /**\n\t * Removes an observer for the video connection. \n\t * \n\t * @method removeObserver\n\t * @param observer: any object implementing VideoConnectionObserverInterface that should not receive further notifications\n\t */\n    this.removeObserver = function (observer) {\n        var index = observers.indexOf(observer);\n        index != -1 && observers.splice(index, 1);\n    };\n\n    this.resetCommunication = function () {\n        callMethodOnObservers('startCommunication');\n    };\n\n    /**\n\t * Class destructor.\n\t * \n\t * @method destroy\n\t */\n    this.destroy = function () {\n        self.close();\n\n        if (lastData) {\n            lastData.destroy();\n            lastData = null;\n        }\n        observers = [];\n\n        if (self.isPush) return;\n\n        onAjaxComplete = null;\n        onAjaxFailure = null;\n        onAjaxLoading = null;\n\n        frameRequestParams = null;\n\n        if (XPMobileSDK.library.VideoConnection.indexOf(this) != -1) {\n            XPMobileSDK.library.VideoConnection.splice(XPMobileSDK.library.VideoConnection.indexOf(this), 1);\n        }\n    };\n\n    function notifyObservers(item) {\n\n        if (item.stream && item.stream.error) {\n            switch (item.stream.error) {\n                case XPMobileSDK.library.ItemHeaderParser.Error.NonFatal:\n                    // Fallback to Transcoded streaming\n                    self.request.parameters.StreamType = 'Transcoded';\n                    self.restart();\n                    break;\n                case XPMobileSDK.library.ItemHeaderParser.Error.Fatal:\n                    callMethodOnObservers('videoConnectionStreamingError');\n                    self.close();\n                    break;\n            }\n            return;\n        }\n\n        if (observers.length > 0) {\n            callMethodOnObservers('videoConnectionReceivedFrame', item);\n\n            resetNoVideoTimeout();\n\n            if (self.wasConnectionDown) {\n                self.wasConnectionDown = false;\n                callMethodOnObservers('videoConnectionRecovered');\n            }\n        }\n        else {\n            logger.warn('Video connection received an item but doesn\\'t have observer to send it to!');\n            self.close();\n            return;\n        }\n    };\n\n    function Channel(parameters) {\n\n        this.connected = false;\n        this.current;\n\n        var channels = [];\n        for (var i = 0, url; url = parameters['VideoChannel' + i]; i++) {\n            channels.push(parseURL(url));\n        }\n        if (!channels.length) channels.push(parseURL(XPMobileSDKSettings.MobileServerURL + XPMobileSDKSettings.videoChanel));\n        logger.log('Available video channels: ', channels);\n\n        this.getNext = function () {\n\n            if (!this.connected) this.current = channels.shift();\n            return this.current;\n\n        }.bind(this);\n\n        this.hasNext = function () {\n\n            return !this.connected && channels.length;\n\n        }.bind(this);\n\n        this.getNext();\n\n    };\n\n    function notifyChannel(status) {\n        channel.connected = status;\n    };\n\n    function cleanup() {\n        callMethodOnObservers('cleanupCommunication');\n        if (self.worker && XPMobileSDKSettings.supportsMultiThreaded) {\n            self.worker.terminate();\n            self.worker = null;\n        }\n    };\n\n    function parseURL(url) {\n\n        if (!/^(http|ws)(s)?:/i.test(url)) {\n            var protocol = window.location.protocol + '//';\n            var hostname = document.location.hostname;\n            var port = document.location.port && !/^:\\d+/.test(url) ? ':' + document.location.port : '';\n\n            url = protocol + hostname + port + url;\n        }\n        return self.isPush ? url.replace(/^http(s)?:/i, 'ws$1:') : url.replace(/^ws(s)?:/i, 'http$1:');\n\n    };\n\n    /**\n\t * Sets the state of the connection and calls the observer\n\t */\n    function setState(newState) {\n        if (state == newState) return;\n        state = newState;\n        callMethodOnObservers('videoConnectionChangedState', state);\n    };\n\n    /**\n\t * Get the state of the connection\n\t */\n    this.getState = function () {\n        return state;\n    };\n\n    function onPushFailed() {\n        callbacks.onPushFailed();\n    };\n\n    function onHTTPError(request) {\n        channel.connected && CommunicationStability.addVideoBreakDown();\n        onError(request);\n    };\n\n    function onError(request) {\n\n        if (state == XPMobileSDK.library.VideoConnectionState.closed || XPMobileSDK.library.Connection.connectionId == null) {\n            return;\n        }\n        var timeout = 0;\n\n        if (!channel.connected) {\n            if (channel.hasNext()) {\n                logger.log('Try next video channel.');\n                connectionURL = channel.getNext();\n            }\n            else {\n                callMethodOnObservers('videoConnectionNotAvailable');\n                return;\n            }\n        }\n        else {\n            \n            if (request.status) {\n                if (request.status == 410) {\n                    callMethodOnObservers('restartConnection', request);\n                    return;\n                } else {\n                    videoConnectionTemporaryDown(request.status);\n                }\n            }\n            else if (request.readyState && request.readyState == WebSocket.CLOSED) {\n                // WebSocket error or unexpected closure\n                // Do nothing. That callMethodOnObservers('startCommunication') below will restart the socket.\n            }\n            else if (request.status == 0 && (!request.response || request.response.byteLength === 0)) {\n                // Broken AJAX responses\n                videoConnectionTemporaryDown(request.status);\n            }\n\n        }\n\n        callMethodOnObservers('startCommunication', NETWORK.requestTimeOnFailure);\n    };\n\n    function videoConnectionTemporaryDown(status) {\n        self.wasConnectionDown = true;\n\n        callMethodOnObservers('videoConnectionTemporaryDown', status);\n    };\n\n    function callMethodOnObservers(method, arg) {\n        observers.forEach(function (observer) {        \n            if (observer && observer[method]) {\n                observer[method](arg);\n            }\n            if (self.worker) {\n                self.worker.postMessage({ 'message': method, \"arguments\": arg });\n            }\n        });\n    };\n};\n\nXPMobileSDK.library.VideoConnection.instances = [];\n","let VideoStreamState = {\n\tnew: 0,\r\n\topen: 1,\r\n\tclosed: 2\r\n};\n\nclass VideoStream {\n\tconstructor(videoId, connectionRequest, callbacks) {\r\n\t\tthis.videoConnectionElement = document.createElement('video-connection');\n\t\tthis.videoConnectionElement.videoId = this.videoId = videoId;\n\t\tthis.videoConnectionElement.location = XPMobileSDKSettings.MobileServerURL + XPMobileSDKSettings.videoChanel;\n\t\tthis.videoConnectionElement.addEventListener('onReceivedFrame', this.onReceivedFrame.bind(this));\n\t\tthis.videoConnectionElement.addEventListener('onConnectionError', this.onConnectionError.bind(this));\t\n\n\t\tthis.request = {\n\t\t\tparameters: connectionRequest.params,\n\t\t\toptions: connectionRequest.options\n\t\t};\n\n\t\tthis.response = {\n\t\t\tparameters: connectionRequest.response.outputParameters\n\t\t};\n\n\t\tif (this.request.options) {\n\t\t\tthis.cameraId = this.request.options.cameraId;\n\t\t\tthis.signalType = this.request.options.signal;\n\t\t\tthis.isReusable = this.request.options.reuseConnection;\n\t\t}\n\t\tthis.isPush = this.request.parameters.MethodType == 'Push';\n\t\tthis.isDirectStreaming = this.request.parameters.StreamType == 'FragmentedMP4';\n\n\t\tthis.supportsPTZ = this.response.parameters.PTZ == 'Yes';\n\t\tthis.supportsPTZPresets = this.response.parameters.Preset == 'Yes';\n\t\tthis.supportsPlayback = this.response.parameters.Playback == 'Yes';\n\t\tthis.supportsExport = this.response.parameters.ExportAvi == 'Yes';\n\n\t\tthis.callbacks = callbacks || {};\n\t\tthis.callbacks.onClose = this.callbacks.onClose || function (videoConnection) { };\n\t\tthis.callbacks.onRestart = this.callbacks.onRestart || function (videoConnection) { };\n\t\tthis.callbacks.onPushFailed = this.callbacks.onPushFailed || function () { };\n\n\t\tthis.observers = [];\n\n\t\tthis.state = VideoStreamState.new;\n\t}\r\n\r\n\tget isClosed() {\r\n\t\treturn this.state === VideoStreamState.closed;\r\n\t}\r\n\r\n\topen() {\r\n\t\tif (this.isClosed) {\r\n\t\t\treturn;\r\n        }\r\n\t\tthis.videoConnectionElement.dispatchEvent(new CustomEvent('start'));\r\n\t\tthis.state = VideoStreamState.open;\r\n\t}\r\n\r\n\tclose() {\r\n\t\tif (this.isClosed) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tthis.videoConnectionElement.dispatchEvent(new CustomEvent('destroy'));\r\n\t\tXPMobileSDK.closeStream(this.videoId);\r\n\t\tthis.state = VideoStreamState.closed;\r\n\t}\r\n\r\n\tonReceivedFrame(event) {\r\n\t\tif (this.observers.length > 0) {\n\t\t\tthis.callMethodOnObservers('videoConnectionReceivedFrame', event.detail.frame);\n\t\t}\n\t\telse {\n\t\t\tlogger.warn('Video connection received an item but doesn\\'t have observer to send it to!');\n\t\t\tthis.close();\n\t\t\treturn;\n\t\t}\r\n\t}\r\n\r\n\tonConnectionError() {\r\n\t\tif (!this.isClosed) {\r\n\t\t\tthis.close();\r\n\t\t\tthis.callMethodOnObservers('videoConnectionError');\r\n\t\t}\r\n\t}\r\n\r\n\trefresh() {\r\n\t\tthis.videoConnectionElement.refresh();\r\n\t}\r\n\r\n\t/**\n\t * Adds an observer for the video connection.\n\t * \n\t * @method addObserver\n\t * @param observer Any object. Should implement methods from the VideoConnectionObserverInterface.\n\t */\n\taddObserver(observer) {\n\t\tthis.observers.push(observer);\n\t}\r\n\r\n\t/**\n\t * Removes an observer for the video connection. \n\t * \n\t * @method removeObserver\n\t * @param observer: any object implementing VideoConnectionObserverInterface that should not receive further notifications\n\t */\n\tremoveObserver(observer) {\n\t\tlet index = this.observers.indexOf(observer);\n\t\tindex != -1 && this.observers.splice(index, 1);\n\t}\r\n\r\n\tcallMethodOnObservers(method, arg) {\n\t\tthis.observers.forEach(function (observer) {\n\t\t\tif (observer && observer[method]) {\n\t\t\t\tobserver[method](arg);\n\t\t\t}\n\t\t});\n\t}\r\n};","; (function (undefined) {\n    /**\n     * Binary parser\n     * Do not create instances of this class directly. They are only created by the video connection object and served to you \n     * via its callback. You can then read its properties and data. Which are:\n     *  - imageURL - if the frame represents an image, this will be a base64 encoded image;\n     *  - frameNumber - index of the frame;\n     *  - timestamp - data and time of the frame (Date object);\n     *  - hasSizeInformation, hasLiveInformation, hasPlaybackInformation - whether the frame has the corresponding extensions.\n     *  If hasSizeInformation is set to true:\n     *  \t- sizeInfo - contains information about frame size and cropping.\n     *  If hasLiveInformation is set to true:\n     *  \t- changedLiveEvents and currentLiveEvents - masks of flags. See ItemHeaderParser.LiveFlags.\n     *  If hasPlaybackInformation is set to true:\n     *  \t- changedPlaybackEvents and currentPlaybackEvents - masks of flags. See ItemHeaderParser.PlaybackFlags.\n     *  \n     *  @class ItemHeaderParser\n     *  @param \t\tbinary\t\tdata\t\tBinary data represented header with all information about the frame and the frame itself\n     */\n    var parser = function (data) {\n        // Stores the context of execution\n        var self = this;\n\n        // Stores the pointer to the current bytes offset.\n        var bytesOffset = 0;\n\n        // Define data view variable used in older browsers that does not support TypedArray\n        var dataView = null;\n\n        var readBytesProcessor = function (arg) {\n            return arg;\n        };\n\n        var readBytesReversedProcessor = function (arr) {\n            return Array.prototype.reverse.call(arr);\n        };\n\n        function skipBytes(bytesToSkip) {\n            bytesOffset += bytesToSkip;\n        }\n\n        function parseDeviceStateInfo(dataCount) {\n            var tempErrorCode;\n            var tempGUID;\n\n            self.errorCodes = [];\n\n            for (var a = 0; a < dataCount; a++) {\n                tempGUID = getGUID();\n                tempErrorCode = readBytes(8);\n\n                self.errorCodes.push({ code: tempErrorCode, guid: tempGUID });\n            }\n        }\n\n        /**\n         * Read bytes from ArrayBuffer\n         * \n         * @param number bytesCount Number of bytes to read from ArrayByffer\n         */\n        function readBytes(bytesCount) {\n            var bytes = new Uint8Array(data, bytesOffset, bytesCount);\n            var result = 0;\n\n            bytesOffset += bytesCount;\n\n            for (var i = 0; i < bytesCount; i++) {\n                result += bytes[i] * Math.pow(2, 8 * i);\n            }\n\n            return result;\n        }\n\n        /**\n         * Get frame timestamp in milliseconds unix timestamp  \n         */\n        function readBytesAsCharacters(bytesCount, flipEndians) {\n            var result = [];\n\n            for (var i = 0; i < bytesCount; i++) {\n                result.push(String.fromCharCode(readBytes(1)));\n            }\n\n            return flipEndians ? result.reverse().join(\"\") : result.join(\"\");\n        }\n\n        /**\n         * Converts byte to hex string\n         * @param {} v \n         * @returns {} \n         */\n        function uintToHexString(v) {\n            var res = '';\n            var map = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'];\n\n            var vl = (v & 0xf0) >> 4;\n            res += map[vl];\n\n            var vr = v & 0x0f;\n            res += map[vr];\n\n            return res;\n        }\n\n        /**\n         * Base method for reading bytes from buffer, processing them and converts to hex string\n         * @param {} count - number of bytes to read\n         * @returns {} string - hex representation of the bytes read\n         */\n        function readToStringBase(count, processor) {\n            var arr = new Uint8Array(data, bytesOffset, count);\n            var processed = processor(arr);\n            var res = '';\n            for (var i = 0; i < count; i++) {\n                res += uintToHexString(processed[i]);\n            }\n            bytesOffset += count;\n            return res;\n        }\n\n        /**\n         * Reads bytes from buffer, reverse bytes in the array and converts to hex string\n         * @param {} count - number of bytes to read\n         * @returns {} string - hex representation of the bytes read\n         */\n        function readToString(count) {\n            return readToStringBase(count, readBytesProcessor);\n        }\n\n        /**\n         * Reads bytes from buffer and converts to hex string\n         * @param {} count - number of bytes to read\n         * @returns {} string - hex representation of the bytes read\n         */\n        function readAndReverseToString(count) {\n            return readToStringBase(count, readBytesReversedProcessor);\n        }\n\n        /**\n         * Retrieving string of guid from its binary representation\n         */\n        function getGUID() {\n            var res = '';\n\n            res += readAndReverseToString(4);\n            res += '-';\n            res += readAndReverseToString(2);\n            res += '-';\n            res += readAndReverseToString(2);\n            res += '-';\n            res += readToString(2);\n            res += '-';\n            res += readToString(6);\n\n            return res;\n        }\n\n        self.readBytes = readBytes;\n        self.skipBytes = skipBytes;\n        self.getGUID = getGUID;\n\n        /**\n         * Get all information from header related with frame size\n         */\n        self.parseSizeInformation = function () {\n            self.sizeInfo = { sourceSize: {}, sourceCrop: {}, destinationSize: {} };\n            self.sizeInfo.sourceSize.width = readBytes(4);\n            self.sizeInfo.sourceSize.height = readBytes(4);\n            self.sizeInfo.sourceCrop.left = readBytes(4);\n            self.sizeInfo.sourceCrop.top = readBytes(4);\n            self.sizeInfo.sourceCrop.right = readBytes(4);\n            self.sizeInfo.sourceCrop.bottom = readBytes(4);\n            self.sizeInfo.sourceCrop.width = self.sizeInfo.sourceCrop.right - self.sizeInfo.sourceCrop.left;\n            self.sizeInfo.sourceCrop.height = self.sizeInfo.sourceCrop.bottom - self.sizeInfo.sourceCrop.top;\n            self.sizeInfo.destinationSize.width = readBytes(4);\n            self.sizeInfo.destinationSize.height = readBytes(4);\n            self.sizeInfo.destinationSize.resampling = readBytes(4);\n\n            // Not currently used\n            self.sizeInfo.destinationSize.top = readBytes(4);\n            self.sizeInfo.destinationSize.right = readBytes(4);\n            self.sizeInfo.destinationSize.bottom = readBytes(4);\n        };\n\n        /**\n         * Get video connection GUID \n         */\n        self.parseLiveInformation = function () {\n            self.currentLiveEvents = readBytes(4);\n            self.changedLiveEvents = readBytes(4);\n        };\n\n        /**\n         * Get playback events information \n         */\n        self.parsePlaybackInformation = function () {\n            self.currentPlaybackEvents = readBytes(4);\n            self.changedPlaybackEvents = readBytes(4);\n        };\n\n        /**\n         * Get playback info \n         */\n        self.parsePlaybackInfo = function () {\n            self.requestedTimeStampUtcMs = readBytes(8);\n            readBytes(4);\n            readBytes(4);\n        };\n\n        /**\n         * Get stream information \n         */\n        self.parseStreamInfo = function () {\n            self.stream = {};\n            self.stream.headerSize = readBytes(4);\n            self.stream.headerVesion = readBytes(4);\n\n            self.stream.reserved = readBytes(4);\n            self.stream.validFields = readBytes(4);\n\n            self.stream.timeBetweenFrames = readBytes(4);\n            self.stream.dataType = readBytesAsCharacters(4, true);\n            self.stream.flags = readBytes(4);\n\n            self.stream.profile = readBytes(4);\n            self.stream.level = readBytes(4);\n\n            self.stream.compatibility = readBytes(4);\n            self.stream.constrains = readBytes(8);\n\n            self.stream.frameCount = readBytes(4);\n\n            self.stream.hasKeyFrame = (self.stream.flags & parser.StreamInfoFlags.HasKeyFrame) === parser.StreamInfoFlags.HasKeyFrame;\n        };\n\n        /**\n         * Retrieve frame binary data  \n         */\n        self.retrieveData = function () {\n            self.data = new Uint8Array(data, self.headerSize, self.dataSize);\n        };\n\n        self.parseDynamicInformation = function () {\n            var dataCount,\n                dataType;\n\n            skipBytes(8);\n\n            dataCount = readBytes(4);\n            dataType = readBytes(4);\n\n            if (dataType == parser.DynamicInfoDataType.HeaderTypeDeviceStateInfo) {\n                parseDeviceStateInfo(dataCount);\n            }\n        };\n    };\n\n    parser.Type = {};\n    parser.Type.Frame = 1;\n    parser.Type.Fragment = 2;\n\n    parser.Error = {};\n    parser.Error.NonFatal = 0x01;\n    parser.Error.Fatal = 0x02;\n\n    parser.MainHeaderLength = 36;\n    parser.SizeInfoHeaderLength = 32;\n    parser.LiveInfoHeaderLength = 8;\n    parser.PlaybackInfoHeaderLength = 8;\n\n    parser.HeaderExtensionSize = 0x01;\n    parser.HeaderExtensionLiveEvents = 0x02;\n    parser.HeaderExtensionPlaybackEvents = 0x04;\n    parser.HeaderExtensionNative = 0x08;\n    parser.HeaderExtensionMotionEvents = 0x10;\n    parser.HeaderExtensionLocationInfo = 0x20;\n    parser.HeaderExtensionStreamInfo = 0x40;\n    parser.HeaderExtensionCarouselInfo = 0x80;\n    parser.HeaderExtensionDynamicInfo = 0x100;\n    parser.HeaderExtensionPlaybackInfo = 0x200;\n\n    parser.LiveFlags = {};\n    parser.LiveFlags.LiveFeed = 0x01;\n    parser.LiveFlags.Motion = 0x02;\n    parser.LiveFlags.Recording = 0x04;\n    parser.LiveFlags.Notification = 0x08;\n    parser.LiveFlags.CameraConnectionLost = 0x10;\n    parser.LiveFlags.DatabaseFail = 0x20;\n    parser.LiveFlags.DiskFull = 0x40;\n    parser.LiveFlags.ClientLiveStopped = 0x80;\n\n    parser.PlaybackFlags = {};\n    parser.PlaybackFlags.Stopped = 0x01;\n    parser.PlaybackFlags.Forward = 0x02;\n    parser.PlaybackFlags.Backward = 0x04;\n    parser.PlaybackFlags.DatabaseStart = 0x10;\n    parser.PlaybackFlags.DatabaseEnd = 0x20;\n    parser.PlaybackFlags.DatabaseError = 0x40;\n    parser.PlaybackFlags.RangeNoData = 0x100;\n    parser.PlaybackFlags.OutOfRange = 0x200;\n\n    parser.DynamicInfoDataType = {};\n    parser.DynamicInfoDataType.HeaderTypeDeviceStateInfo = 0;\n\n    parser.StreamInfoFlags = {};\n    parser.StreamInfoFlags.HasKeyFrame = 0x01;\n\n    XPMobileSDK.library.ItemHeaderParser = parser;\n})();","; (function (undefined) {\r\n    var videoParser = function (data) {\r\n        var self = this;\r\n\r\n        XPMobileSDK.library.ItemHeaderParser.call(self, data);\n\n        /**\n         * Get motion amount information \n         */\n        self.parseMotionInformation = function () {\r\n            self.motionHeaderSize = readBytes(4);\n            self.motionAmount = readBytes(4);\r\n        };\n\n        /**\n         * Encode the data using Blob\n         */\n        self.convertToImage = function () {\r\n            self.type = XPMobileSDK.library.ItemHeaderParser.Type.Frame;\n            self.blob = new Blob([self.data], { type: 'image/jpeg' });\r\n        };\n\n        /**\n         * Get carousel information\n         */\n        self.parseCarouselInfo = function () {\r\n            self.carousel = {};\n            self.carousel.headerSize = readBytes(4);\n            self.carousel.headerVesion = readBytes(4);\n            self.carousel.itemId = getGUID();\r\n        };\n\n        /**\n         * Parse video frame headers\n         */\n        function parseHeader() {  \r\n            self.uuid = self.getGUID();\n\n            self.timestamp = new Date(self.readBytes(8));\n            self.frameNumber = self.readBytes(4);\n            self.dataSize = self.readBytes(4);\n            self.headerSize = self.readBytes(2);\n\n            var MainHeader = self.readBytes(2);\n            \n            self.hasSizeInformation = MainHeader & XPMobileSDK.library.ItemHeaderParser.HeaderExtensionSize;\n            self.hasLiveInformation = MainHeader & XPMobileSDK.library.ItemHeaderParser.HeaderExtensionLiveEvents;\n            self.hasPlaybackInformation = MainHeader & XPMobileSDK.library.ItemHeaderParser.HeaderExtensionPlaybackEvents;\n            self.hasNativeData = MainHeader & XPMobileSDK.library.ItemHeaderParser.HeaderExtensionNative;\n            self.hasMotionInformation = MainHeader & XPMobileSDK.library.ItemHeaderParser.HeaderExtensionMotionEvents;\n            self.hasLocationData = MainHeader & XPMobileSDK.library.ItemHeaderParser.HeaderExtensionLocationInfo;\n            self.hasStreamInfo = MainHeader & XPMobileSDK.library.ItemHeaderParser.HeaderExtensionStreamInfo;\n            self.hasCarouselInfo = MainHeader & XPMobileSDK.library.ItemHeaderParser.HeaderExtensionCarouselInfo;\n            self.hasPlaybackInfo = MainHeader & XPMobileSDK.library.ItemHeaderParser.HeaderExtensionPlaybackInfo;\n            \n            if (self.hasSizeInformation) {\r\n                self.parseSizeInformation();\r\n            }\n\n            if (self.hasLiveInformation) {\r\n                self.parseLiveInformation();\r\n            }\n            if (self.hasPlaybackInformation) {\r\n                self.parsePlaybackInformation();\r\n            }\n            if (self.hasNativeData) {\r\n                self.readBytes(readBytes(4)); // Remove this by header parser when we have support for Native data\n            }\n            if (self.hasMotionInformation) {\r\n                self.parseMotionInformation();\r\n            }\n            if (self.hasLocationData) {\r\n                self.readBytes(readBytes(4)); // Remove this by header parser when we have support for Stream location\n            }\n            if (self.hasStreamInfo) {\r\n                self.parseStreamInfo();\r\n            }\n            if (self.hasCarouselInfo) {\r\n                self.parseCarouselInfo();\r\n            }\r\n            if (self.hasPlaybackInfo) {\r\n                self.parsePlaybackInfo();\r\n            }\r\n        }\n\n        /**\n        * Called to get the video data from the binary\n        *\n        * @param dataView, binary, video data\n        */\n        function getData() {\r\n            if (self.dataSize <= 0) {\r\n                return;\r\n            }\r\n\r\n            self.retrieveData();\n\n            if (self.stream) {\r\n                switch (self.stream.dataType) {\r\n                    case 'JPEG': self.convertToImage(); break;\r\n                }\r\n            }\n            else {\r\n                self.convertToImage();\r\n            }\r\n        }\n\n        /**\n         * Initialize the prototype\n         */\n        function initialize() {\r\n            parseHeader();\r\n            getData();\r\n        }\n\n        initialize();\r\n    };\n\r\n    XPMobileSDK.library.VideoHeaderParser = videoParser;\r\n})();","; (function (undefined) {\n    var audioParser = function (data) {\n        var self = this;\r\n\r\n        XPMobileSDK.library.ItemHeaderParser.call(self, data);\n\n        /**\n         * Parse audio frame headers\n         */\n        function parseAudioHeader() {\r\n            self.uuid = self.getGUID();\n            \n            self.skipBytes(18);\n\n            var mainHeader = self.readBytes(2);\n\n            self.skipBytes(4);\n\n            if (mainHeader & XPMobileSDK.library.ItemHeaderParser.HeaderExtensionDynamicInfo) {\r\n                self.parseDynamicInformation();\r\n            }\r\n        };\n\n        /**\n         * Initialize the prototype\n         */\n        function initialize() {\r\n            parseAudioHeader();\r\n        }\n\n        initialize();\r\n    };\n\r\n    XPMobileSDK.library.AudioHeaderParser = audioParser;\r\n})();","/**\n * A pool of reusable video connections. \n * \n * A video connection can be reused if a client needs to open more than one stream for the same camera. In this case the client needs to \n * provide an additional parameter to the command Connection.requestStream. \n * \n * @author rvp\n */\nXPMobileSDK.library.VideoConnectionPool = new function() {\n\t\n\t/**\n\t * An abstraction of a camera in the pool.\n\t * \n\t * @param {String} id: the camera id\n\t */\n\tvar Camera = function(id, videoConn) {\n\t\tthis.id = id;\n\t\tthis.videoConnection = videoConn;\n\t\tthis.response = undefined;\n\t\tthis.count = 1;\n\t\tthis.pendingCallbacks = [];\n\t};\n\t\n\tthis.cameras = [];\n\n\t/**\n\t * Checks if the pool contains a camera with the given cameraId.\n\t */\n\tthis.containsCameraByVideoId = function(cameraId,videoId) {\n\t\treturn this.cameras.some(c => c.id === cameraId && c.videoConnection && c.videoConnection.videoId === videoId);\n\t\t\n\t};\n\n\t/**\n\t * Adds a camera to the pool.\n\t */\n\tthis.addCamera = function(cameraId,videoConn) {\n\t\tthis.cameras.push(new Camera(cameraId,videoConn));\n\t};\n\t\n\t/**\n\t * Removes the camera with the given cameraId from the pool. Further attempts to open a stream for the same camera will result in a new RequestStream command. \n\t */\n\tthis.removeCamera = function(cameraId,videoId) {\n\t\tvar index = this.cameras.findIndex((c)=>{return c.id == cameraId  && c.videoConnection &&c.videoConnection.videoId == videoId;});\n\t\tthis.cameras.splice(index, 1);\n\t};\n\n\t/**\n\t * Removes all cameras from the pool.\n\t */\n\tthis.clear = function() {\n\t\tthis.cameras = [];\n\t};\n\t\n\n\tthis.getCameraByVideoId = function(cameraId, videoId) {\n\t\treturn this.cameras.find(c => c.id === cameraId && c.videoConnection && c.videoConnection.videoId == videoId);\n\t}.bind(this);\n};\n","XPMobileSDK.library.VideoPushConnection = function (successCallback, errorCallback, skipUserMedia) {\n\t\n\tthis.open = open;\n\tthis.close = close;\n\tthis.send = send;\n\tthis.destroy = destroy;\n\tthis.isOpen = isOpen;\n\tthis.getMediaStream = getMediaStream;\n\n\tvar self = this;\n\tvar headerSize = 36;\n\tvar counter = 0;\n\t\n\tvar callbacks = {\n\t\tonSuccess: function (videoPushConnection) {},\n\t\tonError: function (error) {},\n\t\tonStreamSuccess: function (videoPushConnection) {},\n\t\tonStreamError: function (error) {}\n\t};\n\t\n\tvar stream, streamRequest, mediaStream;\n\t\n\tinitialize();\n\t\n\t\n\tfunction initialize() {\n\t\t\n\t\tcallbacks.onSuccess = successCallback || callbacks.onSuccess;\n\t\tcallbacks.onError = errorCallback || callbacks.onError;\n\n\t\tif (skipUserMedia) {\r\n\t\t    callbacks.onSuccess(self);\n\n\t\t    return;\r\n\t\t}\n\n\t\tif (navigator.mediaDevices.getUserMedia) {\n\t\t\tnavigator.mediaDevices.getUserMedia({ video: true, audio: false }).then(onSuccess).catch(onError);\n\t\t}\n\t\telse {\n\t\t\tnavigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia;\n\t\t\tif (navigator.getUserMedia) {\n\t\t\t\tnavigator.getUserMedia({ video: true, audio: false }, onSuccess, onError);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tlogger.warn(\"Video push not supported!\");\n\t\t\t}\t\t\t\t\n\t\t}\n\t\t\n\t\tfunction onSuccess(userMediaStream) {\n\t\t\t\n\t\t\tmediaStream = userMediaStream;\n\t\t\tcallbacks.onSuccess(self);\t\t\t\n\t\t}\n\t\t\n\t\tfunction onError(error) {\n\t\t    logger.error(error.name);\n\t\t\tcallbacks.onError(error);\t\n\t\t}\n\t}\n\t\n\tfunction getMediaStream() {\n\n\t\treturn mediaStream;\n\t}\n\t\n\tfunction open(successCallback, errorCallback) {\n\n\t\tcallbacks.onStreamSuccess = successCallback || callbacks.onStreamSuccess;\n\t\tcallbacks.onStreamError = errorCallback || callbacks.onStreamError;\n\t\t\n\t\tif (isOpen()) return;\n\n\t\tstreamRequest = XPMobileSDK.requestPushStream(streamRequestCallback);\t\t\n\t}\n\t\n\tfunction close() {\n\n\t\tif (!isOpen()) return;\n\n\t\tif (streamRequest) {\n\t\t    XPMobileSDK.cancelRequest(streamRequest);\n\t\t\tstreamRequest = null;\n\t\t}\n\t\tif (stream) {\n\t\t    XPMobileSDK.closeStream(stream.videoId);\n\t\t\tstream = null;\n\t\t}\t\t\n\t}\n\t\n\tfunction streamRequestCallback(parameters, error) {\n\t\t\n\t\tstreamRequest = null;\n\n\t\tif (!parameters) {\n\t\t\tcallbacks.onStreamError(error);\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tstream = parameters;\n\t\tcallbacks.onStreamSuccess(self);\n\t}\n\t\n\tfunction isOpen() {\n\t\treturn stream || streamRequest;\n\t}\n\t\n\tfunction send(base64EncodedImage) {\n\t\t\n\t\tvar bytesArray = XPMobileSDK.library.Bytes.fromBase64(base64EncodedImage);\n\t\t\n\t\tvar buffer = new ArrayBuffer(headerSize + bytesArray.length);\n\t\tvar bufferView = new Uint8Array(buffer);\n\t\t\n\t\t// Header\n\t\tbufferView.set(XPMobileSDK.library.Bytes.fromGuid(stream.videoId, 16));\t\t\t\t// Video id\n\t\tbufferView.set(XPMobileSDK.library.Bytes.fromInt(new Date().getTime(), 8), 16);\t\t// Timestamp\n\t\tbufferView.set(XPMobileSDK.library.Bytes.fromInt(++counter, 4), 24);\t\t\t\t// Frame count\n\t\tbufferView.set(XPMobileSDK.library.Bytes.fromInt(bytesArray.length, 4), 28);\t\t// Frame size in bytes\n\t\tbufferView.set(XPMobileSDK.library.Bytes.fromInt(headerSize, 2), 32);\t\t\t\t// Header size in bytes\n\t\tbufferView.set(XPMobileSDK.library.Bytes.fromInt(0, 2), 34);\t\t\t\t\t\t// Header extension flags\n\t\t// Data\n\t\tbufferView.set(bytesArray, headerSize);\n\t\t\t\t\n\t\tvar url = XPMobileSDKSettings.MobileServerURL + XPMobileSDKSettings.videoChanel + '/' + stream.videoId + '/';\n\t\tvar parameters = {\n\t\t\tmethod: 'post',\n\t\t\tcontentType: 'arraybuffer', \n\t\t\tpostBody: buffer,\n\t\t\tonLoading: onAjaxLoading,\n\t\t\tonSuccess: onAjaxSuccess,\n\t\t\tonFailure: onAjaxFailure\n\t\t};\n\t\t\n\t\tvar ajaxRequest = new XPMobileSDK.library.Ajax.Request(url, parameters);\t\t\n\t}\n\t\n\tfunction onAjaxLoading(request) {}\n\t\n\tfunction onAjaxSuccess(request) {}\n\t\n\tfunction onAjaxFailure(request) {\n\t\tlogger.error('ERROR in ajax request for video push with videoId ' + stream.videoId);\t\t\n\t}\n\t\n\tfunction destroy() {\n\t\t\n\t\tclose();\n\n\t\tif (!mediaStream) return;\n\t\t\n\t\tmediaStream.getTracks().forEach(function (track) {\n\t\t\ttrack.stop();\n\t\t});\n\t\tmediaStream = null;\t\t\n\t}\t\n};\n","XPMobileSDK.library.AudioPushConnection = function (itemIds, sampleRate, successCallback, errorCallback) {\r\n\r\n    this.open = open;\n    this.close = close;\n    this.send = send;\n    this.destroy = destroy;\n    this.isOpen = isOpen;\n\n    var self = this;\n    var headerSize = 36;\n    var counter = 0;\n\n    var callbacks = {\r\n        onStreamSuccess: function (videoPushConnection) { },\n        onStreamError: function (error) { },\r\n        onAjaxLoading: function () { },\r\n      onAjaxSuccess: function (videoPushConnection) { },\n      onAjaxFailure: function () { logger.error('ERROR in ajax request for audio push'); }\r\n    };\n\n    var stream,\n        streamRequest;\n\n    initialize();\n\n    function initialize() {\r\n        callbacks.onAjaxSuccess = successCallback || callbacks.onAjaxSuccess;\n        callbacks.onAjaxFailure = errorCallback || callbacks.onAjaxFailure;\r\n    }\n\n    function open(successCallback, errorCallback, onAjaxFailure) {\r\n        callbacks.onStreamSuccess = successCallback || callbacks.onStreamSuccess;\n        callbacks.onStreamError = errorCallback || callbacks.onStreamError;\n\n        if (isOpen()) {\r\n            return;\r\n        }\n\n        var options = {\r\n            AudioSamplingRate: sampleRate || 8000,\n            AudioBitsPerSample: 16,\n            timeout: 5000\n        };\n\n        streamRequest = XPMobileSDK.requestAudioStreamIn(itemIds, options, streamRequestCallback, streamRequestErrorCallback);\r\n    }\n\n    function close() {\r\n        if (!isOpen()) {\r\n            return;\r\n        }\n\n        if (streamRequest) {\r\n            XPMobileSDK.cancelRequest(streamRequest);\n            streamRequest = null;\r\n        }\n\n        if (stream) {\r\n            XPMobileSDK.closeStream(stream.StreamId);\n            stream = null;\r\n        }\r\n    }\n\n    function streamRequestCallback(parameters, error) {\n        streamRequest = null;\n\n        if (!parameters) {\r\n            callbacks.onStreamError(error);\n            return;\r\n        }\n\n        stream = parameters;\n        callbacks.onStreamSuccess(self);\r\n    }\n\n    function streamRequestErrorCallback(error) {\n        streamRequest = null;\n        stream = null;\n\r\n        callbacks.onStreamError(error);\r\n    }\n\n    function isOpen() {\r\n        return stream || streamRequest;\r\n    }\n\n    function send(pcmData) {\r\n        if (!stream) {\r\n            return;\r\n        }\r\n\r\n        var buffer = new ArrayBuffer(headerSize + pcmData.length);\n        var bufferView = new Int8Array(buffer);\n\n        // Header\n        bufferView.set(XPMobileSDK.library.Bytes.fromGuid(stream.StreamId, 16));\t\t\t\t// Stream id\n        bufferView.set(XPMobileSDK.library.Bytes.fromInt(new Date().getTime(), 8), 16);\t\t// Timestamp\n        bufferView.set(XPMobileSDK.library.Bytes.fromInt(++counter, 4), 24);\t\t\t\t// Frame count\n        bufferView.set(XPMobileSDK.library.Bytes.fromInt(pcmData.length, 4), 28);\t\t// Frame size in bytes\n        bufferView.set(XPMobileSDK.library.Bytes.fromInt(headerSize, 2), 32);\t\t\t\t// Header size in bytes\n        bufferView.set(XPMobileSDK.library.Bytes.fromInt(0, 2), 34);\t\t\t\t\t\t// Header extension flags\n        // Data\n        bufferView.set(pcmData, headerSize);\n\n        var url = XPMobileSDKSettings.MobileServerURL + XPMobileSDKSettings.audioChannel + '/' + stream.StreamId;\n\n        var parameters = {\r\n            method: 'post',\n            //contentType: 'audio/webm',\n            'Transfer-Encoding': 'chunked',\n            contentType: 'arraybuffer',\n            postBody: buffer,\n            // postBody: bufferView,\n            timeout: 2000,\n            responseType: 'arraybuffer',\n            onLoading: callbacks.onAjaxLoading,\n            onSuccess: callbacks.onAjaxSuccess,\n            onFailure: callbacks.onAjaxFailure,\r\n            onTimeout: callbacks.onAjaxFailure\r\n        };\n\n        var ajaxRequest = new XPMobileSDK.library.Ajax.Request(url, parameters);\r\n    }\n\n    function destroy() {\r\n        close();\r\n    }\r\n};","class AudioAvailability {\r\n\r\n    static mimecodec = \"audio/mpeg\";\r\n\r\n    static isOutgoingAudioNotSupported() {\r\n        var notSupported = !XPMobileSDKSettings.SupportsAudioIn ||\r\n            !XPMobileSDK.features.SupportsOutgoingAudio;\r\n\r\n        return notSupported;\r\n    };\r\n\r\n    static isOutgoingPTTAudioNotSupported() {\r\n        var notSupported = !XPMobileSDKSettings.SupportsAudioIn || !XPMobileSDK.features.SupportsOutgoingPTTAudio;\r\n\r\n        return notSupported;\r\n    };\r\n\r\n    static isLiveFeatureNotSupported() {\r\n        return AudioAvailability.isOutgoingAudioNotSupported();\r\n    };\r\n\r\n    static isPlaybackFeatureNotSupported() {\r\n        return AudioAvailability.isOutgoingAudioNotSupported() && AudioAvailability.isOutgoingPTTAudioNotSupported();\r\n    };\r\n\r\n    static noAvailableMics(microphones) {\r\n\r\n        var notSupported = AudioAvailability.isOutgoingAudioNotSupported() ||\r\n            !microphones ||\r\n            !microphones.length;\r\n\r\n        return notSupported;\r\n    };\r\n\r\n    static noAvailableSpeakers(speakers) {\r\n        var notSupported = AudioAvailability.isOutgoingPTTAudioNotSupported() ||\r\n            !speakers ||\r\n            !speakers.length;\r\n\r\n        return notSupported;\r\n    };\r\n}\r\n\r\nXPMobileSDK.library.AudioAvailability = AudioAvailability;"]}